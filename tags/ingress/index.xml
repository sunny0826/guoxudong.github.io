<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – Ingress</title><link>https://guoxudong.io/tags/ingress/</link><description>Recent content in Ingress on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 02 Jul 2020 13:51:14 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/ingress/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 基于 Flagger 和 Nginx-Ingress 实现金丝雀发布</title><link>https://guoxudong.io/post/flagger-nginx-ingress/</link><pubDate>Thu, 02 Jul 2020 13:51:14 +0800</pubDate><guid>https://guoxudong.io/post/flagger-nginx-ingress/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>很久之前我写过一篇介绍使用 Nginx-Ingress 实现蓝绿部署和金丝雀发布的文章，但那篇文章只是介绍了 nginx-ingress 具备这些能力，真正应用还要很多额外的配置和操作，况且现在能实现这些功能的并不只有 nginx-ingress，Service Mesh 工具如：Istio，App Mesh，Linkerd；Ingress Controller 如：Contour，Gloo，NGINX 都能实现，而我们需要的更多是进行金丝雀发布之后指标的监控，流量的调整以及出现问题后的及时回滚。而 Flagger 就是这样一个帮助我们解决上面这些问题的开源工具。&lt;/p>
&lt;h2 id="flagger">Flagger&lt;/h2>
&lt;p>&lt;a href="https://github.com/weaveworks/flagger">Flagger&lt;/a> 是一种渐进式交付工具，可自动控制 Kubernetes 上应用程序的发布过程。通过指标监控和运行一致性测试，将流量逐渐切换到新版本，降低在生产环境中发布新软件版本导致的风险。&lt;/p>
&lt;p>Flagger 使用 Service Mesh（App Mesh，Istio，Linkerd）或 Ingress Controller（Contour，Gloo，NGINX）来实现多种部署策略（金丝雀发布，A/B 测试，蓝绿发布）。对于发布分析，Flagger 可以查询 Prometheus、Datadog 或 CloudWatch，并使用 Slack、MS Teams、Discord 和 Rocket 来发出告警通知。&lt;/p>
&lt;blockquote>
&lt;p>本文主要介绍 Flagger 使用 Nginx-Ingress 进行金丝雀发布并监控发布状态，更多内容见&lt;a href="https://docs.flagger.app/">官方文档&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggclsv45tqj21ok0skwfb.jpg" alt="Flagger NGINX Ingress Controller">&lt;/p>
&lt;h3 id="前提条件">前提条件&lt;/h3>
&lt;h4 id="版本要求">版本要求&lt;/h4>
&lt;p>安装 Flagger 需要 Kubernetes 版本高于 &lt;strong>v1.14&lt;/strong>，NGINX ingress 版本高于 &lt;strong>0.24&lt;/strong>。&lt;/p>
&lt;h4 id="安装-nginx-ingress">安装 NGINX ingress&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create ns ingress-nginx
$ helm upgrade -i nginx-ingress stable/nginx-ingress &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--namespace ingress-nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.metrics.enabled=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.podAnnotations.&lt;span style="color:#ed9d13">&amp;#34;prometheus\.io/scrape&amp;#34;&lt;/span>=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.podAnnotations.&lt;span style="color:#ed9d13">&amp;#34;prometheus\.io/port&amp;#34;&lt;/span>=&lt;span style="color:#3677a9">10254&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装部署">安装部署&lt;/h3>
&lt;h4 id="flagger-安装">Flagger 安装&lt;/h4>
&lt;p>Flagger 提供了 Hlem 和 Kustomize 两种安装方式，这里使用 Helm 3 安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm repo add flagger https://flagger.app
$ helm upgrade -i flagger flagger/flagger &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--namespace ingress-nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set prometheus.install=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">meshProvider&lt;/span>=nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.channel=flagger &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.user=flagger
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是这里我选择了 Slack 作为通知软件，需要在自己的 &lt;code>#channel&lt;/code> 内新增一个 APP，并将该 APP 的 &lt;code>url&lt;/code>、&lt;code>channel&lt;/code>、&lt;code>user&lt;/code> 填入上面的命令中。这里设置的是全局通知，集群中的 Flagger 被触发后都会进行通知，当然也可以为单个 Flagger 配置专门的通知，这里就不做过多介绍，详情见&lt;a href="https://docs.flagger.app/usage/alerting">官方文档&lt;/a>。&lt;/p>
&lt;h4 id="示例安装">示例安装&lt;/h4>
&lt;p>新建测试 namespace：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create ns &lt;span style="color:#24909d">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署示例 deployment 和 horizontal pod autoscaler：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -k github.com/weaveworks/flagger//kustomize/podinfo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署负载测试器，以便在金丝雀发布时进行流量分析：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm upgrade -i flagger-loadtester flagger/loadtester --namespace=&lt;span style="color:#24909d">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署 ingress，这里的 &lt;code>app.example.com&lt;/code> 需要改成你自己的域名，如果是在本地进行测试，则修改本机和负载测试器所在节点的 &lt;code>/ect/hosts&lt;/code>，将其指向你的 ADDRESS，否则将无法进行流量分析，导致部署失败。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kubernetes.io/ingress.class&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">rules&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666"> &lt;/span>app.example.com&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">http&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">paths&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">backend&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">servicePort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将以上内容另存为 &lt;code>podinfo-ingress.yaml&lt;/code>，然后应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f ./podinfo-ingress.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个 Canary 资源：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>flagger.app/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Canary&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># deployment reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ingress reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ingressRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># HPA reference (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">autoscalerRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>autoscaling/v2beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>HorizontalPodAutoscaler&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># the maximum time in seconds for the canary deployment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># to make progress before it is rollback (default 600s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">progressDeadlineSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">60&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ClusterIP port number&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># container port number or name&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">9898&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">analysis&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 时间间隔 (默认 60s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>10s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 回滚前的最大失败指标检查次数&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">threshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 路由到金丝雀副本的最大流量百分比&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 百分比 (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">maxWeight&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">50&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 金丝雀每次递增的百分比&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 百分比 (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">stepWeight&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">5&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># NGINX Prometheus checks&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metrics&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>request-success-rate&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># minimum req success rate (non 5xx responses)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># percentage (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">thresholdRange&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">min&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">99&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># testing (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">webhooks&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>acceptance-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>pre-rollout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>30s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>bash&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;curl -sd &amp;#39;test&amp;#39; http://podinfo-canary/token | grep token&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>load-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>5s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;hey -z 1m -q 10 -c 2 http://app.example.com/&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将以上内容另存为 &lt;code>podinfo-canary.yaml&lt;/code>，然后应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f ./podinfo-canary.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>目前可以看到示例应用 &lt;code>podinfo&lt;/code> 已经安装完毕，并出现了 &lt;code>podinfo&lt;/code> 和 &lt;code>podinfo-primary&lt;/code> 两个版本，并且 &lt;code>http://app.example.com/&lt;/code> 已经可以访问：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get deploy,svc,ing -n &lt;span style="color:#24909d">test&lt;/span>
NAME READY UP-TO-DATE AVAILABLE AGE
deployment.apps/flagger-loadtester 1/1 &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> 29h
deployment.apps/podinfo 0/0 &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">0&lt;/span> 29h
deployment.apps/podinfo-primary 2/2 &lt;span style="color:#3677a9">2&lt;/span> &lt;span style="color:#3677a9">2&lt;/span> 29s
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
service/flagger-loadtester ClusterIP 10.43.116.74 &amp;lt;none&amp;gt; 80/TCP 29h
service/podinfo ClusterIP 10.43.155.193 &amp;lt;none&amp;gt; 80/TCP 9s
service/podinfo-canary ClusterIP 10.43.194.226 &amp;lt;none&amp;gt; 80/TCP 29s
service/podinfo-primary ClusterIP 10.43.254.13 &amp;lt;none&amp;gt; 80/TCP 29s
NAME HOSTS ADDRESS PORTS AGE
ingress.extensions/podinfo app.example.com 192.168.1.129,192.168.4.210 &lt;span style="color:#3677a9">80&lt;/span> 5h17m
ingress.extensions/podinfo-canary app.example.com &lt;span style="color:#3677a9">80&lt;/span> 9s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个页面会展示 &lt;code>podinfo&lt;/code> 的版本已经其正在访问的 pod 名称：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcndtuqzsj21ha0q940s.jpg" alt="app.example.com">&lt;/p>
&lt;h3 id="自动金丝雀发布">自动金丝雀发布&lt;/h3>
&lt;p>现在起发布由 Flagger 控制，在部署新版本后，Flagger 自动将流量按照比例切换到新版本上，同时监控性能指标，例如 HTTP 请求的成功率、请求的平均持续时间和 pod 运行状态，经过分析后提升流量或者回滚，并通知到 Slack。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcng8c8vnj21q40t6q3n.jpg" alt="自动金丝雀发布">&lt;/p>
&lt;p>通过更新镜像版本触发金丝雀部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.1
deployment.apps/podinfo image updated
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到初始化完成后已经有 5% 的流量切换到新版本了&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> describe canary/podinfo
...
Status:
Canary Weight: &lt;span style="color:#3677a9">5&lt;/span>
Conditions:
Last Transition Time: 2020-07-02T07:21:26Z
Last Update Time: 2020-07-02T07:21:26Z
Message: New revision detected, progressing canary analysis.
Reason: Progressing
Status: Unknown
Type: Promoted
Failed Checks: &lt;span style="color:#3677a9">0&lt;/span>
Iterations: &lt;span style="color:#3677a9">0&lt;/span>
Last Applied Spec: c8bdf98d5
Last Transition Time: 2020-07-02T07:22:05Z
Phase: Progressing
Tracked Configs:
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Warning Synced 10m flagger podinfo-primary.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: observed deployment generation less &lt;span style="color:#6ab825;font-weight:bold">then&lt;/span> desired generation
Warning Synced 10m flagger podinfo-primary.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Normal Synced 10m (x3 over 10m) flagger all the metrics providers are available!
Normal Synced 10m flagger Initialization &lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>! podinfo.test
Normal Synced 41s flagger New revision detected! Scaling up podinfo.test
Warning Synced 31s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">1&lt;/span> updated replicas are available
Warning Synced 21s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Warning Synced 11s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">1&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Normal Synced 1s flagger Starting canary analysis &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> podinfo.test
Normal Synced 1s flagger Pre-rollout check acceptance-test passed
Normal Synced 1s flagger Advance podinfo.test canary weight &lt;span style="color:#3677a9">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>watch&lt;/code> 也能实时看到部署流量的权重，根据上面的设置，新版本权重大于 50% 就认为部署成功，流量将全部切换到新版本，并完成金丝雀部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces guoxudongdeMacBook-Pro.local: Thu Jul &lt;span style="color:#3677a9">2&lt;/span> 15:23:35 &lt;span style="color:#3677a9">2020&lt;/span>
NAMESPACE NAME STATUS WEIGHT LASTTRANSITIONTIME
&lt;span style="color:#24909d">test&lt;/span> podinfo Progressing &lt;span style="color:#3677a9">45&lt;/span> 2020-07-02T07:23:25Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开始部署时的 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65ly1ggcnsojp0kj20kj07kdgc.jpg" alt="Slack 通知">&lt;/p>
&lt;p>页面上也能看出变化，访问到新版本的概率会越来越高，以蓝色和绿色的圆代表新版本和老版本：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65ly1ggco0nxzdrj21h80q8gnu.jpg" alt="金丝雀发布">&lt;/p>
&lt;p>发布成功后，会收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1ggco2mdlphj20kq01h0sn.jpg" alt="Slack 通知">&lt;/p>
&lt;h3 id="自动回滚">自动回滚&lt;/h3>
&lt;p>当然，有自动发布就会有自动回滚，下面就通过手动触发状态码 500 异常，演示暂停发布并回滚。&lt;/p>
&lt;p>部署一个新版本：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>触发状态码 500 异常：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch curl http://app.example.com/status/500
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待一会儿，就可以看到部署失败并回滚：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces guoxudongdeMacBook-Pro.local: Thu Jul &lt;span style="color:#3677a9">2&lt;/span> 15:45:24 &lt;span style="color:#3677a9">2020&lt;/span>
NAMESPACE NAME STATUS WEIGHT LASTTRANSITIONTIME
&lt;span style="color:#24909d">test&lt;/span> podinfo Failed &lt;span style="color:#3677a9">0&lt;/span> 2020-07-02T07:45:16Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发布失败，也会收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65ly1ggcobt1f0bj20kd01vmx1.jpg" alt="失败 Slack 通知">&lt;/p>
&lt;h3 id="ab-测试">A/B 测试&lt;/h3>
&lt;p>除了加权路由，Flagger 还可以根据 HTTP 匹配条件将流量路由到新版本（当然，这个 Nginx-Ingress 的功能，Flagger 只是简化了操作）。可以根据 HTTP header 和 cookie 来定位用户并细分受众，对于需要关联会话的前端应用十分有用。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65ly1ggcoglbmnyj217q0q0q3h.jpg" alt="A/B 测试">&lt;/p>
&lt;p>修改 Canary 资源：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>flagger.app/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Canary&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># deployment reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ingress reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ingressRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># HPA reference (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">autoscalerRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>autoscaling/v2beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>HorizontalPodAutoscaler&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># the maximum time in seconds for the canary deployment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># to make progress before it is rollback (default 600s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">progressDeadlineSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">60&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ClusterIP port number&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># container port number or name&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">9898&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">analysis&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">threshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">iterations&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">match&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># curl -H &amp;#39;X-Canary: insider&amp;#39; http://app.example.com&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">headers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">x-canary&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">exact&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;insider&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># curl -b &amp;#39;canary=always&amp;#39; http://app.example.com&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">headers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cookie&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">exact&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;canary&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metrics&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>request-success-rate&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">thresholdRange&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">min&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">99&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">webhooks&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>load-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>5s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;hey -z 1m -q 10 -c 2 -H &amp;#39;Cookie: canary=always&amp;#39; http://app.example.com/&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的配置可以看到，将 headers 为 &lt;code>X-Canary: insider&lt;/code> 或 cookie 为 &lt;code>canary=always&lt;/code> 的请求路由到新版本。&lt;/p>
&lt;p>部署一个新版本：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ggcorvilrrj20kb07wdgb.jpg" alt="A/B 测试 Slack 通知">&lt;/p>
&lt;p>正常访问，还是访问到老的 &lt;code>v3.1.1&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-primary-5dc6b76bd5-8sbh8&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;11&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求添加指定 header，访问到新的 &lt;code>v3.1.3&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -H &lt;span style="color:#ed9d13">&amp;#39;X-Canary: insider&amp;#39;&lt;/span> http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;10&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求添加指定 cookie，访问到新的 &lt;code>v3.1.3&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -b &lt;span style="color:#ed9d13">&amp;#39;canary=always&amp;#39;&lt;/span> http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;10&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中访问也能得到相同的结果：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ggcoy65l47j20yb0dvq49.jpg" alt="添加 cookie 在浏览器中访问">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>最早了解 Flagger 其实是因为其与 Istio 的关系，Flagger 默认的 meshProvider 就是 Istio。但是在深入了解后，发现其对市面上常见的 Service Mesh 和 Ingress Controller 都有较好的支持，通过与 Prometheus 以及负载测试器的配合可以进行细粒度的分析，从而提高了发布质量，同时还降低了人工操作出错的可能性。&lt;/p>
&lt;p>最近 &lt;a href="https://oam.dev/">OAM 社区&lt;/a>也放出了基于 Flagger 的部署 Trait 的示例，相信之后与 OAM 结合使用可以在持续部署和应用管理领域发挥更大的作用。&lt;/p>
&lt;p>想了解 OAM 可以查看我之前的文章：&lt;a href="../start-oam">《以应用为中心：开放应用模型（OAM）初探》&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm3j2vo79g20b90b9x6r.gif" alt="">&lt;/p></description></item><item><title>Post: 修改 Nginx Ingress 日志打印格式</title><link>https://guoxudong.io/post/nginx-ingress-log-aliyun/</link><pubDate>Mon, 02 Mar 2020 15:29:16 +0800</pubDate><guid>https://guoxudong.io/post/nginx-ingress-log-aliyun/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近接到一个需求，需要展示 ingress 上面的访问日志，由于我们的业务系统都部署在 Kubernetes 上面，通过 ingress 进行访问，所以这里的访问日志，其实就是我们全部业务系统的访问日志。&lt;/p>
&lt;p>日志采集方面，阿里云天生就提供了 nginx-ingress 日志和采集和展示，本身提供很多不错的基于 ingress 日志数据的图表与分析。如果你使用的是阿里云 ACK 容器服务，那么极端推荐使用，配置方法见官方文档：https://help.aliyun.com/document_detail/86532.html。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfmo5d410j21970nzwjg.jpg" alt="image">&lt;/p>
&lt;p>让人头秃的是，我们这次不但要采集 ingress 日志上比较常规的 &lt;code>url&lt;/code> &lt;code>client_ip&lt;/code> &lt;code>method&lt;/code> &lt;code>status&lt;/code> 等字段，还要采集我们系统在 &lt;code>Request Headers&lt;/code> 里面自定义的参数，这些参数是默认的 ingress 并不展示的，所以需要我们进行调整。&lt;/p>
&lt;h2 id="开始">开始&lt;/h2>
&lt;p>首先明确需要调整的组件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx-ingress&lt;/code> 的 ConfigMap：用于打印自定义日志字段&lt;/li>
&lt;li>&lt;code>AliyunLogConfig&lt;/code>：这个是阿里云日志服务的 CRD 扩展，需要在这个里面加入新增的字段名和修改后的正则表达式&lt;/li>
&lt;li>在日志服务控制台，添加新增字段的指定字段查询&lt;/li>
&lt;li>新增展示仪表盘&lt;/li>
&lt;/ul>
&lt;h3 id="调整-ingress-日志输出">调整 ingress 日志输出&lt;/h3>
&lt;p>我们 ingress 组件使用的是 &lt;code>nginx-ingress-container&lt;/code>，这里要调整日志输出格式，老规矩，直接官方文档：https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/。&lt;/p>
&lt;p>从文档可见，只需要调整 &lt;code>ingress-nginx&lt;/code> 的 ConfigMap &lt;code>nginx-configuration&lt;/code> data 中的 &lt;code>log-format-upstream&lt;/code> 字段即可。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;p>知识点：&lt;/p>
&lt;p>官方文档里面给的说明不是很详细，没有提到 &lt;code>Request Headers&lt;/code> 里自定义的字段应该怎么表示（也有可能是我眼瘸没看见），但经过我多次试验发现，&lt;code>Request Headers&lt;/code> 里的字段在 &lt;code>log-format-upstream&lt;/code> 中应该使用 &lt;code>$http_{your field}&lt;/code> 表示，比如 &lt;code>$http_cookie&lt;/code>；而带 &lt;code>-&lt;/code> 的字段则需要将 &lt;code>-&lt;/code> 改为 &lt;code>_&lt;/code>，并且使用小写，比如 &lt;code>app-Id&lt;/code> 就应使用 &lt;code>$http_app_id&lt;/code> 表示。&lt;/p>
&lt;/div>
&lt;p>修改 ConfigMap，&lt;code>ingress-controller&lt;/code> 将进行热更新，看到如下日志，就证明配置已完成更新，接下来就可以看到你自定义字段的值已经打印出来了。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">I0302 &lt;span style="color:#3677a9">08&lt;/span>:&lt;span style="color:#3677a9">20&lt;/span>:&lt;span style="color:#3677a9">58.393365&lt;/span> &lt;span style="color:#3677a9">9&lt;/span> controller.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">200&lt;/span>] Backend successfully reloaded.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调整阿里云日志组件配置">调整阿里云日志组件配置&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
执行下面的步骤请确保已经按照&lt;a href="https://help.aliyun.com/document_detail/86532.html">官方文档&lt;/a>正确部署阿里云日志服务在您的 K8S 集群之后，并且已达到要求的版本。
&lt;/div>
&lt;p>日志已经成功打印了，接下来就是调整日志采集的字段了，这里只需要调整日志服务 CRD 的扩展配置即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit AliyunLogConfig k8s-nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在修改配置之前，推荐先去 &lt;a href="https://regex101.com/">https://regex101.com/&lt;/a> 验证正则表达式是否正确，将调整过的正则表达式和 &lt;code>ingress-controller&lt;/code> 打印的日志贴入下图指定位置，就可以看出正则表达式是否正确。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gcfo9lxuc6j21gv0juwka.jpg" alt="image">&lt;/p>
&lt;p>然后将添加的字段名称（这个名称将作为 key 在日志服务中展示，可以与 header 中的字段不同）和正则表达式贴入如下 CRD 中。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>log.alibabacloud.com/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>AliyunLogConfig&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># your config name, must be unique in you k8s cluster&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logstore name to upload log&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">logstore&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># product code, only for k8s nginx ingress&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">productCode&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logtail config detail&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">logtailConfig&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputType&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugin&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logtail config name, should be same with [metadata.name]&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configName&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputDetail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">plugin&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>service_docker_stdout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">detail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">IncludeLabel&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">io.kubernetes.container.name&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-controller&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Stderr&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Stdout&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">processors&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>processor_regex&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">detail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">KeepSource&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Keys&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- client_ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- x_forward_for&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- remote_user&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- method&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- url&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- version&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- body_bytes_sent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- http_referer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- http_user_agent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- request_length&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- request_time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- proxy_upstream_name&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_addr&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_response_length&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_response_time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- req_id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- host&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#999;font-style:italic">#需要添加的字段名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- ...&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">NoKeyError&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">NoMatchError&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Regex&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#修改后的正则表达式&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">SourceKey&lt;/span>:&lt;span style="color:#666"> &lt;/span>content&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="日志控制台新增字段">日志控制台新增字段&lt;/h3>
&lt;p>如果上面的操作无误的话，日志服务中就会展示您添加的字段了，如果配置有误，所有的自定义字段都会不显示，只会显示保留字段名称。&lt;/p>
&lt;p>添加指定字段查询，就可以快速查看添加的字段了。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gcfohy9fv4j21460gxtc6.jpg" alt="image">&lt;/p>
&lt;h3 id="新增展示仪表盘">新增展示仪表盘&lt;/h3>
&lt;p>日志既然已经取到了，那么展示就很容易了，直接在查询栏中输入分析语句，日志服务支持 SQL 聚合日志，并直接生成统计图表，点击添加到仪表盘可以就可以添加到现有仪表盘或者新建一个仪表盘。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfos33c23j219a0nuae3.jpg" alt="image">&lt;/p>
&lt;h2 id="成果">成果&lt;/h2>
&lt;p>之后进行一些微调，添加过滤栏，由于这里统计的是登录用户，你甚至都可以添加一个词云来看看哪些用于使用系统比较频繁。当然，想添加什么都看您的喜好，日志在你手里，想怎么分析都可以。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gcfowk10tjj21970ns79i.jpg" alt="image">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本次实现的功能并不是什么高深的功能，只不过是一个简单的访问日志记录和展示，相信每个系统其实都有一套这种功能。但是这种实现方式在我看来优点更多：&lt;/p>
&lt;ul>
&lt;li>无代码：全程没有写一行代码，如果有的话，也就是业务需要统一 &lt;code>Request Headers&lt;/code> 里面的字段。&lt;/li>
&lt;li>配置简单：只需要修改 nginx ConfigMap 中的一个字段，并在 CRD 中添加字段名称和正在表达式，唯一的难度可能就是正则表达式。&lt;/li>
&lt;li>配置快：整体的配置时间很短，加上查文档和调整图表也不过半天的时间，肯定比 &lt;code>提需求-评估-开发-测试-验收&lt;/code> 全流程走一遍，前端后端撕一遍要快的多的多的多。&lt;/li>
&lt;li>高度定制：可以根据自己的喜好，随意定制图表。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>最近发现阿里云日志服务是一个宝藏产品，从安全到 k8s 业务，从成本控制到疫情动态，日志服务真的就是把所有没有前端开发资源的服务都帮了一把。
&amp;mdash; 摘自本人朋友圈&lt;/p>
&lt;/blockquote></description></item></channel></rss>