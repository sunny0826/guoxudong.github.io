<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guo Xudong&#39;s Blog·郭旭东的博客 – IaC</title>
    <link>https://guoxudong.io/tags/iac/</link>
    <description>Recent content in IaC on Guo Xudong&#39;s Blog·郭旭东的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 21 Jan 2021 10:43:11 +0800</lastBuildDate>
    
	  <atom:link href="https://guoxudong.io/tags/iac/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Post: AWS CDK | IaC 何必只用 Yaml</title>
      <link>https://guoxudong.io/post/aws-cdk-introduction/</link>
      <pubDate>Thu, 21 Jan 2021 10:43:11 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aws-cdk-introduction/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;近年来基础设施即代码（IaC）的方式被越来越多的开发者和管理者所采用，各大公有云都提供了使用 IaC 管理自己云资源的方式，如 AWS 的 CloudFormation、阿里云的 ROS 等，而第三方的 Terraform 也有各大公有云的 Provider。越来越多像我一样的云资源运维和管理者开始采用 IaC 的方式对云资源进行创建、运维和管理。&lt;/p&gt;
&lt;h2 id=&#34;iac-管理之惑&#34;&gt;IaC 管理之惑&lt;/h2&gt;
&lt;p&gt;但在实际使用中，IaC 其实并没有看上去的那么美丽。&lt;/p&gt;
&lt;h3 id=&#34;imperative-iac-vs-declarative-iac&#34;&gt;Imperative IaC vs. Declarative IaC&lt;/h3&gt;
&lt;p&gt;Imperative 和 Declarative 也就是&lt;strong&gt;命令式&lt;/strong&gt;和&lt;strong&gt;声明式&lt;/strong&gt;的 IaC，他们的不同点在于命令式的 IaC 是由代码编写者来确定如何达到自己想要目的的，如：我需要一个创建 VPC，就需要编写代码或命令来完成这个创建 VPC 的动作，直接操作公有云的 OpenAPI 和 CLI 工具就是这种方式；而声明式的 IaC 则是由代码编写者定义了系统期望的状态，并不需要关心云平台如何去实现我的这个要求，这其中就以 kubernetes 的 Yaml 配置为代表。两相对比声明式的 IaC 显然更容易上手。&lt;/p&gt;
&lt;h3 id=&#34;这样就够了吗&#34;&gt;这样就够了吗？&lt;/h3&gt;
&lt;p&gt;虽然声明式的 IaC 看上去更简单且高效，但事实并非如此。和我一样主要工作是管理和运维 kubernetes 集群的同学，常常自称为 YAML 工程师，原因就是我们日常工作需要管理和维护数量庞大的 YAML 文件，小到一个微服务，大到一整套云环境，大部分情况都是采用 YAML 或 JSON 格式的配置文件进行管理，我们手中的 YAML 越来越多，而 YAML 文件的可读性并没有那么友好。&lt;strong&gt;“YAML 地狱”&lt;/strong&gt; 这个词形容的就非常贴切。&lt;/p&gt;
&lt;h3 id=&#34;如何破解-yaml-地狱&#34;&gt;如何破解 YAML 地狱？&lt;/h3&gt;
&lt;p&gt;其实这个问题早就引起了开发者的广泛讨论，为了解决这个问题很多项目都做出了尝试，如 Helm 这样采用 template 的方式，或 kustomize 这样采用 overlay 的方式对 YAML 进行抽象和简化。&lt;/p&gt;
&lt;p&gt;目前比较受欢迎的还有一种方式，就是采用常规编程语言通过代码来生成声明式的配置，然后再基于声明式的配置进行部署，这样既不会重复造轮子，同时常规编程语言的可读性、代码量以及编写的难易程度都比直接编写 Yaml 文件要简单的多。比如我之前介绍过的 &lt;code&gt;Grabana&lt;/code&gt; 就是采用这种模式，使用 Golang 来生成 Grafana Dashboard 配置并部署，详见：&lt;a href=&#34;../grabana-create-grafana-dashboard&#34;&gt;《Grabana：使用 Golang 或 Yaml 生成 Grafana Dashboard》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这种方式融合了 Imperative 和 Declarative 的优点是一个非常不错的选择。&lt;/p&gt;
&lt;h2 id=&#34;aws-cdk&#34;&gt;AWS CDK&lt;/h2&gt;
&lt;p&gt;AWS Cloud Development Kit（AWS CDK） 是 AWS 开发的一种开源软件开发框架，可以使用 Python 或 Typescript 之类的编程语言，利用函数快速构建代码框架，快速的定义云资源，并且还提供了一系列默认选项，使得代码量进一步降低。&lt;/p&gt;
&lt;h3 id=&#34;支持的语言&#34;&gt;支持的语言&lt;/h3&gt;
&lt;p&gt;AWS CDK 目前支持的语言有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AWS CDK 还提供了十分完善的脚手架工具，以 Python 为例，只需新建目录，并在目录中执行如下命令，即可拉起一套的 CDK Python 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cdk init app --language python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后只需在 &lt;code&gt;app/app_stack.py&lt;/code&gt; 中编写相应代码即可，非常方便。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;AWS CDK 将 Imperative 和 Declarative 进行了结合，通过编程语言生成 CloudFormation 的 template，之后再由 CloudFormation 生成对应的 Stack，最终在 AWS 上完成云资源的创建和变更。&lt;/p&gt;
&lt;p&gt;这种方法完美的绕过了 CloudFormation 配置本身的复杂性和较差的可读性，用户可以选择一个自己熟悉的编程语言，以代码的形式来对基础资源进行编排，同时还有很多默认选项，为不想关心太多细节的开发者提供了便利。&lt;/p&gt;
&lt;p&gt;比如只使用这样一行代码，就能创建一个全新的 VPC：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;CdkPythonStack&lt;/span&gt;(core.Stack):
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, scope: core.Construct, construct_id: &lt;span style=&#34;color:#24909d&#34;&gt;str&lt;/span&gt;, **kwargs) -&amp;gt; None:
        &lt;span style=&#34;color:#24909d&#34;&gt;super&lt;/span&gt;().__init__(scope, construct_id, **kwargs)
        ...
        vpc = ec2.Vpc(self,
                      &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;eks-vpc&amp;#39;&lt;/span&gt;,
                      cidr=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;10.3.0.0/16&amp;#39;&lt;/span&gt;,
                      max_azs=&lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;,
                      nat_gateways=&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
                      )
        ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cli-command&#34;&gt;CLI Command&lt;/h3&gt;
&lt;p&gt;AWS CDK 还提供了一些命令来帮助开发者完成代码构建、资源检查和部署等功能。&lt;/p&gt;
&lt;h4 id=&#34;init&#34;&gt;init&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cdk init&lt;/code&gt; 帮助开发者生成一个指定语言的 cdk 项目，目前支持 5 种语言。&lt;/p&gt;
&lt;h4 id=&#34;diff&#34;&gt;diff&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cdk diff&lt;/code&gt; 是最常用的一个命令了，会帮助用户检查当前 Stack 和 云上资源的不同，并作出标记：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cdk diff
Stack HelloCdkStack
IAM Statement Changes
┌───┬────────────────────────┬────────┬──────────────┬───────────┬───────────┐
│   │ Resource               │ Effect │ Action       │ Principal │ Condition │
├───┼────────────────────────┼────────┼──────────────┼───────────┼───────────┤
│ + │ &lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;MyFirstBucket&lt;/span&gt;.Arn&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;/* │ Allow  │ s3:GetObject │ *         │           │
└───┴────────────────────────┴────────┴──────────────┴───────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Resources
[+] AWS::S3::BucketPolicy MyFirstBucket/Policy MyFirstBucketPolicy3243DEFD
[~] AWS::S3::Bucket MyFirstBucket MyFirstBucketB8884501
 ├─ [~] DeletionPolicy
 │   ├─ [-] Retain
 │   └─ [+] Delete
 └─ [~] UpdateReplacePolicy
     ├─ [-] Retain
     └─ [+] Delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ls&#34;&gt;ls&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;cdk ls&lt;/code&gt; 可以列出当前 app 所有的 stack。&lt;/p&gt;
&lt;h4 id=&#34;synth&#34;&gt;synth&lt;/h4&gt;
&lt;p&gt;前面说到了 CDK 会生成 CloudFormation template， &lt;code&gt;cdk synth&lt;/code&gt; 就是会生成这样一个 template 方便用户检查。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cdk synth
Resources:
  MyFirstBucketB8884501:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: HelloCdkStack/MyFirstBucket/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.XX.X,@aws-cdk/aws-events=1.XX.X,@aws-cdk/aws-iam=1.XX.X,@aws-cdk/aws-kms=1.XX.X,@aws-cdk/aws-s3=1.XX.X,@aws-cdk/cdk-assets-schema=1.XX.X,@aws-cdk/cloud-assembly-schema=1.XX.X,@aws-cdk/core=1.XX.X,@aws-cdk/cx-api=1.XX.X,@aws-cdk/region-info=1.XX.X,jsii-runtime=node.js/vXX.XX.X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;deploy&#34;&gt;deploy&lt;/h4&gt;
&lt;p&gt;在检查无误后，就可以进行部署了，使用 &lt;code&gt;cdk deploy&lt;/code&gt; 命令，就会开始部署 CloudFormation，可以看到实时进度，如果遇到问题，也会进行回滚。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cdk deploy
HelloCdkStack: deploying...
HelloCdkStack: creating CloudFormation changeset...
 1/1 | 8:39:43 AM | UPDATE_COMPLETE      | AWS::S3::Bucket    | MyFirstBucket (MyFirstBucketB8884501)
 1/1 | 8:39:44 AM | UPDATE_COMPLETE_CLEA | AWS::CloudFormation::Stack | HelloCdkStack
 2/1 | 8:39:45 AM | UPDATE_COMPLETE      | AWS::CloudFormation::Stack | HelloCdkStack

 ✅  HelloCdkStack

Stack ARN:
arn:aws:cloudformation:REGION:ACCOUNT:stack/HelloCdkStack/ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;destroy&#34;&gt;destroy&lt;/h4&gt;
&lt;p&gt;在体验完后，可以使用 &lt;code&gt;cdk destroy&lt;/code&gt; 对 CloudFormation 以及 CloudFormation 创建的资源进行清理和回收。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;如果你是 AWS 用户，推荐可以尝试使用 AWS CDK，无论是使用体验还是开发速度都十分突出，只需不到 100 行的代码，就可以生成 上千行 CloudFormation 配置，随着基础设施越来越复杂，使用 AWS CDK 获得的红利也会越多。后续我也会出一篇使用 AWS CDK Python 从 0 开始创建 EKS 集群的文章，感兴趣的同学可以关注一下。&lt;/p&gt;
&lt;p&gt;如果你不是 AWS 用户，但是也想采用这种方式创建和维护你的基础资源，也可以关注一下 &lt;a href=&#34;https://github.com/pulumi/pulumi&#34;&gt;pulumi&lt;/a&gt; 项目，这是一个开源项目，其支持包括 AWS、Azure、Google Cloud 和阿里云。后续我同样会出一篇相关内容的文章，敬请期待。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
