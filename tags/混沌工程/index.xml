<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 混沌工程</title><link>https://guoxudong.io/tags/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 混沌工程 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 06 Aug 2020 16:34:23 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: ChaosBlade：从零开始的混沌工程（五）</title><link>https://guoxudong.io/post/start-chaosblade-4/</link><pubDate>Thu, 06 Aug 2020 16:34:23 +0800</pubDate><guid>https://guoxudong.io/post/start-chaosblade-4/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在上篇文章中，我们介绍了如何使用 &lt;strong>ChaosBlade Operator&lt;/strong> 对 node 资源进行混沌实验。从本章将继续对 Kubernetes Container 资源的混沌实验进行讲解，同时也配套了 &lt;a href="https://katacoda.com/">katacode&lt;/a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade，同时本篇也是系列文章的倒数第二篇，实践内容的最后一篇。&lt;/p>
&lt;p>&lt;a href="https://chaosblade.io/">chaosblade.io&lt;/a> 官网已经正式上线，在官网的&lt;a href="https://chaosblade.io/try/">互动教程&lt;/a>模块，也可以找到 ChaosBlade 的 KataCoda 教程，目前官网由我维护，有任何问题，欢迎在 &lt;a href="https://github.com/chaosblade-io/chaosblade-website/issues">ISSUE&lt;/a> 中进行反馈。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;blockquote>
&lt;p>KataCoda 教程：《ChaosBlade Container 实验场景》&lt;/p>
&lt;p>地址：&lt;a href="https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-container-experiment">https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-container-experimentt&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h2 id="实验对象container">实验对象：Container&lt;/h2>
&lt;p>Pod 由一个或多个容器（Container）组成。容器（Container）是一种用来打包已经编译好的代码以及运行时需要的各个依赖项的技术。您运行的每个容器都是可以重复运行的；包含依赖项的标准化意味着您在任何地点运行它都会得到相同的结果。&lt;/p>
&lt;h2 id="container-实验场景">Container 实验场景&lt;/h2>
&lt;p>同&lt;a href="../start-chaosblade-2">之前的文章&lt;/a>，本篇默认已安装 &lt;a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6">guestbook&lt;/a> 应用和 ChaosBlade Operator。&lt;/p>
&lt;h3 id="container-资源自身的场景">container 资源自身的场景&lt;/h3>
&lt;h4 id="删除-container">删除 container&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：删除 chaosblade 命名空间下，Pod 名为 &lt;code>guestbook-7b87b7459f-cqkq2&lt;/code> 中 container id 是 &lt;code>c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed&lt;/code> 的容器。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>remove_container_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>remove-container-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>remove&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;remove container by id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># pod name&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;guestbook-7b87b7459f-cqkq2&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 container 名称：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod guestbook-7b87b7459f-cqkq2 -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>remove_container_by_id.yaml&lt;/code> 中的 &lt;code>container-ids&lt;/code> 和 &lt;code>names&lt;/code>。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f remove_container_by_id.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade remove-container-by-id -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;p>查看容易 ID，可以看到容器ID发生了变化，旧容器被删除了，拉起了新容器。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1ghh7lolrl9g20xq0g67wh.gif" alt="删除 container">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f remove_container_by_id.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade remove-container-by-id&lt;/code>&lt;/p>
&lt;h3 id="container-内cpu负载场景">container 内CPU负载场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：指定 chaosblade 命名空间下 Pod 名为 &lt;code>guestbook-7b87b7459f-cqkq2&lt;/code>，container id 为 2ff814b246f86，使其 CPU 负载为 100%。&lt;/p>
&lt;p>&lt;strong>实验准备&lt;/strong>&lt;/p>
&lt;p>由于使用 helm 安装的 &lt;a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6">guestbook&lt;/a> 没有对资源进行限制，进行负载实验的话，会导致整个节点的故障，所以在实验之前需要&lt;strong>对资源进行限制&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl patch deployment redis-slave --patch &lt;span style="color:#ed9d13">&amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;template&amp;#34;: {&amp;#34;spec&amp;#34;: {&amp;#34;containers&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;redis-slave&amp;#34;,&amp;#34;resources&amp;#34;: {&amp;#34;limits&amp;#34;:{&amp;#34;cpu&amp;#34;:&amp;#34;300m&amp;#34;,&amp;#34;memory&amp;#34;:&amp;#34;512Mi&amp;#34;} }}]}}}}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>increase_container_cpu_load_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>increase-container-cpu-load-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>cpu&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>fullload&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;increase container cpu load by id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cpu-percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;100&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># pod names&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-slave-55d8c8ffbd-jd8sm&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 container 名称：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod redis-slave-55d8c8ffbd-jd8sm -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>increase_container_cpu_load_by_id.yaml&lt;/code> 中的 &lt;code>container-ids&lt;/code> 和 &lt;code>names&lt;/code>。&lt;/p>
&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl get blade increase-container-cpu-load-by-id -o json&lt;/code>，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;p>可从监控系统观测到结果&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghh7p4zsblj20ct07eaac.jpg" alt="container 内CPU负载场景">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f increase_container_cpu_load_by_id.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade increase-container-cpu-load-by-id&lt;/code>&lt;/p>
&lt;h3 id="container-内网络实验场景">container 内网络实验场景&lt;/h3>
&lt;p>该场景与 Pod 实验场景类似。&lt;/p>
&lt;h4 id="container-网络延迟场景">container 网络延迟场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：对 chaosblade 命名空间中，对 &lt;code>redis-master-68857cd57c-hknb6&lt;/code> Pod 中 container id 是 &lt;code>02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&lt;/code> 的容器的 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p>
&lt;p>&lt;strong>实验参数&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>destination-ip&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exclude-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 &amp;ndash;local-port 或者 &amp;ndash;remote-port 参数一起使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exclude-ip&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>interface&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>网卡设备，例如 eth0 (必要参数)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>local-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>offset&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>延迟时间上下浮动的值, 单位是毫秒。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remote-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>time&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>延迟时间，单位是毫秒 (必要参数)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>force&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignore-peer-port&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>针对添加 &amp;ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timeout&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设定运行时长，单位是秒，通用参数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>delay_container_network_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay-container-network-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delay container network by container id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>local-port&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;6379&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;3000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>offset&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 Pod 名称和 container id：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod redis-master-68857cd57c-hknb6 -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>delay_container_network_by_id.yaml&lt;/code> 中的 &lt;code>container-ids&lt;/code> 和 &lt;code>names&lt;/code>。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f delay_container_network_by_id.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade delay-container-network-by-id -o json&lt;/code> 命令，查看实验状态.&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取实验 pod ip&lt;/span>
$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..status.podIP}
10.42.0.19
&lt;span style="color:#999;font-style:italic"># 进入观测 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-55d8c8ffbd-jd8sm bash
&lt;span style="color:#999;font-style:italic"># 在 pod 中安装 telnet&lt;/span>
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style="color:#999;font-style:italic"># 测试时间&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span> | telnet 10.42.0.19 &lt;span style="color:#3677a9">6379&lt;/span>
Trying 10.42.0.19...
Connected to 10.42.0.19.
Escape character is &lt;span style="color:#ed9d13">&amp;#39;^]&amp;#39;&lt;/span>.
Connection closed by foreign host.
real 0m3.790s
user 0m0.007s
sys 0m0.001s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7s2brmxg20si05w16r.gif" alt="container 网络延迟场景">&lt;/p>
&lt;p>可以看到结果符合预期。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f delay_container_network_by_id.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade delay-container-network-by-id&lt;/code>&lt;/p>
&lt;h4 id="container-网络丢包场景">container 网络丢包场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：对 chaosblade 命名空间中，对 &lt;code>redis-master-68857cd57c-hknb6&lt;/code> Pod 中 container id 是 &lt;code>02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&lt;/code> 的容器注入丢包率 100% 的故障，只针对 IP 为 &lt;code>10.42.0.26&lt;/code> 的 pod 生效，也就是除 &lt;code>10.42.0.26&lt;/code> 以外的 pod 都能正常访问 &lt;code>redis-master-68857cd57c-hknb6&lt;/code>。&lt;/p>
&lt;p>&lt;strong>实验参数&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>destination-ip&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exclude-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 &amp;ndash;local-port 或者 &amp;ndash;remote-port 参数一起使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>exclude-ip&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>interface&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>网卡设备，例如 eth0 (必要参数)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>local-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>percent&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>丢包百分比，取值在[0, 100]的正整数 (必要参数)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remote-port&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>force&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignore-peer-port&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>针对添加 &amp;ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timeout&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设定运行时长，单位是秒，通用参数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>loss_container_network_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss-container-network-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;loss container network by container id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;100&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>timeout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;60&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>destination-ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;10.42.0.26&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 名称和 container id 内容同上。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f loss_container_network_by_id.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade loss-container-network-by-id -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取实验 pod ip&lt;/span>
$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..status.podIP}
10.42.0.19
&lt;span style="color:#999;font-style:italic"># 进入观测 pod，IP为：10.42.0.26（被设置丢包率 100%）&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-55d8c8ffbd-jd8sm bash
&lt;span style="color:#999;font-style:italic"># Ping 实验Pod ip&lt;/span>
$ ping 10.42.0.19
PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data.
&lt;span style="color:#999;font-style:italic"># 无响应&lt;/span>
&lt;span style="color:#999;font-style:italic"># 进入观测 pod，该 pod 未被指定丢包&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-55d8c8ffbd-22tsc bash
&lt;span style="color:#999;font-style:italic"># Ping 实验Pod ip&lt;/span>
$ ping 10.42.0.19
PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data.
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.0.19: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">64&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.065 ms
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.0.19: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">2&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">64&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.051 ms
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.0.19: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">3&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">64&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.078 ms
...
&lt;span style="color:#999;font-style:italic"># 响应正常&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh7th88pmg20si06au0x.gif" alt="container 网络丢包场景">&lt;/p>
&lt;p>这里在配置中还将 &lt;code>timeout&lt;/code> 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 &lt;code>exclude-port&lt;/code>，该配置用来指定排除掉的丢包端口。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f loss_container_network_by_id.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade loss-container-network-by-id&lt;/code>&lt;/p>
&lt;h4 id="container-域名访问异常场景">container 域名访问异常场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：本实验通过修改本地的 hosts，篡改域名地址映射，模拟 container 内域名访问异常场景。&lt;/p>
&lt;p>&lt;strong>实验参数&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>domain&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>域名 (必要参数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ip&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>映射的 ip (必要参数)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timeout&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设定运行时长，单位是秒，通用参数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>tamper_container_dns_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>tamper-container-dns-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>dns&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;tamper container dns by id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>domain&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;www.baidu.com&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;10.0.0.1&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># pod names&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># or use pod labels&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 pod 名称和 container id 内容同上。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f tamper_container_dns_by_id.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade tamper-container-dns-by-id -o json&lt;/code> 命令，查看实验状态.&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-master-68857cd57c-hknb6 bash
&lt;span style="color:#999;font-style:italic"># Ping www.baidu.com&lt;/span>
$ ping www.baidu.com
&lt;span style="color:#999;font-style:italic"># 无响应&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1ghh7wcg01ng20si06ah3v.gif" alt="container 域名访问异常场景">&lt;/p>
&lt;p>可以看到 Pod 的 &lt;code>/etc/hosts&lt;/code> 文件被修改，模拟了 dns 解析异常的场景。&lt;/p>
&lt;h3 id="container-内进程场景">container 内进程场景&lt;/h3>
&lt;h4 id="杀-container-内指定进程">杀 container 内指定进程&lt;/h4>
&lt;p>此实验会删除指定容器中的 &lt;code>redis-server&lt;/code> 进程。&lt;/p>
&lt;p>&lt;strong>参数&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>process&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>进程关键词，会在整个命令行中查找&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>process-cmd&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>进程命令，只会在命令中查找&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>count&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>限制杀掉进程的数量，0 表示无限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>signal&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>指定杀进程的信号量，默认是 9，例如 &amp;ndash;signal 15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timeout&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设定运行时长，单位是秒，通用参数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>kill_container_process_by_id.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kill-container-process-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>kill&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;kill container process by id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-slave-55d8c8ffbd-4pz8m&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择一个 pod，获取容器 ID ，修改 &lt;code>kill_container_process_by_id.yaml&lt;/code> 中的 &lt;code>container-ids&lt;/code> 值。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f kill_container_process_by_id.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade kill-container-process-by-id -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 开始实验前查看容器 id&lt;/span>
$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
POD_NAME CONTAINER ID
redis-slave-55d8c8ffbd-4pz8m redis-master docker://bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb
&lt;span style="color:#999;font-style:italic"># 实验后查看容器 id&lt;/span>
$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
POD_NAME CONTAINER ID
redis-slave-55d8c8ffbd-4pz8m redis-slave docker://94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7y7r2nmg20r0068wxo.gif" alt="杀 container 内指定进程">&lt;/p>
&lt;p>容器 id 变化，主进程被杀掉后容器进行了重启，符合实验逾期。&lt;/p>
&lt;p>&lt;code>redis-server&lt;/code> 的进程号发生改变，说明被杀掉后，又被重新拉起。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f kill_container_process_by_id.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade kill-container-process-by-id&lt;/code>&lt;/p>
&lt;h4 id="挂起-container-内指定进程">挂起 container 内指定进程&lt;/h4>
&lt;p>此实验会挂起指定容器中的 &lt;code>redis-server&lt;/code> 进程。&lt;/p>
&lt;p>&lt;strong>参数&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>process&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>进程关键词，会在整个命令行中查找&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>process-cmd&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>进程命令，只会在命令中查找&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>timeout&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>设定运行时长，单位是秒，通用参数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>stop_container_process_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>stop-container-process-by-id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>stop&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;kill container process by id&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>container-ids&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-slave-55d8c8ffbd-4pz8m&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择一个节点，修改 &lt;code>stop_container_process_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f stop_container_process_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade stop-container-process-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-55d8c8ffbd-4pz8m bash
&lt;span style="color:#999;font-style:italic"># 查看 redis-server 进程号&lt;/span>
$ ps aux| grep redis-server
root &lt;span style="color:#3677a9">5632&lt;/span> 0.0 0.0 &lt;span style="color:#3677a9">41520&lt;/span> &lt;span style="color:#3677a9">4168&lt;/span> ? Tl 06:28 0:06 redis-server *:6379
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 &lt;code>redis-server&lt;/code> 此刻进程处于暂停状态了（T）。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh8090cr1g20t406y1kx.gif" alt="挂起 container 内指定进程">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f stop_container_process_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade stop-container-process-by-names&lt;/code>&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>仔细看过前面几篇文章的同学获取会发现，不同场景的混沌实验中的参数与操作方式有些类似。其实对于这些在不同场景，比如 Pod、Node 和 Container 中进行混沌实验的实现是一致的，都是基于 &lt;code>blade&lt;/code> 这个 CLI 工具，只对对其在不同场景进行了不同的封装，这就涉及到了混沌工程实验规范，下篇文章我们就来谈谈&lt;strong>混沌工程模型&lt;/strong>和&lt;strong>混沌工程实验规范&lt;/strong>，看看混沌工程的实现应该遵循怎么样的模型和规范。&lt;/p></description></item><item><title>Post: ChaosBlade：从零开始的混沌工程（四）</title><link>https://guoxudong.io/post/start-chaosblade-3/</link><pubDate>Wed, 22 Jul 2020 17:30:53 +0800</pubDate><guid>https://guoxudong.io/post/start-chaosblade-3/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在上篇文章中，我们介绍了如何使用 &lt;strong>ChaosBlade Operator&lt;/strong> 对 pod 资源进行混沌实验。从本章将继续对 Kubernetes Node 资源的混沌实验进行讲解，同时也配套了 &lt;a href="https://katacoda.com/">katacode&lt;/a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。&lt;/p>
&lt;p>&lt;a href="https://chaosblade.io/">chaosblade.io&lt;/a> 官网已经正式上线，在官网的&lt;a href="https://chaosblade.io/try/">互动教程&lt;/a>模块，也可以找到 ChaosBlade 的 KataCoda 教程，目前官网由我维护，有任何问题，欢迎在 &lt;a href="https://github.com/chaosblade-io/chaosblade-website/issues">ISSUE&lt;/a> 中进行反馈。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;blockquote>
&lt;p>KataCoda 教程：《ChaosBlade Node 实验场景》&lt;/p>
&lt;p>地址：&lt;a href="https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-node-experiment">https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-node-experiment&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h2 id="实验对象node">实验对象：Node&lt;/h2>
&lt;p>在 Kubernetes 中，节点（Node）是执行工作的机器，以前叫做 minion。根据你的集群环境，节点可以是一个虚拟机或者物理机器。每个节点都包含用于运行 pods 的必要服务，并由主控组件管理。节点上的服务包括 容器运行时、kubelet 和 kube-proxy。&lt;/p>
&lt;h2 id="node-实验场景">Node 实验场景&lt;/h2>
&lt;p>同&lt;a href="../start-chaosblade-2">上篇文章&lt;/a>，本篇默认已安装 &lt;a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6">guestbook&lt;/a> 应用和 ChaosBlade Operator。&lt;/p>
&lt;h3 id="节点资源相关场景">节点资源相关场景&lt;/h3>
&lt;h4 id="节点-cpu-负载实验场景">节点 CPU 负载实验场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：指定一个节点，做 CPU 负载 80% 实验。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>node_cpu_load.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cpu-load&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>cpu&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>fullload&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;increase node cpu load by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cpu-percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;80&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择一个节点，修改 &lt;code>node_cpu_load.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f node_cpu_load.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade cpu-load -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;p>进入该 Node 节点，可以看到该节点 CPU 达到预期效果：&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzw9xq77mg20qg06i4qp.gif" alt="节点 CPU 负载实验">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f node_cpu_load.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade cpu-load&lt;/code>&lt;/p>
&lt;h3 id="节点网络相关场景">节点网络相关场景&lt;/h3>
&lt;blockquote>
&lt;p>实验前，请先登录 node 节点，使用 &lt;code>ifconfig&lt;/code> 命令查看网卡信息，不是所有系统默认的网卡名称都是 &lt;code>eth0&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h4 id="节点网络延迟场景">节点网络延迟场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：指定节点的本地 32436 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>delay_node_network_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>对 docker20 节点本地端口 32436 访问丢包率 100%。&lt;/p>
&lt;p>&lt;code>delay_node_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay-node-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delay node network loss&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;ens33&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>local-port&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;32436&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;3000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>offset&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f delay_node_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade delay-node-network-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 从实验节点访问 Guestbook&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span> | telnet 192.168.1.129 &lt;span style="color:#3677a9">32436&lt;/span>
Trying 192.168.1.129...
Connected to 192.168.1.129.
Escape character is &lt;span style="color:#ed9d13">&amp;#39;^]&amp;#39;&lt;/span>.
Connection closed by foreign host.
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span> 0.00s user 0.00s system 35% cpu 0.003 total
telnet 192.168.1.129 &lt;span style="color:#3677a9">32436&lt;/span> 0.01s user 0.00s system 0% cpu 3.248 total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwhc0n0yg20qg070dou.gif" alt="节点网络延迟场景">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f delay_node_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade delay-node-network-by-names&lt;/code>&lt;/p>
&lt;h4 id="节点网络丢包场景">节点网络丢包场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：指定节点的 &lt;code>32436&lt;/code> 端口注入丢包率 100% 的故障。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>loss_node_network_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>&lt;code>loss_node_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss-node-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;node network loss&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;100&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;ens33&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>local-port&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;32436&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f loss_node_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade loss-node-network-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;p>该端口为 &lt;code>Guestbook&lt;/code> nodeport 的端口，访问实验端口无响应，但是访问未开启实验的端口可以正常使用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取节点 IP&lt;/span>
$ kubectl get node -o wide
NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME
docker20 Ready worker 3d16h v1.17.6 192.168.1.129 &amp;lt;none&amp;gt; Ubuntu 18.04.4 LTS 4.15.0-101-generic docker://19.3.11
kk Ready controlplane,etcd,worker 4d16h v1.17.6 192.168.4.210 &amp;lt;none&amp;gt; Ubuntu 18.04.4 LTS 4.15.0-101-generic docker://19.3.11
&lt;span style="color:#999;font-style:italic"># 从实验节点访问 Guestbook - 无法访问&lt;/span>
$ telnet 192.168.1.129 &lt;span style="color:#3677a9">32436&lt;/span>
Trying 192.168.1.129...
telnet: connect to address 192.168.1.129: Operation timed out
telnet: Unable to connect to remote host
&lt;span style="color:#999;font-style:italic"># 从非实验节点访问 Guestbook - 正常访问&lt;/span>
$ telnet 192.168.4.210 &lt;span style="color:#3677a9">32436&lt;/span>
Trying 192.168.4.210...
Connected to 192.168.4.210.
Escape character is &lt;span style="color:#ed9d13">&amp;#39;^]&amp;#39;&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1ggzwjjyj67g20qg07c4az.gif" alt="节点网络丢包场景">&lt;/p>
&lt;p>同样也可以直接从浏览器访问地址，验证实验。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f loss_node_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade loss-node-network-by-names&lt;/code>&lt;/p>
&lt;h4 id="节点域名访问异常场景">节点域名访问异常场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：本实验通过修改 Node 的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>dns_node_network_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>&lt;code>dns_node_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>dns-node-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>dns&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;dns node network by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>domain&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;www.baidu.com&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;10.0.0.1&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f dns_node_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade dns-node-network-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 node&lt;/span>
$ ssh kk@192.168.1.129
&lt;span style="color:#999;font-style:italic"># Ping www.baidu.com&lt;/span>
$ ping www.baidu.com
&lt;span style="color:#999;font-style:italic"># 无响应&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwluapg5g20qg07011a.gif" alt="节点域名访问异常场景">&lt;/p>
&lt;p>可以看到 Node 的 &lt;code>/etc/hosts&lt;/code> 文件被修改，模拟了 dns 解析异常的场景。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f dns_node_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade dns-node-network-by-names&lt;/code>&lt;/p>
&lt;h3 id="节点磁盘相关场景">节点磁盘相关场景&lt;/h3>
&lt;p>kubernetes 节点磁盘场景。&lt;/p>
&lt;h4 id="节点磁盘填充场景">节点磁盘填充场景&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：指定节点磁盘占用 80%&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>fill_node_disk_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>&lt;code>fill_node_disk_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>fill-node-disk-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>disk&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>fill&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;node disk fill&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;80&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f fill_node_disk_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade fill-node-disk-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;p>可以看到磁盘占用 80%。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 node&lt;/span>
$ ssh kk@192.168.1.129
&lt;span style="color:#999;font-style:italic"># 查看磁盘使用率&lt;/span>
$ df -h
Filesystem Size Used Avail Use% Mounted on
udev 7.9G &lt;span style="color:#3677a9">0&lt;/span> 7.9G 0% /dev
tmpfs 1.6G 2.2M 1.6G 1% /run
/dev/sda2 98G 73G 20G 79% /
tmpfs 7.9G &lt;span style="color:#3677a9">0&lt;/span> 7.9G 0% /dev/shm
tmpfs 5.0M &lt;span style="color:#3677a9">0&lt;/span> 5.0M 0% /run/lock
tmpfs 7.9G &lt;span style="color:#3677a9">0&lt;/span> 7.9G 0% /sys/fs/cgroup
/dev/loop1 90M 90M &lt;span style="color:#3677a9">0&lt;/span> 100% /snap/core/8268
tmpfs 1.6G &lt;span style="color:#3677a9">0&lt;/span> 1.6G 0% /run/user/1000
/dev/loop0 98M 98M &lt;span style="color:#3677a9">0&lt;/span> 100% /snap/core/9289
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwq8gdtrg20t406k7fr.gif" alt="节点磁盘填充场景">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f fill_node_disk_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade fill-node-disk-by-names&lt;/code>&lt;/p>
&lt;h3 id="节点进程相关场景">节点进程相关场景&lt;/h3>
&lt;p>kubernetes 节点进程相关场景。&lt;/p>
&lt;h4 id="杀节点上指定进程">杀节点上指定进程&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：此实验会删除指定节点上的 &lt;code>redis-server&lt;/code> 进程。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>kill_node_process_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>&lt;code>kill_node_process_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kill-node-process-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>kill&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;kill node process by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f kill_node_process_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade kill-node-process-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 node&lt;/span>
$ ssh kk@192.168.1.129
&lt;span style="color:#999;font-style:italic"># 查看 redis-server 进程号&lt;/span>
$ ps -ef | grep redis-server
root &lt;span style="color:#3677a9">31327&lt;/span> &lt;span style="color:#3677a9">31326&lt;/span> &lt;span style="color:#3677a9">0&lt;/span> 06:15 ? 00:00:00 redis-server *:6379
&lt;span style="color:#999;font-style:italic"># 可以看到进程号发生了变化&lt;/span>
$ ps -ef | grep redis-server
root &lt;span style="color:#3677a9">2873&lt;/span> &lt;span style="color:#3677a9">2872&lt;/span> &lt;span style="color:#3677a9">0&lt;/span> 06:23 ? 00:00:00 redis-server *:6379
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>redis-server&lt;/code> 的进程号发生改变，说明被杀掉后，又被重新拉起。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65ly1ggzwsx3sbig20t407a4d6.gif" alt="杀节点上指定进程">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f kill_node_process_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade kill-node-process-by-names&lt;/code>&lt;/p>
&lt;h4 id="挂起节点上指定进程">挂起节点上指定进程&lt;/h4>
&lt;p>&lt;strong>实验目标&lt;/strong>：此实验会挂起指定节点上的 &lt;code>redis-server&lt;/code> 进程。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>选择一个节点，修改 &lt;code>stop_node_process_by_names.yaml&lt;/code> 中的 &lt;code>names&lt;/code> 值。&lt;/p>
&lt;p>&lt;code>stop_node_process_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>stop-node-process-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>stop&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;kill node process by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;docker20&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>process&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f stop_node_process_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade stop-node-process-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 node&lt;/span>
$ ssh kk@192.168.1.129
&lt;span style="color:#999;font-style:italic"># 查看 redis-server 进程号&lt;/span>
$ ps aux| grep redis-server
root &lt;span style="color:#3677a9">5632&lt;/span> 0.0 0.0 &lt;span style="color:#3677a9">41520&lt;/span> &lt;span style="color:#3677a9">4168&lt;/span> ? Tl 06:28 0:06 redis-server *:6379
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 &lt;code>redis-server&lt;/code> 此刻进程处于暂停状态了（T）。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwuoz52eg20t407w7m0.gif" alt="挂起节点上指定进程">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f stop_node_process_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade stop-node-process-by-names&lt;/code>&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本篇我们使用 ChaosBlade Operator 对 Kubernetes Node 资源进行混沌工程实验，可以看到对于 Node 节点，ChaosBlade 依旧有简单的配置及操作来完成复杂的实验，可以通过自由组合，实现各种 Node 节点级别的复杂故障，验证 Kubernetes 集群的稳定性及可用性。同时当真正的故障来临时，由于早已模拟了各种故障情况，可以快速定位故障源，做到处变不惊，轻松处理故障。&lt;/p></description></item><item><title>Post: ChaosBlade：从零开始的混沌工程（三）</title><link>https://guoxudong.io/post/start-chaosblade-2/</link><pubDate>Mon, 15 Jun 2020 15:45:36 +0800</pubDate><guid>https://guoxudong.io/post/start-chaosblade-2/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在上篇文章中，我们介绍了如何安装 &lt;strong>ChaosBlade Operator&lt;/strong>，并进行了简单的使用。从本章开始，所有的实践章节，都会有配套的 &lt;a href="https://katacoda.com/">katacode&lt;/a> 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;blockquote>
&lt;p>KataCoda 教程：《ChaosBlade Pod 实验场景》&lt;/p>
&lt;p>地址：&lt;a href="https://katacoda.com/guoxudong/courses/chaosblade/pod-experiment">https://katacoda.com/guoxudong/courses/chaosblade/pod-experiment&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h2 id="实验对象pod">实验对象：Pod&lt;/h2>
&lt;p>Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 集群 上运行的进程。&lt;/p>
&lt;p>Pod 封装了应用程序容器（或者在某些情况下封装多个容器）、存储资源、唯一网络 IP 以及控制容器应该如何运行的选项。 Pod 表示部署单元：Kubernetes 中应用程序的单个实例，它可能由单个 容器 或少量紧密耦合并共享资源的容器组成。&lt;/p>
&lt;h2 id="pod-实验场景">Pod 实验场景&lt;/h2>
&lt;p>Pod 作为 Kubernetes 最基本的执行单元，对于 Kubernetes 集群来说十分重要。那么对于混沌工程，从 Pod 入手实践就再合适不过了。&lt;/p>
&lt;blockquote>
&lt;p>本篇默认已安装 &lt;a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6">guestbook&lt;/a> 应用和 ChaosBlade Operator。&lt;/p>
&lt;/blockquote>
&lt;h3 id="删除-pod-场景">删除 Pod 场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：删除 &lt;code>chaosblade&lt;/code> 命名空间下标签是 &lt;code>role=master&lt;/code> 的 pod。&lt;/p>
&lt;p>&lt;strong>执行观测&lt;/strong>&lt;/p>
&lt;p>开始观察需要删除的 pod：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod -l &lt;span style="color:#ed9d13">&amp;#34;role=master&amp;#34;&lt;/span> -n chaosblade -w
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>delete_pod_by_labels.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delete-two-pod-by-labels&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>delete&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delete pod by labels&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>labels&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;role=master&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>evict-count&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新建终端，并开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f delete_pod_by_labels.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl get blade delete-two-pod-by-labels -o json&lt;/code>，查看实验状态。&lt;/p>
&lt;p>&lt;strong>查看实验结果&lt;/strong>&lt;/p>
&lt;p>通过上面的观测命令，可以看到 pod 被删除并重启，结果符合预期。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1gft22n0pnpg20pg06qhdt.gif" alt="">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f delete_pod_by_labels.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade delete-two-pod-by-labels&lt;/code>&lt;/p>
&lt;h3 id="pod-网络延迟场景">Pod 网络延迟场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：在 chaosblade 命名空间中，对 &lt;code>redis-master-68857cd57c-dzbs9&lt;/code> Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>delay_pod_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay-pod-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delay pod network by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>local-port&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;6379&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;3000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>offset&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 Pod 名称：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..metadata.name}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>delay_pod_network_by_names.yaml&lt;/code> 中的 &lt;code>name&lt;/code> 字段的值。&lt;/p>
&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f delay_pod_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade delay-pod-network-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取实验 pod ip&lt;/span>
$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..status.podIP}
10.42.69.44
&lt;span style="color:#999;font-style:italic"># 进入观测 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style="color:#999;font-style:italic"># 在 pod 中安装 telnet&lt;/span>
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style="color:#999;font-style:italic"># 测试时间&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span> | telnet 10.42.69.44 &lt;span style="color:#3677a9">6379&lt;/span>
Trying 10.42.69.44...
Connected to 10.42.69.44.
Escape character is &lt;span style="color:#ed9d13">&amp;#39;^]&amp;#39;&lt;/span>.
Connection closed by foreign host.
real 0m3.790s
user 0m0.007s
sys 0m0.001s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到访问实验 pod 6379 端口的延迟为 3s 左右，结果符合预期。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1gft27x90skg20p606c1kx.gif" alt="delay-pod-network">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f delay_pod_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade delay-pod-network-by-names&lt;/code>&lt;/p>
&lt;h3 id="pod-网络丢包场景">Pod 网络丢包场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：在 chaosblade 命名空间中，对 &lt;code>redis-master-68857cd57c-dzbs9&lt;/code> Pod 注入丢包率 100% 的故障，只针对 IP 为 10.42.69.42 的 pod 生效，也就是除 10.42.69.42 以外的 pod 都能正常访问 &lt;code>redis-master-68857cd57c-dzbs9&lt;/code>。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>获取 pod 名称内容同上。&lt;/p>
&lt;p>&lt;code>loss_pod_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss-pod-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>loss&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;loss pod network by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;100&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>timeout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;60&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>destination-ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;10.42.69.42&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f loss_pod_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade loss-pod-network-by-names -o json&lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取实验 pod ip&lt;/span>
$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..status.podIP}
10.42.69.44
&lt;span style="color:#999;font-style:italic"># 进入观测 pod，IP为：10.42.69.42（被设置丢包率 100%）&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-6dd975d4c8-lm8jz bash
&lt;span style="color:#999;font-style:italic"># Ping 实验Pod ip&lt;/span>
$ ping 10.42.69.44
PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data.
&lt;span style="color:#999;font-style:italic"># 无响应&lt;/span>
&lt;span style="color:#999;font-style:italic"># 进入观测 pod，该 pod 未被指定丢包&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style="color:#999;font-style:italic"># Ping 实验Pod ip&lt;/span>
$ ping 10.42.69.44
PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data.
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.69.44: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">63&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.128 ms
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.69.44: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">2&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">63&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.128 ms
&lt;span style="color:#3677a9">64&lt;/span> bytes from 10.42.69.44: &lt;span style="color:#40ffff">icmp_seq&lt;/span>=&lt;span style="color:#3677a9">3&lt;/span> &lt;span style="color:#40ffff">ttl&lt;/span>=&lt;span style="color:#3677a9">63&lt;/span> &lt;span style="color:#40ffff">time&lt;/span>=0.092 ms
...
&lt;span style="color:#999;font-style:italic"># 响应正常&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到观测 pod 访问实验 pod 丢包率 100%（无法访问），而其他 pod 不受影响，结果符合预期。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65ly1gft2c288oqg20p607i7wi.gif" alt="loss-pod-network">&lt;/p>
&lt;p>这里在配置中将 &lt;code>timeout&lt;/code> 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 &lt;code>exclude-port&lt;/code>，该配置指定一些端口不会丢包，以免该 pod 失联。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f loss_pod_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade loss-pod-network-by-names&lt;/code>)&lt;/p>
&lt;h3 id="pod-域名访问异常场景">Pod 域名访问异常场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：Pod 内访问指定域名异常。&lt;/p>
&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>获取 pod 名称内容同上。&lt;/p>
&lt;p>&lt;code>dns_pod_network_by_names.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>dns-pod-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>dns&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;dns pod network by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-slave-6dd975d4c8-lm8jz&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>domain&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;www.baidu.com&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;10.0.0.1&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f dns_pod_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade dns-pod-network-by-names -o json &lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-6dd975d4c8-lm8jz bash
&lt;span style="color:#999;font-style:italic"># Ping www.baidu.com&lt;/span>
$ ping www.baidu.com
&lt;span style="color:#999;font-style:italic"># 无响应&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到访问指定域名 &lt;code>www.baidu.com&lt;/code> 异常，结果符合预期。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65ly1gft2hti44bg20p607i4nj.gif" alt="dns-pod-network">&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f dns_pod_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade dns-pod-network-by-names&lt;/code>&lt;/p>
&lt;h3 id="pod-文件系统-io-故障场景">Pod 文件系统 I/O 故障场景&lt;/h3>
&lt;p>&lt;strong>实验目标&lt;/strong>：给 kubernetes 的 pod 注入文件系统I/O故障。&lt;/p>
&lt;blockquote>
&lt;p>注意：此场景需要激活 &lt;code>--webhook-enable&lt;/code> 参数，如需使用此功能，请在 chaosblade-operator 参数中添加 &lt;code>--webhook-enable&lt;/code>，或者在安装时指定：例如 helm 安装时添加 &lt;code>--set webhook.enable=true&lt;/code> 指定。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>前提条件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>集群中部署了 &lt;code>chaosblade-admission-webhook&lt;/code>&lt;/li>
&lt;li>需要注入故障的 &lt;code>volume&lt;/code> 设置 &lt;code>mountPropagation&lt;/code> 为 &lt;code>HostToContainer&lt;/code>&lt;/li>
&lt;li>pod上面添加了如下annotations:
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">chaosblade/inject-volume&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>//需要注入故障的volume name&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">chaosblade/inject-volume-subpath&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;conf&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>//volume挂载的子目录&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>部署测试 pod&lt;/strong>&lt;/p>
&lt;p>chaosblade webhook 会根据 pod 的 annotation，注入 fuse 的 sidecar 容器：&lt;/p>
&lt;ol>
&lt;li>&lt;code>chaosblade/inject-volume&lt;/code> 指明需要注入故障的 volume name，比如例子中的 &lt;code>data&lt;/code>。&lt;/li>
&lt;li>&lt;code>chaosblade/inject-volume-subpath&lt;/code> 指明 volume 挂载路径的子目录。上面的例子中，volume 的挂载路径是 &lt;code>/data&lt;/code>,子目录是 &lt;code>conf&lt;/code>，则在 pod 内，注入I/O异常的目录是 &lt;code>/data/conf&lt;/code>。&lt;/li>
&lt;li>指定需要注入故障的 volume 需要指定 &lt;code>mountPropagation：HostToContainer&lt;/code>，这个字段的含义可以参考官方文档 &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation">Volumes&lt;/a>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 部署测试 pod&lt;/span>
$ kubectl apply -f io-test-pod.yaml
&lt;span style="color:#999;font-style:italic"># 查看 sidecar 是否注入成功&lt;/span>
$ kubectl get pod test-7c9fc6fd88-7lx6b -n chaosblade
NAME READY STATUS RESTARTS AGE
test-7c9fc6fd88-7lx6b 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 4m8s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>开始实验&lt;/strong>&lt;/p>
&lt;p>&lt;code>pod_io.yaml&lt;/code> 内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>inject-pod-by-labels&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>IO&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Pod IO Exception by labels&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>labels&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;app=test&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>method&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;read&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>path&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>percent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;60&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>errno&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;28&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f pod_io.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看实验状态&lt;/strong>&lt;/p>
&lt;p>执行 &lt;code>kubectl get blade inject-pod-by-labels -o json &lt;/code> 命令，查看实验状态。&lt;/p>
&lt;p>&lt;strong>观测结果&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 进入实验 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it test-7c9fc6fd88-7lx6b bash
&lt;span style="color:#999;font-style:italic"># 在 pod 内读取指定目录中的文件，如果没有可以新建一个&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> cat /data/conf/test.yaml
cat: &lt;span style="color:#24909d">read&lt;/span> error: No space left on device
real 0m3.007s
user 0m0.002s
sys 0m0.002s
&lt;span style="color:#999;font-style:italic"># 因为有重试，显示有 3s 的延迟&lt;/span>
&lt;span style="color:#999;font-style:italic"># 因为设置了 60% 的异常，所有还是有成功的情况&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> cat /data/conf/test.yaml
&lt;span style="color:#3677a9">123&lt;/span>
real 0m0.004s
user 0m0.002s
sys 0m0.000s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件读取异常，结果符合预期。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1gft2pqli3ug20p607i7nk.gif" alt="io-pod-read">&lt;/p>
&lt;p>在本例中，我们对 read 操作注入两种异常，异常率为百分之60:&lt;/p>
&lt;ul>
&lt;li>对 &lt;code>read&lt;/code> 操作增加 1s 的延迟。&lt;/li>
&lt;li>对 &lt;code>read&lt;/code> 操作返回错误 &lt;code>28&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>这里只是做了一种类型的实验，更多的实验类型详见&lt;a href="https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/blade-create-k8s/blade-create-k8s-pod-io">官方文档&lt;/a>。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f pod_io.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade inject-pod-by-labels&lt;/code>&lt;/p>
&lt;p>删除测试 pod：&lt;code>kubectl delete -f io-test-pod.yaml&lt;/code>&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本篇我们使用 ChaosBlade Operator 对 Kubernetes Pod 资源进行混沌工程实验，可以看到 ChaosBlade 的操作简单易懂且功能强大，通过模拟不同的故障，可以检验我们系统监控报警的时效性，也可以检验我们系统在遇到故障时的情况，根据这些情况对系统进行调整，从而完善系统架构，增加可用性。&lt;/p>
&lt;p>这里只是对于每种场景进行了简单的实验，而每个场景不止有一种实验方式，用户可以通过调整参数进行不同的实验。&lt;/p></description></item><item><title>Post: ChaosBlade：从零开始的混沌工程（二）</title><link>https://guoxudong.io/post/start-chaosblade-1/</link><pubDate>Tue, 09 Jun 2020 11:14:09 +0800</pubDate><guid>https://guoxudong.io/post/start-chaosblade-1/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在上篇文章中，我们介绍了&lt;strong>混沌工程&lt;/strong>以及 &lt;strong>ChaosBlade&lt;/strong>。从本篇开始，从 ChaosBlade 的安装部署，到实验的创建销毁，在实践的角度，一步步的完成各种混沌实验，深入认识和使用混沌工程。&lt;/p>
&lt;h2 id="chaosblade-operator">ChaosBlade-Operator&lt;/h2>
&lt;p>&lt;a href="https://github.com/chaosblade-io/chaosblade-operator">ChaosBlade-Operator&lt;/a> 是 ChaosBlade 的 Kubernetes 平台实验场景实现。将混沌实验通过 Kubernetes 标准的 CRD 方式定义，用户可以像定义 Deployment 或 StatefulSet 那样定义 ChaosBlade 实验，只要对 &lt;code>kubectl&lt;/code> 和 Kubernetes 对象有所了解，就可以轻松的创建、更新和删除实验场景；同时也可以通过 chaosblade cli 工具来操作实验场景。&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>ChaosBlade-Operator 需要使用 Helm 安装，进入 &lt;a href="https://github.com/chaosblade-io/chaosblade-operator/releases">release 页面&lt;/a> 下载安装包（ChaosBlade 还提供了阿里云 OSS 的下载地址，提升国内下载速度）。&lt;/p>
&lt;p>使用 Helm 3 安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 下载安装包&lt;/span>
$ wget -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz
&lt;span style="color:#999;font-style:italic"># 为 chaosblade 创建一个 namespace&lt;/span>
$ kubectl create namespace chaosblade
&lt;span style="color:#999;font-style:italic"># 安装 ChaosBlade-Operator&lt;/span>
$ helm install chaos chaosblade-operator-0.6.0.tgz --set webhook.enable=&lt;span style="color:#24909d">true&lt;/span> --namespace=chaosblade
&lt;span style="color:#999;font-style:italic"># 查看安装结果&lt;/span>
$ kubectl get pod -n chaosblade | grep chaosblade
chaosblade-operator-6b6b484599-gdgq8 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 4d23h
chaosblade-tool-7wtph 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 4d20h
chaosblade-tool-r4zdk 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 4d23h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ChaosBlade-Operator 启动后将会在每个节点部署一个 &lt;code>chaosblade-tool&lt;/code> Pod 和一个 &lt;code>chaosblade-operator&lt;/code> Pod，如果都运行正常，则安装成功。上面设置 &lt;code>--set webhook.enable=true&lt;/code> 是为了 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。&lt;/p>
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>下面就以 Pod 网络延迟实验为例，展示如何使用 ChaosBlade-Operator。&lt;/p>
&lt;h3 id="实验准备">实验准备&lt;/h3>
&lt;p>实验前需要先准备实验对象，这里使用 &lt;a href="https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6">guestbook&lt;/a> 应用。&lt;/p>
&lt;p>&lt;strong>安装&lt;/strong>&lt;/p>
&lt;p>同样使用 Helm 3&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># add repo&lt;/span>
helm repo add apphub-incubator https://apphub.aliyuncs.com/incubator/
&lt;span style="color:#999;font-style:italic"># 安装&lt;/span>
helm install guestbook apphub-incubator/guestbook --set service.type=NodePort --namespace=chaosblade
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认的 Service 类型为 &lt;code>LoadBalancer&lt;/code>，这里为了方便访问设置为了 &lt;code>NodePort&lt;/code>。&lt;/p>
&lt;h3 id="开始实验">开始实验&lt;/h3>
&lt;p>**实验目标：**对 chaosblade 命名空间中，对 &lt;code>redis-master-68857cd57c-dzbs9&lt;/code> Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p>
&lt;p>&lt;strong>实验 yaml 配置&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>chaosblade.io/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ChaosBlade&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay-pod-network-by-names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">experiments&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">scope&lt;/span>:&lt;span style="color:#666"> &lt;/span>pod&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target&lt;/span>:&lt;span style="color:#666"> &lt;/span>network&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">action&lt;/span>:&lt;span style="color:#666"> &lt;/span>delay&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">desc&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delay pod network by names&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>names&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>local-port&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;6379&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>interface&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;3000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>offset&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将其保存为 &lt;code>delay_pod_network_by_names.yaml&lt;/code> 并执行命令，开始实验：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f delay_pod_network_by_names.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看实验状态">查看实验状态&lt;/h3>
&lt;p>执行 &lt;code>kubectl get blade delay-pod-network-by-names -o json&lt;/code> 命令，查看实验状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;apiVersion&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;chaosblade.io/v1alpha1&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;ChaosBlade&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;metadata&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;annotations&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;kubectl.kubernetes.io/last-applied-configuration&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;{\&amp;#34;apiVersion\&amp;#34;:\&amp;#34;chaosblade.io/v1alpha1\&amp;#34;,\&amp;#34;kind\&amp;#34;:\&amp;#34;ChaosBlade\&amp;#34;,\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{},\&amp;#34;name\&amp;#34;:\&amp;#34;delay-pod-network-by-names\&amp;#34;},\&amp;#34;spec\&amp;#34;:{\&amp;#34;experiments\&amp;#34;:[{\&amp;#34;action\&amp;#34;:\&amp;#34;delay\&amp;#34;,\&amp;#34;desc\&amp;#34;:\&amp;#34;delay pod network by names\&amp;#34;,\&amp;#34;matchers\&amp;#34;:[{\&amp;#34;name\&amp;#34;:\&amp;#34;names\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;redis-master-68857cd57c-dzbs9\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;namespace\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;chaosblade\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;local-port\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;6379\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;interface\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;eth0\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;time\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;3000\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;offset\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;1000\&amp;#34;]}],\&amp;#34;scope\&amp;#34;:\&amp;#34;pod\&amp;#34;,\&amp;#34;target\&amp;#34;:\&amp;#34;network\&amp;#34;}]}}\n&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;creationTimestamp&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;2020-06-02T05:57:50Z&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;finalizers&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;finalizer.chaosblade.io&amp;#34;&lt;/span>
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;generation&amp;#34;&lt;/span>: &lt;span style="color:#3677a9">1&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;delay-pod-network-by-names&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;resourceVersion&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7710394&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;selfLink&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;1235ff55-8256-4caa-a371-e1abf6c9e7b7&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;spec&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;experiments&amp;#34;&lt;/span>: [
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;action&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;delay&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;desc&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;delay pod network by names&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;matchers&amp;#34;&lt;/span>: [
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;names&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span>
]
},
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;namespace&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;chaosblade&amp;#34;&lt;/span>
]
},
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;local-port&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;6379&amp;#34;&lt;/span>
]
},
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;interface&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;eth0&amp;#34;&lt;/span>
]
},
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;time&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;3000&amp;#34;&lt;/span>
]
},
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;offset&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;1000&amp;#34;&lt;/span>
]
}
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;scope&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;pod&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;network&amp;#34;&lt;/span>
}
]
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;expStatuses&amp;#34;&lt;/span>: [
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;action&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;delay&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;resStatuses&amp;#34;&lt;/span>: [
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;a86f8cf8b68ace98&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;kind&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;pod&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;redis-master&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;nodeName&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;keking&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;state&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Success&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;success&amp;#34;&lt;/span>: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;uid&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60&amp;#34;&lt;/span>
}
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;scope&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;pod&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;state&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Success&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;success&amp;#34;&lt;/span>: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;network&amp;#34;&lt;/span>
}
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;phase&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Running&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到实验成功创建了。&lt;/p>
&lt;h3 id="观测结果">观测结果&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 获取实验 pod ip&lt;/span>
$ kubectl get pod -l &lt;span style="color:#40ffff">app&lt;/span>=redis,role=master -o &lt;span style="color:#40ffff">jsonpath&lt;/span>={.items..status.podIP}
10.42.69.44
&lt;span style="color:#999;font-style:italic"># 进入观测 pod&lt;/span>
$ kubectl &lt;span style="color:#24909d">exec&lt;/span> -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style="color:#999;font-style:italic"># 在 pod 中安装 telnet&lt;/span>
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style="color:#999;font-style:italic"># 测试时间&lt;/span>
$ &lt;span style="color:#24909d">time&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span> | telnet 10.42.69.44 &lt;span style="color:#3677a9">6379&lt;/span>
Trying 10.42.69.44...
Connected to 10.42.69.44.
Escape character is &lt;span style="color:#ed9d13">&amp;#39;^]&amp;#39;&lt;/span>.
Connection closed by foreign host.
real 0m3.790s
user 0m0.007s
sys 0m0.001s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm2deqtdwg20p606c1kx.gif" alt="">&lt;/p>
&lt;p>可以看到结果符合预期。&lt;/p>
&lt;p>&lt;strong>停止实验&lt;/strong>&lt;/p>
&lt;p>执行命令：&lt;code>kubectl delete -f delay_pod_network_by_names.yaml&lt;/code>&lt;/p>
&lt;p>或者直接删除 blade 资源：&lt;code>kubectl delete blade delay-pod-network-by-names&lt;/code>&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本篇我们讲解了如何部署 ChaosBlade-Operator 并进行了简单的实验，可以看到在云原生场景下，ChaosBlade 依旧有着简单的操作方式，多种实验场景，并对混沌实验模型进行了标准化实现。很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念。&lt;/p></description></item><item><title>Post: ChaosBlade：从零开始的混沌工程（一）</title><link>https://guoxudong.io/post/start-chaosblade-0/</link><pubDate>Thu, 04 Jun 2020 17:02:58 +0800</pubDate><guid>https://guoxudong.io/post/start-chaosblade-0/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>随着微服务的盛行以及容器技术的普及，借助 Kubernetes 的容器编排能力，部署一套分布式系统的难度也越来越低。但随之而来的是越来越复杂的系统，以及越来越难的系统可靠性测试，有时仅仅是一个接口的故障，就可能导致整个系统的雪崩。在雪崩中，找到那个最初故障的接口也十分困难，因为到处都在报错。&lt;/p>
&lt;p>为了解决这些问题，除了不断减少服务的耦合，建立强大的监控系统以及设置熔断、限流等策略等方式，这时&lt;strong>混沌工程&lt;/strong>就出现了。&lt;/p>
&lt;h2 id="什么是混沌工程">什么是混沌工程&lt;/h2>
&lt;p>根据&lt;a href="https://principlesofchaos.org">混沌工程原则（PRINCIPLES OF CHAOS ENGINEERING）&lt;/a>：&lt;strong>混沌工程是在分布式系统上进行实验的学科, 目的是建立对系统抵御生产环境中失控条件的能力以及信心。&lt;/strong>&lt;/p>
&lt;p>大规模分布式软件系统的发展正在改变软件工程。作为一个行业，我们很快就采用了提高开发灵活性和部署速度的实践。但伴随着这些优点，一个迫切问题出现了，那就是：我们对投入生产的复杂系统有多少信心？&lt;/p>
&lt;p>即使分布式系统中的所有单个服务都正常运行, 但这些服务之间的交互也会导致不可预知的结果。这些不可预知的结果, 由影响生产环境的罕见且具有破坏性的事件复合而成，令这些分布式系统存在内在的混沌。&lt;/p>
&lt;p>需要在异常行为出现之前，在整个系统内找出这些弱点。这些弱点包括以下形式:&lt;/p>
&lt;ul>
&lt;li>当服务不可用时的不正确回滚设置&lt;/li>
&lt;li>不当的超时设置导致的重试风暴&lt;/li>
&lt;li>由于下游依赖的流量过载导致的服务中断&lt;/li>
&lt;li>单点故障时的级联失败等&lt;/li>
&lt;/ul>
&lt;p>在这些弱点通过生产环境暴露给用户之前，必须主动的发现这些重要的弱点。并需要一种方法来管理这些系统固有的混沌, 通过增加的灵活性和速率以提升我们对生产环境部署的信心, 尽管系统的复杂性是由这些部署所导致的。&lt;/p>
&lt;p>采用基于经验和系统的方法解决了分布式系统在规模增长时引发的问题, 并以此建立对系统抵御这些事件的能力和信心。通过在受控实验中观察分布式系统的行为来了解它的特性，我们称之为&lt;strong>混沌工程&lt;/strong>。&lt;/p>
&lt;h2 id="chaosblade">ChaosBlade&lt;/h2>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gfh7pe8dxnj21d407mgly.jpg" alt="">&lt;/p>
&lt;p>&lt;a href="https://github.com/chaosblade-io/chaosblade">ChaosBlade&lt;/a> 中文名混沌之刃，是阿里巴巴开源的一款遵循混沌工程原理和混沌实验模型的实验注入工具，是内部项目 MonkeyKing 对外开源的项目，其建立在阿里巴巴近十年故障测试和演练实践基础上，结合了集团各业务的最佳创意和实践。旨在帮助企业提升分布式系统的容错能力，并且在企业上云或往云原生系统迁移过程中业务连续性提供保障。&lt;/p>
&lt;p>目前支持的场景有：&lt;code>基础资源&lt;/code>、&lt;code>Java 应用&lt;/code>、&lt;code>C++ 应用&lt;/code>、&lt;code>Docker 容器&lt;/code>以及 &lt;code>Kubernetes 平台&lt;/code>。该项目将场景按领域实现封装成单独的项目，不仅可以使领域内场景标准化实现，而且非常方便场景水平和垂直扩展，通过遵循混沌实验模型，实现 chaosblade cli 统一调用。&lt;/p>
&lt;p>该项目体验极好，仅需一个可执行文件 &lt;code>blade&lt;/code>，就可完成多种场景的实验（一些复杂场景如 Java 应用实验，则需要相关工具包），同时如果不想下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gfh7yajpkkg212i0mqu0y.gif" alt="">&lt;/p>
&lt;center>快速体验&lt;/center>
&lt;p>该项目于 2020 年 5 月 27 日发布了最新了 &lt;a href="https://github.com/chaosblade-io/chaosblade/releases/tag/v0.6.0">v0.6.0&lt;/a> 版本，本系列文章的全部实践也将基于这个版本以及该版本的修复版本 v0.6.x 进行。&lt;/p>
&lt;h2 id="chaosblade-operator">ChaosBlade-Operator&lt;/h2>
&lt;p>ChaosBlade-Operator 是 ChaosBlade 的 Kubernetes 平台实验场景实现，也是本系列文章主要使用的工具。其将混沌实验通过 Kubernetes 标准的 CRD 方式定义，很方便的使用 Kubernetes 资源操作的方式来创建、更新、删除实验场景，包括使用 kubectl、client-go 等方式执行，而且还可以使用上述的 chaosblade cli 工具执行。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gfh84jo6dgg20p606c1kx.gif" alt="">&lt;/p>
&lt;center>Pod 网络延迟场景&lt;/center>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本篇为系列文章开篇，主要介绍混动工程以及混沌工程实验工具 ChaosBlade，后续会从实践的角度带领读者上手实践混沌工程，了解混沌工程的方法及原理。实践出真知，在后续的文章后，我们将从 ChaosBlade-Operator 的安装部署、实验配置、实验观测及实验销毁等方面，详细介绍 ChaosBlade 的功能。同时也会介绍在不同场景下混沌工程是如何帮助开发者发现系统中的问题，并达到逐渐建设高可用的韧性系统的目的。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/wizardbyron/principlesofchaos_zh-cn">混沌工程原则&lt;/a> - Principlesofchaos.org&lt;/li>
&lt;li>&lt;a href="https://github.com/chaosblade-io/chaosblade">ChaosBlade&lt;/a> - Github.com&lt;/li>
&lt;/ul></description></item></channel></rss>