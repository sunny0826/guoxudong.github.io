<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – kustomize</title><link>https://guoxudong.io/tags/kustomize/</link><description>Recent content in kustomize on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Tue, 18 Aug 2020 09:23:28 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/kustomize/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 使用 Golang 和 HTML5 开发一个 MacOS App</title><link>https://guoxudong.io/post/go-h5-codeing-mac-app/</link><pubDate>Tue, 18 Aug 2020 09:23:28 +0800</pubDate><guid>https://guoxudong.io/post/go-h5-codeing-mac-app/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Go语言（也称为Golang）是 google 在 2009 年推出的一种编译型编程语言。相对于其他编程语言，golang 具有编写并发程序或网络交互简单、数据类型丰富、编译速度快等特点，比较适合于高性能、高并发场景。Go 语言一直在网络编程、云平台开发、分布式系统等领域占据着重要的地位，尤其在云原生领域，杀手级项目 Docker 和 Kubernetes 都是采用 Go 语言开发的。而在其他领域，比如桌面应用开发，也有一些框架可以使用，本篇文章就来介绍如何使用 Go 语言 和 HTML5 来开发一个 MacOS App。&lt;/p>
&lt;h2 id="框架选择">框架选择&lt;/h2>
&lt;p>这里我选用了 &lt;a href="https://github.com/labstack/echo">echo&lt;/a> 作为 web 框架，当然也可以选择其他的 web 框架，选择 echo 只不过因为其比较轻量。要做桌面应用，还需要一个 GUI 框架来构建应用，这里我选择的是 &lt;a href="https://github.com/zserge/lorca">Lorca&lt;/a>，使用 Lorca 可以用 Go 编写 HTML5 桌面程序，依赖 Chrome 进行 UI 渲染，但却不需要把 Chrome 打包到应用中，也就是说使用应用的电脑，需要安装 Chrome。&lt;/p>
&lt;h3 id="lorca">lorca&lt;/h3>
&lt;p>echo 的使用方式中规中矩，没有什么需要介绍的。这里简要介绍一下 lorca，其的使用方法和原理都很简单，可以将其看做是一个浏览器，可在其上运行 web 应用，lorca 可直接将 web 应用包装成桌面应用。这里提供一个简单的示例：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">ui, _ := lorca.&lt;span style="color:#447fcf">New&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#3677a9">480&lt;/span>, &lt;span style="color:#3677a9">320&lt;/span>)
&lt;span style="color:#6ab825;font-weight:bold">defer&lt;/span> ui.&lt;span style="color:#447fcf">Close&lt;/span>()
&lt;span style="color:#999;font-style:italic">// Bind Go function to be available in JS. Go function may be long-running and
&lt;/span>&lt;span style="color:#999;font-style:italic">// blocking - in JS it&amp;#39;s represented with a Promise.
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>ui.&lt;span style="color:#447fcf">Bind&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;add&amp;#34;&lt;/span>, &lt;span style="color:#6ab825;font-weight:bold">func&lt;/span>(a, b &lt;span style="color:#6ab825;font-weight:bold">int&lt;/span>) &lt;span style="color:#6ab825;font-weight:bold">int&lt;/span> { &lt;span style="color:#6ab825;font-weight:bold">return&lt;/span> a + b })
&lt;span style="color:#999;font-style:italic">// Call JS function from Go. Functions may be asynchronous, i.e. return promises
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>n := ui.&lt;span style="color:#447fcf">Eval&lt;/span>(&lt;span style="color:#ed9d13">`Math.random()`&lt;/span>).&lt;span style="color:#447fcf">Float&lt;/span>()
fmt.&lt;span style="color:#447fcf">Println&lt;/span>(n)
&lt;span style="color:#999;font-style:italic">// Call JS that calls Go and so on and so on...
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>m := ui.&lt;span style="color:#447fcf">Eval&lt;/span>(&lt;span style="color:#ed9d13">`add(2, 3)`&lt;/span>).&lt;span style="color:#447fcf">Int&lt;/span>()
fmt.&lt;span style="color:#447fcf">Println&lt;/span>(m)
&lt;span style="color:#999;font-style:italic">// Wait for the browser window to be closed
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>&amp;lt;-ui.&lt;span style="color:#447fcf">Done&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="制作-macos-app">制作 MacOS App&lt;/h2>
&lt;p>在完成基本的编码后，接下来的工作才是重点：将应用包装成一个 MacOS APP。&lt;/p>
&lt;h3 id="制作图标">制作图标&lt;/h3>
&lt;p>一个 MacOS APP 首先需要一个图标，这里请选择一个 1024 X 1024 分辨率，背景透明的 PNG 图片。这里假设该图片名为 &lt;code>logo.png&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>新建一个名为 &lt;code>tmp.iconset&lt;/code> 的临时目录，用于存放不同大小的临时图片&lt;/li>
&lt;li>执行如下命令，将原图转为不同大小的图片并放入临时目录&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sips -z &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> logo.png --out tmp.iconset/icon_16x16.png
$ sips -z &lt;span style="color:#3677a9">32&lt;/span> &lt;span style="color:#3677a9">32&lt;/span> logo.png --out tmp.iconset/icon_16x16@2x.png
$ sips -z &lt;span style="color:#3677a9">32&lt;/span> &lt;span style="color:#3677a9">32&lt;/span> logo.png --out tmp.iconset/icon_32x32.png
$ sips -z &lt;span style="color:#3677a9">64&lt;/span> &lt;span style="color:#3677a9">64&lt;/span> logo.png --out tmp.iconset/icon_32x32@2x.png
$ sips -z &lt;span style="color:#3677a9">128&lt;/span> &lt;span style="color:#3677a9">128&lt;/span> logo.png --out tmp.iconset/icon_128x128.png
$ sips -z &lt;span style="color:#3677a9">256&lt;/span> &lt;span style="color:#3677a9">256&lt;/span> logo.png --out tmp.iconset/icon_128x128@2x.png
$ sips -z &lt;span style="color:#3677a9">256&lt;/span> &lt;span style="color:#3677a9">256&lt;/span> logo.png --out tmp.iconset/icon_256x256.png
$ sips -z &lt;span style="color:#3677a9">512&lt;/span> &lt;span style="color:#3677a9">512&lt;/span> logo.png --out tmp.iconset/icon_256x256@2x.png
$ sips -z &lt;span style="color:#3677a9">512&lt;/span> &lt;span style="color:#3677a9">512&lt;/span> logo.png --out tmp.iconset/icon_512x512.png
$ sips -z &lt;span style="color:#3677a9">1024&lt;/span> &lt;span style="color:#3677a9">1024&lt;/span> logo.png --out tmp.iconset/icon_512x512@2x.png
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用 &lt;a href="https://developer.apple.com/library/content/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html#//apple_ref/doc/uid/TP40012302-CH7-SW2">iconutil&lt;/a> 生成图标&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ iconutil -c icns tmp.iconset -o icon.icns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>icon.icns&lt;/code> 就是制作好的 MacOS App 图标。&lt;/p>
&lt;h3 id="制作-app-bundle">制作 .app bundle&lt;/h3>
&lt;p>macOS 上安装的可运行程序是一个 &lt;code>.app&lt;/code> 的目录，里面包含了应用的二进制文件、资源文件以及清单文件。其的目录结构为（也可以通过”右键-显示包内容“来查看 &lt;code>.app&lt;/code> 文件内容）：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree Kustomize.app
Kustomize.app
└── Contents
├── Info.plist
├── MacOS
│   └── kustomize
└── Resources
├── assets
│   ├── css
│   │   ├── page.css
│   │   ├── prism.css
│   │   └── weui.min.css
│   ├── images
│   │   └── favicon.ico
│   └── js
│   ├── jquery.min.js
│   ├── prism.js
│   └── weui.min.js
├── icon.icns
└── views
├── copyreght.html
├── footer.html
├── header.html
├── index.html
└── yaml.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Info.plist&lt;/code> 为清单文件，存储应用信息&lt;/li>
&lt;li>&lt;code>MacOS&lt;/code> 中存放二进制可执行文件&lt;/li>
&lt;li>&lt;code>Resources&lt;/code> 存放静态资源文件和图标&lt;/li>
&lt;/ul>
&lt;h3 id="infoplist-文件">Info.plist 文件&lt;/h3>
&lt;p>这是一个清单文件，根据自己应用的内容对齐进行修改，更多内容可以参考 &lt;a href="https://github.com/shurcooL/trayhost">trayhost&lt;/a> 项目的说明。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#cd2828;font-weight:bold">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span style="color:#cd2828;font-weight:bold">&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;plist&lt;/span> &lt;span style="color:#bbb">version=&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;dict&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;key&amp;gt;&lt;/span>CFBundleExecutable&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/key&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;string&amp;gt;&lt;/span>kustomize&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;key&amp;gt;&lt;/span>CFBundleIconFile&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/key&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;string&amp;gt;&lt;/span>icon.icns&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;key&amp;gt;&lt;/span>CFBundleIdentifier&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/key&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;string&amp;gt;&lt;/span>io.guoxudong.kustomize-remote-observer&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;key&amp;gt;&lt;/span>NSHighResolutionCapable&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/key&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;true/&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;key&amp;gt;&lt;/span>LSUIElement&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/key&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;string&amp;gt;&lt;/span>1&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/dict&amp;gt;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">&amp;lt;/plist&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用脚本构建-app">使用脚本构建 App&lt;/h3>
&lt;p>上面的这些只不过是介绍一下原理及手动修改方式，实际应用中可以使用脚本来完成这些工作。使用如下脚本，可以一键完成：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.app&lt;/code> 应用的构建&lt;/li>
&lt;li>go 应用的打包&lt;/li>
&lt;li>清单文件的生成&lt;/li>
&lt;li>静态资源的拷贝&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#cd2828;font-weight:bold">#!/bin/sh
&lt;/span>&lt;span style="color:#cd2828;font-weight:bold">&lt;/span>
&lt;span style="color:#40ffff">APP&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;Kustomize.app&amp;#34;&lt;/span>
mkdir -p &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/{MacOS,Resources}
go build -o &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/MacOS/kustomize
cat &amp;gt; &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/Info.plist &lt;span style="color:#ed9d13">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;dict&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;string&amp;gt;kustomize&amp;lt;/string&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;key&amp;gt;CFBundleIconFile&amp;lt;/key&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;string&amp;gt;icon.icns&amp;lt;/string&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;string&amp;gt;io.guoxudong.kustomize-remote-observer&amp;lt;/string&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;key&amp;gt;NSHighResolutionCapable&amp;lt;/key&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;true/&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;key&amp;gt;LSUIElement&amp;lt;/key&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13"> &amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;/dict&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;/plist&amp;gt;
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
cp icons/icon.icns &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/Resources/icon.icns
cp -r assets &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/Resources/assets
cp -r views &lt;span style="color:#40ffff">$APP&lt;/span>/Contents/Resources/views
find &lt;span style="color:#40ffff">$APP&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>在 MacOS 中，当您运行 App bundle 时，进程的工作目录是根目录（&lt;code>/&lt;/code>），而不是 &lt;code>Contents/Resources&lt;/code> 目录。如果需要从 &lt;code>Resources&lt;/code> 加载资源，则需要进行如下更改：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">ep, err := os.&lt;span style="color:#447fcf">Executable&lt;/span>()
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> err != &lt;span style="color:#6ab825;font-weight:bold">nil&lt;/span> {
log.&lt;span style="color:#447fcf">Fatalln&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;os.Executable:&amp;#34;&lt;/span>, err)
}
err = os.&lt;span style="color:#447fcf">Chdir&lt;/span>(filepath.&lt;span style="color:#447fcf">Join&lt;/span>(filepath.&lt;span style="color:#447fcf">Dir&lt;/span>(ep), &lt;span style="color:#ed9d13">&amp;#34;..&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;Resources&amp;#34;&lt;/span>))
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> err != &lt;span style="color:#6ab825;font-weight:bold">nil&lt;/span> {
log.&lt;span style="color:#447fcf">Fatalln&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;os.Chdir:&amp;#34;&lt;/span>, err)
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h3 id="制作-dmg-文件">制作 DMG 文件&lt;/h3>
&lt;p>DMG 文件用于分发应用程序，将 &lt;code>.app&lt;/code> 文件压缩制成镜像，可以很方便的通过拖拽的形式完成安装。&lt;/p>
&lt;h4 id="制作模板">制作模板&lt;/h4>
&lt;p>制作 DMG 文件首先需要制作模板。打开&lt;code>磁盘工具 - 文件 - 新建映象 - 空白映象&lt;/code>（或直接按 &lt;code>⌘N&lt;/code>）创建一个新的磁盘镜像。给它取个名字，设置足够的空间空间，分区选择&lt;code>CD/DVD&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghuwoma7w4j20bd09odig.jpg" alt="新建模板">&lt;/p>
&lt;p>制作好后，打开该镜像，进行文件夹视图定制（按&lt;code>⌘J&lt;/code>），选择展示图标的大小及背景图片，这里可以隐藏工具栏&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ghuwwafpr1j20uy0jhb29.jpg" alt="文件夹视图定制">&lt;/p>
&lt;p>右键&lt;code>应用程序&lt;/code>选择制作替身，将替身移动到镜像中&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1ghuwthtnxqj20bh05xwey.jpg" alt="制作替身">&lt;/p>
&lt;p>将打包好的 app 加入到 DMG 镜像中就完成了 DMG 模板的定制&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghuwzoih10j20lo0cqtof.jpg" alt="定制好的视图">&lt;/p>
&lt;h4 id="转换-dmg-文件">转换 DMG 文件&lt;/h4>
&lt;p>目前的 DMG 模板文件还没有经过压缩并且是可写的状态，这样是不能作为程序发布的，所以这里需要对模板进行转换。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux3e65ngj20ct04676t.jpg" alt="转换">&lt;/p>
&lt;p>打开 &lt;code>磁盘工具 - 映象 - 转换&lt;/code>，然后选择压缩后存储的目录就完成了最后一步 DMG 文件的转换。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux55kyzdj20pn0fqgt6.jpg" alt="转换成功">&lt;/p>
&lt;p>现在点开 DMG 文件，将应用拖动到应用程序中，就可以在启动台中看到我们的应用程序了！&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux7e0g5tj20hn0fq7e7.jpg" alt="启动台">&lt;/p>
&lt;h4 id="自动化">自动化&lt;/h4>
&lt;p>上面只是展示了如何手动制作 DMG 镜像，实际使用当然是要将这些步骤自动化的。我将这部分内容做成了一个 go 脚本，原理其实就是使用 &lt;code>hdiutil&lt;/code> 这个命令行工具，有兴趣的同学可以文末找到项目地址，&lt;code>Makefile&lt;/code> 中有详细构建的命令。&lt;/p>
&lt;h2 id="项目展示">项目展示&lt;/h2>
&lt;p>我使用 Go + HTML5 制作了一个 &lt;code>Kustomize Remote&lt;/code> 的项目，可以从远程 kustomize 项目中获取配置，并 build 成 yaml 文件，UI样式为微信风格，支持 public 和 private 项目。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ghuxhffoe1j20dc0h8wf1.jpg" alt="kustomize-remote-observer">&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1ghuxk4zxv2j20dc0h83zl.jpg" alt="yaml result">&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>项目地址：&lt;a href="https://github.com/sunny0826/kustomize-remote-observer">https://github.com/sunny0826/kustomize-remote-observer&lt;/a>&lt;/p>
&lt;p>也可以直接在 &lt;a href="https://github.com/sunny0826/kustomize-remote-observer/releases">release 页面&lt;/a> 下载 DMG 文件安装试用，只需 Mac 上有 Chrome 即可。&lt;/p>
&lt;/div>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>Go 语言一直在网络编程、云平台开发、分布式系统等领域占据着重要的地位，但是像桌面应用或者机器学习这样的领域，同样也能做出不错的效果。作为一门受欢迎的编程语言 Golang 已经有十多年的历史了，相信它在将来还能在更多的领域焕发生机，创造辉煌。&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（五）：配合 kubedog 完善 CI/CD 的最后一步</title><link>https://guoxudong.io/post/kustomize-5/</link><pubDate>Wed, 03 Jul 2019 15:20:31 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-5/</guid><description>
&lt;blockquote>
&lt;p>在以往的 pipeline 中，使用 kubectl 进行部署 Deployment 后无法检查 Deployment 是否部署成功，只能通过使用命令/脚本来手动检查 Deployment 状态，而 kubedog 这个小工具完美解决了这个问题，完善了 CI/CD 流水线的最后一步。&lt;/p>
&lt;/blockquote>
&lt;h2 id="kubedog">KubeDog&lt;/h2>
&lt;p>kubedog 是一个 lib 库和 CLI 小工具，允许在 CI/CD 部署 pipeline 中观察和跟踪 Kubernetes 资源。与 kustomize 配合，集成到 pipeline 之后，完美的解决了 CI/CD 的最后一步，完美的替代了之前不够灵活的脚本（好吧，其实我也开发了类似的小工具，但是有这么好用的轮子，拿来直接用何乐而不为呢？）。&lt;/p>
&lt;p>kubedog 提供了 lib 库和 CLI 小工具，这里由于是介绍 CI/CD 中的实践，所以只介绍其中的 &lt;code>rollout track&lt;/code> 功能。 lib 库的使用和 CLI 的 &lt;code>follow&lt;/code> 功能这里就不做介绍了，有兴趣的同学可以去 &lt;a href="https://github.com/flant/kubedog">GitHub&lt;/a> 上查看该项目的各种使用方式。&lt;/p>
&lt;h3 id="集成-kubedog">集成 KubeDog&lt;/h3>
&lt;p>由于我司目前使用的是 &lt;a href="https://drone.io/">drone&lt;/a> 进行 CI ，每个 step 都是由一个 docker 制作的插件组成。我制作了一个包含 &lt;code>kubectl&lt;/code> 、 &lt;code>kustomize&lt;/code> 和 &lt;code>kubedog&lt;/code> 的镜像。该镜像已上传 dockerhub ，需要的可以自行拉取使用 &lt;code>guoxudongdocker/kubectl&lt;/code> ,而该插件的使用也在 &lt;a href="https://github.com/sunny0826/kubectl-kustomize">GitHub&lt;/a> 和 &lt;a href="https://cloud.docker.com/u/guoxudongdocker/repository/docker/guoxudongdocker/kubectl">DockerHub&lt;/a> 上查看。&lt;/p>
&lt;p>而集成方式也比较简单，直接将 &lt;code>kubectl&lt;/code> 、 &lt;code>kustomize&lt;/code> 和 &lt;code>kubedog&lt;/code> 的可执行包下载到 &lt;code>/usr/local/bin&lt;/code> 并赋予执行权限即可，下面就是 &lt;code>Dockerfile&lt;/code> 文件：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">LABEL&lt;/span> &lt;span style="color:#40ffff">maintainer&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;sunnydog0826@gmail.com&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> &lt;span style="color:#40ffff">KUBE_LATEST_VERSION&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;v1.14.1&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apk add --update ca-certificates &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add --update -t deps curl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://storage.googleapis.com/kubernetes-release/release/&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">KUBE_LATEST_VERSION&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubectl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64 -o /usr/local/bin/kustomize &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kustomize &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://dl.bintray.com/flant/kubedog/v0.2.0/kubedog-linux-amd64-v0.2.0 -o /usr/local/bin/kubedog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubedog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk del --purge deps &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; rm /var/cache/apk/*&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /root&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;kubectl&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;help&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kustomize-配合-kubedog-使用">Kustomize 配合 KubeDog 使用&lt;/h2>
&lt;p>在镜像构建好之后就可以直接使用了，这里使用的是 DockerHub 的镜像仓库，这里建议将镜像同步到私有仓库，比如阿里云的容器镜像服务或者 Habor ，因为国内拉取 DockerHub 的镜像不太稳定，经常会拉取镜像失败或者访问超时，在 CI/CD 流水线中推荐使用更稳定镜像。&lt;/p>
&lt;p>以下是 &lt;code>.drone.yml&lt;/code> 示例：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>pipeline&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>{your-pipeline-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Kubernetes 部署&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/kubectl&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/root/.kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- cd deploy/overlays/dev &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 这里使用 kustomize ,详细使用方法请见 https://github.com/kubernetes-sigs/kustomize&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- kustomize edit set image {your-docker-registry}:${DRONE_BUILD_NUMBER}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- kubectl apply -k . &amp;amp;&amp;amp; kubedog rollout track deployment {your-deployment-name} -n {your-namespace} -t {your-tomeout}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/tmp/cache/.kube &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># kubeconfig 挂载位置&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">trigger&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">branch&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- master &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 触发 CI 的分支&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的配置可见，在该 step 中执行了如下几步：&lt;/p>
&lt;ol>
&lt;li>进入 patch 所在路径&lt;/li>
&lt;li>使用了 Kustomize 命令 &lt;code>kustomize edit set image {your-docker-registry}:${DRONE_BUILD_NUMBER}&lt;/code> 方式将前面 step 中构建好的镜像的 tag 插入到 patch 中&lt;/li>
&lt;li>使用 &lt;code>kubectl apply -k .&lt;/code> 进行 k8s 部署，要注意最后的那个 &lt;code>.&lt;/code>&lt;/li>
&lt;li>使用 kubedog 跟踪 Deployment 部署状态&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>命令解析：&lt;code>kubedog rollout track deployment {your-deployment-name} -n {your-namespace} -t {your-tomeout}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>deployment {your-deployment-name} : Deployment 的名称&lt;/li>
&lt;li>-n {your-namespace} : Deployment 所在的 namespace&lt;/li>
&lt;li>-t {your-tomeout} : 超时时间，单位为秒，超时后会报错，这里请根据实际部署情况进行设置&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>从 Kubernetes release v1.14 版本开始，&lt;code>kustomize&lt;/code> 集成到 &lt;code>kubectl&lt;/code> 中，越来越多 k8S 周边的小工具出现。这些小工具的出现帮助了 Kubernetes 的使用者来拉平 Kubernetes 的使用曲线，同时也标志着 K8S 的成熟，越来越多的开发人员基于使用 K8S 的痛点开发相关工具。套用一句今年 KubeCon 的 Keynote 演讲上，阿里云智能容器平台负责人丁宇的话： &lt;strong>Kubernetes 正当时，云原生未来可期&lt;/strong> 。&lt;/p></description></item><item><title>Post: 记一次使用 Kustomize 时遇到的愚蠢问题</title><link>https://guoxudong.io/post/kustomize-err-1/</link><pubDate>Wed, 03 Jul 2019 13:44:50 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-err-1/</guid><description>
&lt;h2 id="现象">现象&lt;/h2>
&lt;p>在日常 CI/CD 流程中，已经将 Kustomize 集成到 pipeline 中使用，但是在对一个项目进行 Kustomize 改造时，将单个 &lt;code>deploy.yaml&lt;/code> 拆分为了若干个 patch 以达到灵活 Kubernetes 部署的目的。但是在使用 &lt;code>kubectl apply -k .&lt;/code> 命令进行部署的时候遇到了 &lt;code>error: failed to find an object with apps_v1_Deployment|myapp to apply the patch&lt;/code> 的报错。&lt;/p>
&lt;p>&lt;img src="http://tva2.sinaimg.cn/large/ad5fbf65gy1g4mm1m3vx9j21oe10y102.jpg" alt="image">&lt;/p>
&lt;h2 id="解决之路">解决之路&lt;/h2>
&lt;p>由于之前的使用中没有遇到此类报错，看报错信息像是 &lt;code>apiVersion&lt;/code> 的问题，所以先检查了所有 patch 的 &lt;code>apiVersion&lt;/code> ，但是并没有找到有什么问题。&lt;/p>
&lt;h3 id="google-搜索">Google 搜索&lt;/h3>
&lt;p>对该报错进行了搜索，搜索到如下结果：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g4mmee8ctxj21900ns44c.jpg" alt="image">
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g4mmgrdz0fj21ou1b6wro.jpg" alt="image">&lt;/p>
&lt;p>？？？ 为何这个 issue 没有解决就被提出者关闭了？&lt;/p>
&lt;h3 id="问题解决">问题解决&lt;/h3>
&lt;p>在 Google 了一圈之后还是没有找到什么有营养的回答，问题又回到了原点&amp;hellip;只能对所有的 patch 的每个字符和每个配置逐一进行了检查。结果发现是 &lt;code>name&lt;/code> 的内容 base 与 overlays 不同&amp;hellip; base 中是 &lt;code>name:myapp&lt;/code> ，而 overlays 中是 &lt;code>name:my-app&lt;/code> &amp;hellip;&lt;/p>
&lt;p>好吧，issue 关的是有道理的&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4mmuqm6n2j2098048a9z.jpg" alt="">&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（四）：简述核心配置 kustomization.yaml</title><link>https://guoxudong.io/post/kustomize-4/</link><pubDate>Thu, 23 May 2019 12:50:12 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-4/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在前面的文章中已经介绍了 kustomize 是什么，以及如何开始使用和如何简单的在 CI/CD 中使用，本篇文章将会介绍 kustomize 的核心文件 &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/zh/kustomization.yaml">kustomization.yaml&lt;/a>。&lt;/p>
&lt;p>另外，博主已经向 kustomize 贡献了中文文档，已被官方采纳，现在在 kustomize 中的 &lt;a href="https://github.com/kubernetes-sigs/kustomize/tree/master/docs/zh">&lt;code>docs/zh&lt;/code>&lt;/a> 目录中就可看到，翻译的不好的地方欢迎指正。同时也在 GitHub 上新建了一个 名为 &lt;a href="https://github.com/sunny0826/kustomize-lab">kustomize-lab&lt;/a> 的 repo 用于演示 kustomize 的各种用法及技巧，本文中介绍的内容也会同步更新到该 repo 中，欢迎 fork、star、PR。&lt;/p>
&lt;h2 id="kustomizationyaml-的作用">&lt;code>kustomization.yaml&lt;/code> 的作用&lt;/h2>
&lt;blockquote>
&lt;p>Kustomize 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。&lt;/p>
&lt;/blockquote>
&lt;p>有前面的文章&lt;a href="../kustomize-2">《使用 Kustomize 帮你管理 kubernetes 应用（二）： Kustomize 的使用方法》&lt;/a>中已经介绍了，每个 &lt;code>base&lt;/code> 或 &lt;code>overlays&lt;/code> 中都必须要有一个 &lt;code>kustomization.yaml&lt;/code>，这里我们看一下官方示例 &lt;code>helloWorld&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- configMap.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到该项目中包含3个 resources ， &lt;code>deployment.yaml&lt;/code>、&lt;code>service.yaml&lt;/code> 、 &lt;code>configMap.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
└── helloWorld
├── configMap.yaml
├── deployment.yaml
├── kustomization.yaml
└── service.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build helloWorld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就可以看到结果了：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">data&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">altGreeting&lt;/span>:&lt;span style="color:#666"> &lt;/span>Good Morning!&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enableRisky&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ConfigMap&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8666&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">protocol&lt;/span>:&lt;span style="color:#666"> &lt;/span>TCP&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8080&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deployment&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>LoadBalancer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">3&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deployment&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- --port=8080&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- --enableRiskyFeature=$(ENABLE_RISKY)&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ALT_GREETING&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMapKeyRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>altGreeting&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ENABLE_RISKY&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMapKeyRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>enableRisky&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>monopole/hello:1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8080&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的结果可以看大 kustomize 通过 &lt;code>kustomization.yaml&lt;/code> 将3个 resources 进行了处理，给三个 resources 添加了共同的 labels &lt;code>app: hello&lt;/code> 。这个示例展示了 &lt;code>kustomization.yaml&lt;/code> 的作用：&lt;strong>将不同的 resources 进行整合，同时为他们加上相同的配置&lt;/strong>。&lt;/p>
&lt;h2 id="进阶使用">进阶使用&lt;/h2>
&lt;p>上面只不过是一个简单的示例，下面将结合实际情况分享一些比较实用的用法&lt;/p>
&lt;h3 id="根据环境生成不同配置">根据环境生成不同配置&lt;/h3>
&lt;p>在实际的使用中，使用最多的就是为不同的环境配置不同的 &lt;code>deploy.yaml&lt;/code>，而使用 kustomize 可以把配置拆分为多个小的 patch ，然后通过 kustomize 来进行组合。而根据环境的不同，每个 patch 都可能不同，包括分配的资源、访问的方式、部署的节点都可以自由的定制。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
├── flask-env
│ ├── README.md
│ ├── base
│ │ ├── deployment.yaml
│ │ ├── kustomization.yaml
│ │ └── service.yaml
│ └── overlays
│ ├── dev
│ │ ├── healthcheck_patch.yaml
│ │ ├── kustomization.yaml
│ │ └── memorylimit_patch.yaml
│ └── prod
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里可以看到配置分为了 &lt;code>base&lt;/code> 和 &lt;code>overlays&lt;/code>， &lt;code>overlays&lt;/code> 则是继承了 &lt;code>base&lt;/code> 的配置，同时添加了诸如 healthcheck 和 memorylimit 等不同的配置，那么我们分别看一下 &lt;code>base&lt;/code> 和 &lt;code>overlays&lt;/code> 中 &lt;code>kustomization.yaml&lt;/code> 的内容&lt;/p>
&lt;ul>
&lt;li>base&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>base&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code> 中定义了一些基础配置&lt;/p>
&lt;ul>
&lt;li>overlays&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">bases&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- ../../base&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">patchesStrategicMerge&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- healthcheck_patch.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- memorylimit_patch.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>overlays&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code> 则是基于 &lt;code>base&lt;/code> 新增了一些个性化的配置，来达到生成不同环境的目的。&lt;/p>
&lt;p>执行命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build flask-env/overlays/dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>http&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterIP&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">0.0.3&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ENV&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/flask-python:latest&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>Always&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">livenessProbe&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">httpGet&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initialDelaySeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">periodSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">successThreshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeoutSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">20&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">readinessProbe&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">httpGet&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initialDelaySeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">periodSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">successThreshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeoutSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">20&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">limits&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#666"> &lt;/span>300m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">memory&lt;/span>:&lt;span style="color:#666"> &lt;/span>500Mi&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">requests&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#666"> &lt;/span>300m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">memory&lt;/span>:&lt;span style="color:#666"> &lt;/span>500Mi&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/localtime&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>host-time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullSecrets&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>registry-pull-secret&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/localtime&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>host-time&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到包括 &lt;code>replicas&lt;/code>、&lt;code>limits&lt;/code>、&lt;code>requests&lt;/code>、&lt;code>env&lt;/code> 等 dev 中个性的配置都已经出现在了生成的 yaml 中。由于篇幅有限，这里没有把所有的配置有罗列出来，需要的可以去 &lt;a href="https://github.com/sunny0826/kustomize-lab">GitHub&lt;/a> 上自取。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>上面所有的 &lt;code>kustomize build dir/&lt;/code> 都可以使用 &lt;code>kubectl apply -k dir/&lt;/code> 实现，但是需要 &lt;code>v14.0&lt;/code> 版以上的 &lt;code>kubectl&lt;/code>，也就是说，其实我们在集成到 CI/CD 中的时候，甚至都不需要用来 &lt;code>kustomize&lt;/code> 命令集，有 &lt;code>kubectl&lt;/code> 就够了。&lt;/p>
&lt;p>由于篇幅有限，这里没法吧所有 &lt;code>kustomization.yaml&lt;/code> 的用途都罗列出来，不过可以在官方文档中找到我提交的中文翻译版 &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/zh/kustomization.yaml">&lt;code>kustomization.yaml&lt;/code>&lt;/a>，可以直接去官方 GitHub 查看。同时 &lt;a href="https://github.com/sunny0826/kustomize-lab">kustomize-lab&lt;/a> 会持续更行，敬请关注。&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（三）：将 Kustomize 应用于 CI/CD</title><link>https://guoxudong.io/post/kustomize-3/</link><pubDate>Mon, 06 May 2019 16:46:28 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-3/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先明确软件版本，我这里使用的是 &lt;code>Jenkins ver. 2.121.3&lt;/code> ，这个版本比较老，其上安装 Kubernetes 插件所使用 &lt;code>kubectl&lt;/code> 版本也比较老，&lt;strong>无法使用&lt;/strong> Kustomize 的 yaml 文件需要的 &lt;code>apiVersion: apps/v1&lt;/code> ，直接使用生成 &lt;code>deploy.yaml&lt;/code> 文件会报错，所以这里选择了自己构建一个包含 &lt;code>kubectl&lt;/code> 和 &lt;code>kustomize&lt;/code> 的镜像，在镜像中使用 Kustomize 生成所需 yaml 文件并在 Kubernetes 上部署。&lt;/p>
&lt;h2 id="软件版本">软件版本&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>软件&lt;/th>
&lt;th>版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Jenkins&lt;/td>
&lt;td>&lt;a href="https://jenkins.io/">2.121.3&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubectl&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">v1.14.1&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kustomize&lt;/td>
&lt;td>&lt;a href="https://github.com/kubernetes-sigs/kustomize/releases">v2.0.3&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;ul>
&lt;li>Jenkins ：本篇使用 Jenkins 演示 CI/CD ，安装 Jenkins 就不在赘述，可以使用多种方法安装 Jenkins ，详细方法见&lt;a href="https://jenkins.io">官网&lt;/a>。同时。 CI/CD 的工具有很多，这里为了省事使用笔者现有的 Jenkins 进行演示，&lt;strong>不推荐&lt;/strong>使用同笔者一样的版本，请使用较新的版本；同时也可以使用其他 CI/CD 工具，这里推荐使用 &lt;a href="https://drone.io/">drone&lt;/a>。如果有更好的方案，欢迎交流，可以在&lt;a href="https://blog.maoxianplay.com/contact/">关于&lt;/a>中找到我的联系方式。&lt;/li>
&lt;li>&lt;code>kubectl&lt;/code> &amp;amp; &lt;code>kustomize&lt;/code> ：上文中提到了由于 Jenkins 版本比较老，所以这里笔者自己制作了包含二者的 docker 镜像，已上传 dockerhub ，需要自取： &lt;a href="https://hub.docker.com/r/guoxudongdocker/kubectl">&lt;code>guoxudongdocker/kubectl&lt;/code>&lt;/a>&lt;/li>
&lt;li>Web 应用：这里使用 flask 写了一个简单的 web 应用，用于演示，同样以上传 dockerhub &lt;a href="https://hub.docker.com/r/guoxudongdocker/flask-python">&lt;code>guoxudongdocker/flask-python&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;p>首先看一下目录结构，目录中包括 &lt;code>Dockerfile&lt;/code> 、 &lt;code>Jenkinsfile&lt;/code> 、 Kustomize 要使用的 &lt;code>deploy&lt;/code> 目录以及 web 应用目录。&lt;/p>
&lt;pre>&lt;code class="language-bush" data-lang="bush">.
├── Dockerfile
├── Jenkinsfile
├── app
│ ├── main.py
│ └── uwsgi.ini
└── deploy
├── base
│ ├── deployment.yaml
│ ├── kustomization.yaml
│ └── service.yaml
└── overlays
├── dev
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
└── prod
├── healthcheck_patch.yaml
├── kustomization.yaml
└── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;p>这里可以看到 overlays 总共有两个子目录 &lt;code>dev&lt;/code> 和 &lt;code>prod&lt;/code> ，分别代表不同环境，在不同的环境中，应用不同的配置。&lt;/p>
&lt;h2 id="jenkins-配置">Jenkins 配置&lt;/h2>
&lt;p>Jenkins 的配置相对简单，只需要新建一个 pipeline 类型的 job&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2rr57oixbj20tn0ogq6v.jpg" alt="WX20190506-180159">&lt;/p>
&lt;p>增加参数化构建，&lt;strong>注&lt;/strong>：参数化构建需要安装 Jenkins 插件&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g2rrcb5ic9j21470q7mz8.jpg" alt="WX20190506-180918">&lt;/p>
&lt;p>然后配置代码仓库即可&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g2sij1xlb2j214w0nw0uw.jpg" alt="WX20190507-094958">&lt;/p>
&lt;h2 id="pipeline">Pipeline&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">podTemplate(label: &lt;span style="color:#ed9d13">&amp;#39;jnlp-slave&amp;#39;&lt;/span>, cloud: &lt;span style="color:#ed9d13">&amp;#39;kubernetes&amp;#39;&lt;/span>,
containers: [
containerTemplate(
name: &lt;span style="color:#ed9d13">&amp;#39;jnlp&amp;#39;&lt;/span>,
image: &lt;span style="color:#ed9d13">&amp;#39;guoxudongdocker/jenkins-slave&amp;#39;&lt;/span>,
alwaysPullImage: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>
),
containerTemplate(name: &lt;span style="color:#ed9d13">&amp;#39;kubectl&amp;#39;&lt;/span>, image: &lt;span style="color:#ed9d13">&amp;#39;guoxudongdocker/kubectl:v1.14.1&amp;#39;&lt;/span>, command: &lt;span style="color:#ed9d13">&amp;#39;cat&amp;#39;&lt;/span>, ttyEnabled: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>),
],
nodeSelector:&lt;span style="color:#ed9d13">&amp;#39;ci=jenkins&amp;#39;&lt;/span>,
volumes: [
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/var/run/docker.sock&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/var/run/docker.sock&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/bin/docker&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/bin/docker&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/jdk&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/jdk&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/maven&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/maven&amp;#39;&lt;/span>),
secretVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/home/jenkins/.kube&amp;#39;&lt;/span>, secretName: &lt;span style="color:#ed9d13">&amp;#39;devops-ctl&amp;#39;&lt;/span>),
],
)
{
node(&lt;span style="color:#ed9d13">&amp;#34;jnlp-slave&amp;#34;&lt;/span>){
stage(&lt;span style="color:#ed9d13">&amp;#39;Git Checkout&amp;#39;&lt;/span>){
git branch: &lt;span style="color:#ed9d13">&amp;#39;${branch}&amp;#39;&lt;/span>, url: &lt;span style="color:#ed9d13">&amp;#39;https://github.com/sunny0826/flask-python.git&amp;#39;&lt;/span>
}
stage(&lt;span style="color:#ed9d13">&amp;#39;Build and Push Image&amp;#39;&lt;/span>){
withCredentials([usernamePassword(credentialsId: &lt;span style="color:#ed9d13">&amp;#39;docker-register&amp;#39;&lt;/span>, passwordVariable: &lt;span style="color:#ed9d13">&amp;#39;dockerPassword&amp;#39;&lt;/span>, usernameVariable: &lt;span style="color:#ed9d13">&amp;#39;dockerUser&amp;#39;&lt;/span>)]) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> docker login -u ${dockerUser} -p ${dockerPassword}
&lt;/span>&lt;span style="color:#ed9d13"> docker build -t guoxudongdocker/flask-python:${Tag} .
&lt;/span>&lt;span style="color:#ed9d13"> docker push guoxudongdocker/flask-python:${Tag}
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}
}
stage(&lt;span style="color:#ed9d13">&amp;#39;Deploy to K8s&amp;#39;&lt;/span>){
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> (&lt;span style="color:#ed9d13">&amp;#39;true&amp;#39;&lt;/span> == &lt;span style="color:#ed9d13">&amp;#34;${deploy}&amp;#34;&lt;/span>) {
container(&lt;span style="color:#ed9d13">&amp;#39;kubectl&amp;#39;&lt;/span>) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> cd deploy/base
&lt;/span>&lt;span style="color:#ed9d13"> kustomize edit set image guoxudongdocker/flask-python:${Tag}
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
echo &lt;span style="color:#ed9d13">&amp;#34;部署到 Kubernetes&amp;#34;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> (&lt;span style="color:#ed9d13">&amp;#39;prod&amp;#39;&lt;/span> == &lt;span style="color:#ed9d13">&amp;#34;${ENV}&amp;#34;&lt;/span>) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> # kustomize build deploy/overlays/prod | kubectl apply -f -
&lt;/span>&lt;span style="color:#ed9d13"> kubectl applt -k deploy/overlays/prod
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span> {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> # kustomize build deploy/overlays/dev | kubectl apply -f -
&lt;/span>&lt;span style="color:#ed9d13"> kubectl applt -k deploy/overlays/dev
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}
}
}&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span>{
echo &lt;span style="color:#ed9d13">&amp;#34;跳过Deploy to K8s&amp;#34;&lt;/span>
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里要注意几点：&lt;/p>
&lt;ul>
&lt;li>拉取 git 中的代码需要在 jenkins 中配置凭据。&lt;/li>
&lt;li>笔者的 jenkins 部署在 Kubernetes 上，要操作集群的话，需要将 kubeconfig 以 Secret 的形式挂载到 jenkins 所在 namespace。&lt;/li>
&lt;li>&lt;code>jenkins-slave&lt;/code> 需要 Java 环境运行，所以要将宿主机的 &lt;code>jdk&lt;/code> 挂载到 &lt;code>jenkins-slave&lt;/code> 中。&lt;/li>
&lt;li>同样的，宿主机中需要事先安装 &lt;code>docker&lt;/code>。&lt;/li>
&lt;li>&lt;code>docker-register&lt;/code> 为 dockerhub 的登录凭证，需要在 jenkins 中添加相应的凭证。&lt;/li>
&lt;/ul>
&lt;h2 id="演示">演示&lt;/h2>
&lt;h2 id="preview_only-false">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;h3 id="开始构建">开始构建&lt;/h3>
&lt;p>这里选择环境、分支，填入版本即可开始构建，**注意：**这里的版本将已 tag 的形式标记 docker 镜像。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65gy1g2sikst7tuj20ob0evabw.jpg" alt="WX20190507-095142">&lt;/p>
&lt;p>这里就可以看到构建成功了&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65ly1g2sjw9w22ej20v80km0w3.jpg" alt="WX20190507-103721">&lt;/p>
&lt;h3 id="查看结果">查看结果&lt;/h3>
&lt;p>这里为了方便（其实就是懒），我就不给这个服务添加 ingress 来从外部访问了，这里使用 &lt;a href="https://yq.aliyun.com/articles/690519">KT&lt;/a> 打通本地和 k8s 集群网络来进行调试。&lt;/p>
&lt;blockquote>
&lt;p>为了简化在Kubernetes下进行联调测试的复杂度，云效在SSH隧道网络的基础上并结合Kubernetes特性构建了一款面向开发者的辅助工具kt&lt;/p>
&lt;/blockquote>
&lt;p>这里看到这个服务正常启动了&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65ly1g2sk11dnzxj20av027jrn.jpg" alt="WX20190507-104154">&lt;/p>
&lt;h3 id="发布新版本">发布新版本&lt;/h3>
&lt;p>更新 web 服务并提交&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g2sk94v1c5j209702vwej.jpg" alt="WX20190507-104936">&lt;/p>
&lt;p>按照上面步骤在 jenkins 中重新构建，当然也可以配置钩子，每次代码提交后自动构建&lt;/p>
&lt;h3 id="查看查看新版本">查看查看新版本&lt;/h3>
&lt;p>同上面一样，在构建成功后查看服务是否更新&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2skfczaz4j20by01smx7.jpg" alt="WX20190507-105539">&lt;/p>
&lt;p>可以看到，版本已经更新了&lt;/p>
&lt;h3 id="发布生产环境">发布生产环境&lt;/h3>
&lt;p>这里模拟一下发布生产环境，假设生产环境是在 &lt;code>devops-prod&lt;/code> 的 namespace 中，这里只做演示之用，真正的生产环境中，可能存在不止一个 k8s 集群，这时需要修改 Jenkinsfile 中的 &lt;code>secretVolume&lt;/code> 来挂载不同 k8s 的 kubeconfig 来达到发布到不同集群的目的。当然，一般发布生产环境只需选择测试通过的镜像来发布即可，不需要在进行构建打包。&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g2skrnbjyuj20fc0bjmxp.jpg" alt="WX20190507-110730">&lt;/p>
&lt;h3 id="查看生产版本">查看生产版本&lt;/h3>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1g2skt3rp4yj20aq010glj.jpg" alt="WX20190507-110850">&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>上面的这些步骤简单的演示了使用 jenkins 进行 CI/CD 的流程，流程十分简单，这里仅供参考&lt;/p>
&lt;h2 id="kustomize-的作用">Kustomize 的作用&lt;/h2>
&lt;p>那么， Kustomize 在整个流程中又扮演了一个什么角色呢？&lt;/p>
&lt;h3 id="更新镜像">更新镜像&lt;/h3>
&lt;p>在 &lt;code>jenkinsfile&lt;/code> 中可以看到， kustomize 更新了基础配置的镜像版本，这里我们之前一直是使用 &lt;code>sed -i &amp;quot;s/#Tag/${Tag}/g&amp;quot; deploy.yaml&lt;/code> 来进行替换了，但是不同环境存在比较多的差异，需要替换的越来越多，导致 Jekninsfile 也越来越臃肿和难以维护。 kustomize 解决了这个问题。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize edit &lt;span style="color:#24909d">set&lt;/span> image guoxudongdocker/flask-python:&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">Tag&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="环境区分">环境区分&lt;/h3>
&lt;p>上面也提到了，不同的环境我们存在这许多差异，虽然看上去大致类似，但是很多细节都需要修改。这时 kustomize 就起到了很大的作用，不同环境相同的配置都放在 &lt;code>base&lt;/code> 中，而差异就可以在 &lt;code>overlays&lt;/code> 中实现。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
├── base
│ ├── deployment.yaml
│ ├── kustomization.yaml
│ └── service.yaml
└── overlays
├── dev
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
└── prod
├── healthcheck_patch.yaml
├── kustomization.yaml
└── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到， &lt;code>base&lt;/code> 中维护了项目共同的基础配置，如果有镜像版本等基础配置需要修改，可以使用 &lt;code>kustomize edit set image ...&lt;/code> 来直接修改基础配置，而真正不同环境，或者不同使用情况的配置则在 &lt;code>overlays&lt;/code> 中 以 patch 的形式添加配置。这里我的配置是 prod 环境部署的副本为2，同时给到的资源也更多，详情可以在 &lt;a href="https://github.com/sunny0826/flask-python">Github&lt;/a> 上查看。&lt;/p>
&lt;h3 id="与-kubectl-的集成">与 kubectl 的集成&lt;/h3>
&lt;p>在 jenkinsfile 中可以看到&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># kustomize build deploy/overlays/dev | kubectl apply -f -&lt;/span>
kubectl apply -k deploy/overlays/dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两条命令的执行效果是一样的，在 &lt;code>kubectl v1.14.0&lt;/code> 以上的版本中，已经集成了 kustomize ，可以直接使用 &lt;code>kubectl&lt;/code> 进行部署。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>这里只是对 kustomize 在 CI/CD 中简单应用的展示，只是一种比较简单和基础的使用，真正的 CI 流程要比这个复杂的多，这里只是为了演示 kustomize 的使用而临时搭建的。而 kustomize 还有很多黑科技的用法，将会在后续的文章中介绍。&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（二）： Kustomize 的使用方法</title><link>https://guoxudong.io/post/kustomize-2/</link><pubDate>Fri, 19 Apr 2019 16:05:02 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-2/</guid><description>
&lt;p>本文介绍使用和维护 Kustomize 的方法及步骤。&lt;/p>
&lt;h2 id="定制配置">定制配置&lt;/h2>
&lt;p>在这个工作流方式中，所有的配置文件（ YAML 资源）都为用户所有，存在于私有 repo 中。其他人是无法使用的。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2813d1ia7j20qo0f0dgk.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建一个目录用于版本控制&lt;/p>
&lt;p>我们希望将一个名为 &lt;em>&lt;strong>ldap&lt;/strong>&lt;/em> 的 Kubernetes 集群应用的配置保存在自己的 repo 中。
这里使用 &lt;code>git&lt;/code> 进行版本控制。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git init ~/ldap
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个 &lt;code>base&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/base
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个目录中创建并提交 &lt;code>kustomization.yaml&lt;/code> 文件和一组资源，例如 &lt;code>deployment.yaml&lt;/code> &lt;code>service.yaml&lt;/code> 等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 &lt;code>overlays&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/overlays/staging
mkdir -p ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个目录都需要一个 &lt;code>kustomization.yaml&lt;/code> 文件以及一个或多个 &lt;code>patch&lt;/code> ，例如 &lt;code>healthcheck_patch.yaml&lt;/code> &lt;code>memorylimit_patch.yaml&lt;/code> 等。。&lt;/p>
&lt;p>&lt;code>staging&lt;/code> 目录可能会使用一个 &lt;code>patch&lt;/code> ，用于在 &lt;code>configmap&lt;/code> 增加一个实验配置。&lt;/p>
&lt;p>&lt;code>production&lt;/code> 目录则可能会在 &lt;code>deployment&lt;/code> 中增加在副本数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 &lt;code>variants&lt;/code>&lt;/p>
&lt;p>运行 &lt;code>kustomize&lt;/code> ，将生成的配置用于 kubernetes 应用部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build ~/ldap/overlays/staging | kubectl apply -f -
kustomize build ~/ldap/overlays/production | kubectl apply -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubernetes 1.14 版本， &lt;code>kustomize&lt;/code> 已经集成到 &lt;code>kubectl&lt;/code> 命令中，成为了其一个子命令，可使用 &lt;code>kubectl&lt;/code> 来进行部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -k ~/ldap/overlays/staging
kubectl apply -k ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="使用现成的配置">使用现成的配置&lt;/h2>
&lt;p>在这个工作流方式中，可从别人的 repo 中 fork kustomize 配置，并根据自己的需求来配置。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g281xyfebej20qo0f0dgr.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过 fork/modify/rebase 等方式获得配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将其克隆为你自己的 &lt;code>base&lt;/code>&lt;/p>
&lt;p>在这个 &lt;code>bash&lt;/code> 目录维护在一个 repo 中，在这个例子使用 &lt;code>ladp&lt;/code> 的 repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir ~/ldap
git clone https://github.com/&lt;span style="color:#40ffff">$USER&lt;/span>/ldap ~/ldap/base
&lt;span style="color:#24909d">cd&lt;/span> ~/ldap/base
git remote add upstream git@github.com:&lt;span style="color:#40ffff">$USER&lt;/span>/ldap
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建 &lt;code>overlays&lt;/code>&lt;/p>
&lt;p>如上面的案例一样，创建并完善 &lt;code>overlays&lt;/code> 目录中的内容&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/overlays/staging
mkdir -p ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用户可以将 &lt;code>overlays&lt;/code> 维护在不同的 repo 中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 &lt;code>variants&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build ~/ldap/overlays/staging | kubectl apply -f -
kustomize build ~/ldap/overlays/production | kubectl apply -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubernetes 1.14 版本， &lt;code>kustomize&lt;/code> 已经集成到 &lt;code>kubectl&lt;/code> 命令中，成为了其一个子命令，可使用 &lt;code>kubectl&lt;/code> 来进行部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -k ~/ldap/overlays/staging
kubectl apply -k ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>（可选）更新 &lt;code>base&lt;/code>
用户可以定期从上游 repo 中 &lt;code>rebase&lt;/code> 他们的 &lt;code>base&lt;/code> 以保证及时更新&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">cd&lt;/span> ~/ldap/base
git fetch upstream
git rebase upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/workflows.md">kustomize workflows - github.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Post: Kustomize: 无需模板定制你的 kubernetes 配置</title><link>https://guoxudong.io/post/introducing-kustomize-template-free-configuration-customization-for-kubernetes/</link><pubDate>Mon, 15 Apr 2019 17:23:21 +0800</pubDate><guid>https://guoxudong.io/post/introducing-kustomize-template-free-configuration-customization-for-kubernetes/</guid><description>
&lt;blockquote>
&lt;p>作者：Jeff Regan (Google), Phil Wittrock (Google) 2018-05-29&lt;/p>
&lt;/blockquote>
&lt;p>如果你在运行 kubernetes 集群，你可能会拷贝一些包含 kubernetes API 对象的 YAML 文件，并且根据你的需求来修改这些文件，通过这些 YAML 文件来定义你的 kubernetes 配置。&lt;/p>
&lt;p>但是这种方法存在很难找到配置的源头并对其进行改进。今天 Google 宣布推出 &lt;strong>Kustomize&lt;/strong> ，一个作为 &lt;a href="https://github.com/kubernetes/community/tree/master/sig-cli">SIG-CLI&lt;/a> 子项目的命令行工具。这个工具提供了一个全新的、纯粹的声明式的方法来定制 kubernetes 配置，遵循并利用我们熟悉且精心设计的 Kubernetes API。&lt;/p>
&lt;p>有这样一个常见的场景，在互联网上可以看到别人的 CMS（content management system，内容管理系统）的 kubernetes 配置，这个配置是一组包括 Kubernetes API 对象的 YAML 描述文件。然后，在您自己公司的某个角落，您找到一个你非常了解的数据库，希望用它来该 CMS 的数据。&lt;/p>
&lt;p>你希望同时使用它们，此外，你希望自定义配置文件以便你的资源实例在集群中显示，并通过添加一个标签来区分在同一集群中做同样事情的其他资源。同时也希望为其配置适当的 CPU 、内存和副本数。&lt;/p>
&lt;p>此外，你还想要配置整个配置的多种变化：一个专门用于测试和实验的小服务实例（就计算资源而言），或更大的用于对外提供服务的生产级别的服务实例。同时，其他的团队也希望拥有他们自己的服务实例。&lt;/p>
&lt;h2 id="定制就是复用">定制就是复用&lt;/h2>
&lt;p>kubernetes 的配置并不是代码（是使用 YAML 描述的 API 对象，严格来说应该是数据），但是配置的生命周期与代码的生命周期有许多相似之处。&lt;/p>
&lt;p>你需要在版本控制中保留配置。所有者的配置不必与使用者的配置相同。配置可以作为整体的一部分。而用户希望为在不同的情况下复用这些配置。&lt;/p>
&lt;p>与代码复用相同，一种复用配置的方法是简单的全部拷贝并进行自定义。像代码一样，切断与源代码的联系使得从改进变的十分困难。许多团队和环境都使用这种方法，每个团队和环境都拥有自己的配置，这使得简单的升级变得十分棘手。&lt;/p>
&lt;p>另一种复用方法是将源代码抽象为参数化模板。使用一个通过执行脚本来替换所需参数的模板处理工具生成配置，通过为同一模板设置不同的值来达到复用的目的。而这种方式面临的问题是模板和参数文件并不在 kubernetes API 资源的规范中，这种方式必定是一种包装了 kubernetes API 的新东西、新语言。虽然这种方式很强大，但是也带来了学习成本和安装工具的成本。不同的团队需要不同的更改，因此几乎所有可以包含在 YAML 文件中的规范都会需要抽象成参数。&lt;/p>
&lt;h2 id="自定义配置的新选择">自定义配置的新选择&lt;/h2>
&lt;p>&lt;strong>kustomize&lt;/strong> 中工具的声明与规范是由名为 &lt;code>kustomization.yaml&lt;/code> 的文件定义。&lt;/p>
&lt;p>&lt;strong>kustomize&lt;/strong> 将会读取声明文件和 Kubernetes API 资源文件，将其组合然后将完整的资源进行标准化的输出。输出的文本可以被其他工具进一步处理，或者直接通过 &lt;strong>kubectl&lt;/strong> 应用于集群。&lt;/p>
&lt;p>例如，如果 &lt;code>kustomization.yaml&lt;/code> 文件包括：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- configMap.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>确保这三个文件与 &lt;code>kustomization.yaml&lt;/code> 位于同一目录下，然后运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将创建包含三个资源的 YAML 流，其中 &lt;code>app: hello&lt;/code> 为每个资源共同的标签。&lt;/p>
&lt;p>同样的，你可以使用 &lt;em>&lt;strong>commonAnnotations&lt;/strong>&lt;/em> 字段给所有资源添加注释， &lt;em>&lt;strong>namePrefix&lt;/strong>&lt;/em> 字段为所有的资源添加共同的前缀名。这些琐碎而有常见的定制只是一个开始。&lt;/p>
&lt;p>一个更常见的例子是，你需要为一组相同资源设置不同的参数。例如：开发、演示和生产的参数。&lt;/p>
&lt;p>为此，&lt;strong>Kustomize&lt;/strong> 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。两者都是由 kustomization 文件表示。基础（Base）声明了共享的内容（资源和常见的资源配置），Overlay 则声明了差异。&lt;/p>
&lt;p>这里是一个目录树，用于管理集群应用程序的 &lt;em>&lt;strong>演示&lt;/strong>&lt;/em> 和 &lt;em>&lt;strong>生产&lt;/strong>&lt;/em> 配置参数：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">someapp/
├── base/
│ ├── kustomization.yaml
│ ├── deployment.yaml
│ ├── configMap.yaml
│ └── service.yaml
└── overlays/
├── production/
│ └── kustomization.yaml
│ ├── replica_count.yaml
└── staging/
├── kustomization.yaml
└── cpu_count.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>someapp/base/kustomization.yaml&lt;/code> 文件指定了公共资源和常见自定义配置（例如，它们一些相同的标签，名称前缀和注释）。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>someapp/overlays/production/kustomization.yaml&lt;/code> 文件的内容可能是：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666"> &lt;/span>production&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">bases&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- ../../base&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">patches&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- replica_count.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 kustomization 指定了一个 &lt;em>&lt;strong>patch&lt;/strong>&lt;/em> 文件 &lt;code>replica_count.yaml&lt;/code> ，其内容可能是：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">100&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>patch&lt;/strong>&lt;/em> 是部分的资源声明，在这个例子中是 Deployment 的补丁 &lt;code>someapp/base/deployment.yaml&lt;/code> ，仅修改了副本数用以处理生产流量。&lt;/p>
&lt;p>该补丁不仅仅是一个无上下文 {parameter name，value} 元组。其作为部分 deployment spec，可以通过验证，即使与其余配置隔离读取，也具有明确的上下文和用途。&lt;/p>
&lt;p>要为生产环境创建资源，请运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build someapp/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果将作为一组完整资源打印到标准输出，并准备应用于集群。可以用类似的命令定义演示环境的配置。&lt;/p>
&lt;h2 id="综上所述">综上所述&lt;/h2>
&lt;p>使用 &lt;strong>kustomize&lt;/strong> ，您可以仅使用 Kubernetes API 资源文件就可以管理任意数量的 Kubernetes 定制配置。kustomize 的每个产物都是纯 YAML 的，每个都可以进行验证和运行的。&lt;strong>kustomize&lt;/strong> 鼓励通过 fork/modify/rebase 这样的&lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/workflows.md">工作流&lt;/a>来管理海量的应用描述文件。&lt;/p>
&lt;p>尝试&lt;a href="https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld">hello world&lt;/a>示例，开始使用 &lt;strong>kustomize&lt;/strong> 吧！有关的反馈与讨论，可以通过加入&lt;a href="https://groups.google.com/forum/#!forum/kustomize">邮件列表&lt;/a>或提 &lt;a href="https://github.com/kubernetes-sigs/kustomize/issues/new">issue&lt;/a>，欢迎提交PR。&lt;/p>
&lt;h2 id="译者按">译者按&lt;/h2>
&lt;p>随着 kubernetes 1.14 的发布，kustomize 被集成到 &lt;code>kubectl&lt;/code> 中，用户可以利用 &lt;code>kubectl apply -k dir/&lt;/code> 将指定目录的 &lt;code>kustomization.yaml&lt;/code> 提交到集群中。&lt;/p>
&lt;p>&lt;strong>原文链接&lt;/strong> &lt;a href="https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/">https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/&lt;/a>&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（一）：什么是 Kustomize ？</title><link>https://guoxudong.io/post/kustomize-1/</link><pubDate>Mon, 15 Apr 2019 13:32:59 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-1/</guid><description>
&lt;h2 id="初识-kustomize">初识 Kustomize&lt;/h2>
&lt;p>第一次听说 Kustomize 其实是在 kubernetes 1.14 发布时候，它被集成到 &lt;code>kubectl&lt;/code> 中，成为了一个子命令，但也只是扫了一眼，并没有深究。真正让我注意到它，并主动开始了解其功能和使用方法的，是张磊大神在云栖社区发表的一篇文章&lt;a href="https://yq.aliyun.com/articles/697883">《从Kubernetes 1.14 发布，看技术社区演进方向》&lt;/a>，他在文中是这么说的：&lt;/p>
&lt;blockquote>
&lt;p>Kustomize 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件，而不是像 Helm 那样只提供应用描述文件模板，然后通过字符替换（Templating）的方式来进行定制化。&lt;/p>
&lt;/blockquote>
&lt;p>这不正我在苦苦寻找的东西嘛！自从公司确定了应用容器化的方案，至今已有半年多了，这期间我们的服务一个接一个的实现了容器化，部署到了 kubernetes 集群中。kubernetes 集群也有原先了1个测试集群，几个节点，发展到了如今的多个集群，几十个节点。而在推进容器化的过程中，每个服务都对对应多个应用描述文件（ YAML 文件），而根据环境的不同，又配置了多套的应用描述文件。随着服务越部越多，应用描述文件更是呈爆炸式的增长。&lt;/p>
&lt;p>感谢 devops 文化，它是我不需要为每个应用去写 YAML 文件，各个应用的开发组承担了这一工作，我只需要为他们提供基础模板即可。但应用上线后出现的 OOM 、服务无法拉起等 YAML 文件配置有误导致的问题接踵而至，使得我必须要深入各个服务，为他们配置符合他们配置。虽然也使用了 &lt;code>helm&lt;/code> ，但是其只提供应用描述文件模板，在不同环境拉起一整套服务会节省很多时间，而像我们这种在指定环境快速迭代的服务，并不会减少很多时间。针对这种情况，我已经计划要自己开发一套更符合我们工作这种场景的应用管理服务，集成在我们自己的 devops 平台中。&lt;/p>
&lt;p>这时 Kustomize 出现了，我明锐的感觉到 Kustomize 可能就是解决我现阶段问题的一剂良药。&lt;/p>
&lt;h2 id="什么是-kustomize-">什么是 Kustomize ？&lt;/h2>
&lt;blockquote>
&lt;h4 id="kubernetes-native-configuration-management">Kubernetes native configuration management&lt;/h4>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. Now, built into &lt;code>kubectl&lt;/code> as &lt;code>apply -k&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>kustomize&lt;/code> 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。而其他用户可以完全不受影响的使用任何一个 Base YAML 或者任何一层生成出来的 YAML 。这使得每一个用户都可以通过类似fork/modify/rebase 这样 Git 风格的流程来管理海量的应用描述文件。这种 PATCH 的思想跟 Docker 镜像是非常相似的，它可以规避“字符替换”对应用描述文件的入侵，也不需要用户学习额外的 DSL 语法（比如 Lua）。&lt;/p>
&lt;p>而其成为 &lt;code>kubectl&lt;/code> 子命令则代表这 &lt;code>kubectl&lt;/code> 本身的插件机制的成熟，未来可能有更多的工具命令集成到 &lt;code>kubectl&lt;/code> 中。拿张磊大神的这张图不难看出，在 kubernetes 原生应用管理系统中，应用描述文件在整个应用管理体系中占据核心位置，通过应用描述文件可以组合和编排多种 kubernetes API 资源，kubernetes 通过控制器来保证集群中的资源与应用状态与描述文件完全一致。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g23cqlrodkj21bq0r8znk.jpg" alt="">&lt;/p>
&lt;p>Kustomize 不像 Helm 那样需要一整套独立的体系来完成管理应用，而是完全采用 kubernetes 的设计理念来完成管理应用的目的。同时使用起来也更加的得心应手。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://kustomize.io/">Kustomize - kustomize.io&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://yq.aliyun.com/articles/697883">从Kubernetes 1.14 发布，看技术社区演进方向 - yq.aliyun.com&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>