<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guo Xudong&#39;s Blog·郭旭东的博客 – 源码解析</title>
    <link>https://guoxudong.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
    <description>Recent content in 源码解析 on Guo Xudong&#39;s Blog·郭旭东的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 14 Oct 2020 10:28:06 +0800</lastBuildDate>
    
	  <atom:link href="https://guoxudong.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Post: 图解 K8S 源码 - QoS 篇</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-qos/</link>
      <pubDate>Wed, 14 Oct 2020 10:28:06 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-qos/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;日常使用 Kubernetes 时，时长会出现 Node 节点中的 Pod 被 OOMKill 掉的情况，但 Node 节点中 Pod 众多，为什么单单选中这个 Pod  Kill 掉呢？这里就引出了 QoS 的概念，本篇文章就会从源码的角度介绍 QoS 的分类、打分机制，并简单介绍不同 QoS 的本质区别。看看这个机制是如何保证运行在 Kubernetes 中服务质量的。&lt;/p&gt;
&lt;h2 id=&#34;qos&#34;&gt;QoS&lt;/h2&gt;
&lt;p&gt;QoS(Quality of Service) 即服务质量，是 Kubernetes 中的一种控制机制，其会对运行在 Kubernetes 中的 Pod 进行一个质量划分，根据 Pod 中 container 的 Limit 和 request 将 Pod 分为 &lt;code&gt;Guaranteed&lt;/code&gt;，&lt;code&gt;Burstable&lt;/code&gt;，&lt;code&gt;BestEffort&lt;/code&gt; 三类并对所有 Pod 进行一个打分。在资源尤其是内存这种不可压缩资源不够时，为保证整体质量的稳定，Kubernetes 就会根据 QoS 的不同优先级，对 Pod 进行资源回收。这也是有时集群中的 Pod 突然被 kill 掉的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gjotxqvm4uj20mr0aw78n.jpg&#34; alt=&#34;Qos&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;qos-分类&#34;&gt;QoS 分类&lt;/h3&gt;
&lt;p&gt;以下代码用来获取 Pod 的 QoS 类，用于区分不同 Pod 的 QoS。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// github/kubernetes/pkg/apis/core/v1/helper/qos/qos.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GetPodQOS&lt;/span&gt;(pod &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v1.Pod) v1.PodQOSClass {
  requests &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; v1.ResourceList{}
  limits &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; v1.ResourceList{}
  zeroQuantity &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; resource.&lt;span style=&#34;color:#50fa7b&#34;&gt;MustParse&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;)
  isGuaranteed &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
  allContainers &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []v1.Container{}
  allContainers = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(allContainers, pod.Spec.Containers&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#6272a4&#34;&gt;// InitContainers 容器也会被加入 QoS 的计算中
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  allContainers = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(allContainers, pod.Spec.InitContainers&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, container &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; allContainers {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 遍历 requests 中的 CPU 和 memory 值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; name, quantity &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; container.Resources.Requests {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#50fa7b&#34;&gt;isSupportedQoSComputeResource&lt;/span&gt;(name) {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;
      }
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; quantity.&lt;span style=&#34;color:#50fa7b&#34;&gt;Cmp&lt;/span&gt;(zeroQuantity) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; {
        delta &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; quantity.&lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopy&lt;/span&gt;()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; _, exists &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; requests[name]; !exists {
          requests[name] = delta
        } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
          delta.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(requests[name])
          requests[name] = delta
        }
      }
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;// 遍历 limits 中的 CPU 和 memory 值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    qosLimitsFound &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sets.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewString&lt;/span&gt;()
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; name, quantity &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; container.Resources.Limits {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#50fa7b&#34;&gt;isSupportedQoSComputeResource&lt;/span&gt;(name) {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;
      }
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; quantity.&lt;span style=&#34;color:#50fa7b&#34;&gt;Cmp&lt;/span&gt;(zeroQuantity) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; {
        qosLimitsFound.&lt;span style=&#34;color:#50fa7b&#34;&gt;Insert&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(name))
        delta &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; quantity.&lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopy&lt;/span&gt;()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; _, exists &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; limits[name]; !exists {
          limits[name] = delta
        } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
          delta.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(limits[name])
          limits[name] = delta
        }
      }
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 判断是否同时设置了 limits 和 requests，如果没有则不是 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !qosLimitsFound.&lt;span style=&#34;color:#50fa7b&#34;&gt;HasAll&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(v1.ResourceMemory), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(v1.ResourceCPU)) {
      isGuaranteed = &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
    }
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 如果 requests 和 limits 都没有设置，则为 BestEffort
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(requests) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(limits) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; v1.PodQOSBestEffort
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 检查所有资源的 requests 和 limits 是否都相等
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; isGuaranteed {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; name, req &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; requests {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; lim, exists &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; limits[name]; !exists &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; lim.&lt;span style=&#34;color:#50fa7b&#34;&gt;Cmp&lt;/span&gt;(req) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
        isGuaranteed = &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;
      }
    }
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 都设置了 requests 和 limits，则为 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; isGuaranteed &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(requests) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(limits) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; v1.PodQOSGuaranteed
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; v1.PodQOSBurstable
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;qos-打分&#34;&gt;QoS 打分&lt;/h3&gt;
&lt;p&gt;QoS 会根据不同的分类进行 OOMScore 打分，当宿主机上内存不足时，系统会优先 kill 掉 OOMScore 分数高的进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65ly1gjoqlfe8cgj20mr0pcqmy.jpg&#34; alt=&#34;QoS 打分&#34;&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是不久之前 &lt;code&gt;guaranteedOOMScoreAdj&lt;/code&gt; 的值还是 &lt;code&gt;-998&lt;/code&gt;，今年 9 月 22 日才合并 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/pull/71269&#34;&gt;PR&lt;/a&gt; 将其修改为 &lt;code&gt;-997&lt;/code&gt;，而修改的 PR 及 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/72294&#34;&gt;相关 ISSUE&lt;/a&gt; 在 2018 年就已经提出了，感兴趣的同学可以去看看。这里附上源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// github/kubernetes/pkg/kubelet/qos/policy.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; (
  &lt;span style=&#34;color:#6272a4&#34;&gt;// KubeletOOMScoreAdj is the OOM score adjustment for Kubelet
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  KubeletOOMScoreAdj &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
  &lt;span style=&#34;color:#6272a4&#34;&gt;// KubeProxyOOMScoreAdj is the OOM score adjustment for kube-proxy
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  KubeProxyOOMScoreAdj  &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;
  guaranteedOOMScoreAdj &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;997&lt;/span&gt;
  besteffortOOMScoreAdj &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GetContainerOOMScoreAdjust&lt;/span&gt;(pod &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v1.Pod, container &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v1.Container, memoryCapacity &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 高优先级 Pod 直接返回 guaranteedOOMScoreAdj
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; types.&lt;span style=&#34;color:#50fa7b&#34;&gt;IsCriticalPod&lt;/span&gt;(pod) {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Critical pods should be the last to get killed.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; guaranteedOOMScoreAdj
  }

  &lt;span style=&#34;color:#6272a4&#34;&gt;// 根据 QoS 等级，返回 guaranteedOOMScoreAdj 或 besteffortOOMScoreAdj 的分数，这里只处理 Guaranteed 与 BestEffort
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; v1qos.&lt;span style=&#34;color:#50fa7b&#34;&gt;GetPodQOS&lt;/span&gt;(pod) {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; v1.PodQOSGuaranteed:
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Guaranteed containers should be the last to get killed.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; guaranteedOOMScoreAdj
  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; v1.PodQOSBestEffort:
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; besteffortOOMScoreAdj
  }

  memoryRequest &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; container.Resources.Requests.&lt;span style=&#34;color:#50fa7b&#34;&gt;Memory&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Value&lt;/span&gt;()
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 内存占用越少，分数越高
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  oomScoreAdjust &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;memoryRequest)&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;memoryCapacity
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 保证 Burstable 分数高于 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(oomScoreAdjust) &amp;lt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; guaranteedOOMScoreAdj) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; guaranteedOOMScoreAdj)
  }
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 保证 Burstable 分数低于 BestEffect
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(oomScoreAdjust) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; besteffortOOMScoreAdj {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(oomScoreAdjust &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(oomScoreAdjust)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;qos-的本质区别&#34;&gt;QoS 的本质区别&lt;/h3&gt;
&lt;p&gt;三种 QoS 在调度和实现都存在着区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度时，调度器只会根据 request 值进行调度，这也就解释了有些 Node 节点 Resource Limit 超出 100% 的情况&lt;/li&gt;
&lt;li&gt;当 OOM 时，系统会根据 &lt;code&gt;oom_score&lt;/code&gt; 值来选择优先 kill 掉的进程，分数越高越先被 kill 掉。&lt;code&gt;oom_score&lt;/code&gt; 由系统计算所得，用户是不能设置的。但是如上文所述，而根据 QoS 的类型，kubelet 会计算出 &lt;code&gt;oom_score_adj&lt;/code&gt; 的值，通过 &lt;code&gt;oom_score_adj&lt;/code&gt; 来调整 &lt;code&gt;oom_score&lt;/code&gt; 的分数，从而影响 OOM 被 kill 进程的优先级。&lt;/li&gt;
&lt;li&gt;对于资源的限制，是由 CGroup 来完成的。kubelet 会为三种 QoS 分别创建 QoS level CGroup：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Guaranteed&lt;/code&gt; Pod Qos 的 CGroup level 会直接创建在 &lt;code&gt;RootCgroup/kubepods&lt;/code&gt; 下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Burstable&lt;/code&gt; Pod Qos 的创建在 &lt;code&gt;RootCgroup/kubepods/burstable&lt;/code&gt; 下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BestEffort&lt;/code&gt; Pod Qos 的创建在 &lt;code&gt;RootCgroup/kubepods/BestEffort&lt;/code&gt;下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而在 Pod level CGroup 中还会创建 Container level CGroup，其结构如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1gjoxdsmfs0j20mr0e8tjg.jpg&#34; alt=&#34;Qos-CGroup&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文我们讨论了 Kubernetes 中 QoS 机制的分类、打分及其本质，除了这些 QoS 的实现 &lt;code&gt;QOSContainerManager&lt;/code&gt; 中还有三种 QoS 以宿主机上 allocatable 资源量为基础为 Pod 分配资源，并通过多个 level cgroup 进行层层限制的逻辑，由于篇幅有限，就不做详细介绍了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 图解 K8S 源码 - Informer 篇（上）</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-informer/</link>
      <pubDate>Mon, 12 Oct 2020 15:21:14 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-informer/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;众所周知，在 Kubernetes 中各组件是通过 HTTP 协议进行通信的，而组件间的通信也并没有依赖任何中间件，那么如何保证消息的实时性、可靠性、顺序性呢？&lt;strong&gt;Informer 机制&lt;/strong&gt;很好的解决了这个问题。Kubernetes 中各组件与 API Server 的通信都是通过 client-go 的 informer 机制来保证和完成的。&lt;/p&gt;
&lt;h2 id=&#34;控制器模式&#34;&gt;控制器模式&lt;/h2&gt;
&lt;p&gt;控制器模式最核心的就是控制循环的概念。而 Informer 机制，也就是控制循环中负责观察系统的传感器（Sensor）主要由 Reflector、Informer、Indexer 三个组件构成。其与各种资源的 Controller 相配合，就可以完成完整的控制循环，不断的使系统向终态趋近 &lt;code&gt;status&lt;/code&gt; -&amp;gt; &lt;code&gt;spec&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gjme5nhuykj20mr0fmn6j.jpg&#34; alt=&#34;informer 机制&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;informer&#34;&gt;Informer&lt;/h3&gt;
&lt;p&gt;所谓 informer，其实就是一个带有本地缓存和索引机制的，可以注册 EventHandler 的 client，目的是为了减轻频繁通信 API Server 的压力而抽取出来的一层 cache，客户端对 API Server 数据的&lt;strong&gt;读取&lt;/strong&gt;和&lt;strong&gt;监测&lt;/strong&gt;操作都通过本地的 informer 来进行。&lt;/p&gt;
&lt;p&gt;每一个 Kubernetes 资源上都实现了 informer 机制，每一个 informer 上都会实现 &lt;code&gt;Informer()&lt;/code&gt; 和 &lt;code&gt;Lister()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// client-go/informers/core/v1/pod.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; PodInformer &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
  &lt;span style=&#34;color:#50fa7b&#34;&gt;Informer&lt;/span&gt;() cache.SharedIndexInformer
  &lt;span style=&#34;color:#50fa7b&#34;&gt;Lister&lt;/span&gt;() v1.PodLister
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义不同资源的 Informer，允许监控不同资源事件。同时为了避免同一资源的 Informer 被实例化多次，而每个 Informer 都会使用一个 Reflector，这样会运行过多相同的 ListAndWatch，从而加重 API Server 的压力，Informer 还提供了共享机制，多个 Informer 可以共享一个 Reflector，从而达到节约资源的目的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// client-go/informers/factory.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; sharedInformerFactory &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
  client           kubernetes.Interface
  namespace        &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
  tweakListOptions internalinterfaces.TweakListOptionsFunc
  lock             sync.Mutex
  defaultResync    time.Duration
  customResync     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[reflect.Type]time.Duration

  informers &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[reflect.Type]cache.SharedIndexInformer
  &lt;span style=&#34;color:#6272a4&#34;&gt;// startedInformers is used for tracking which informers have been started.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// This allows Start() to be called multiple times safely.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  startedInformers &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[reflect.Type]&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;
}
&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;// InternalInformerFor returns the SharedIndexInformer for obj using an internal client.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sharedInformerFactory) &lt;span style=&#34;color:#50fa7b&#34;&gt;InformerFor&lt;/span&gt;(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
  f.lock.&lt;span style=&#34;color:#50fa7b&#34;&gt;Lock&lt;/span&gt;()
  &lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; f.lock.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unlock&lt;/span&gt;()

  informerType &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; reflect.&lt;span style=&#34;color:#50fa7b&#34;&gt;TypeOf&lt;/span&gt;(obj)
  informer, exists &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; f.informers[informerType]
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; exists {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; informer
  }

  resyncPeriod, exists &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; f.customResync[informerType]
  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !exists {
    resyncPeriod = f.defaultResync
  }

  informer = &lt;span style=&#34;color:#50fa7b&#34;&gt;newFunc&lt;/span&gt;(f.client, resyncPeriod)
  f.informers[informerType] = informer

  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; informer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 map 数据结构实现共享 Informer 机制，在 &lt;code&gt;InformerFor()&lt;/code&gt; 函数添加了不同资源的 Informer，在添加过程中如果已经存在同类型的 Informer，则返回当前 Informer，不再继续添加。如下就是 &lt;code&gt;deployment&lt;/code&gt; 的 &lt;code&gt;Informer()&lt;/code&gt; 方法，其中就调用了 &lt;code&gt;InformerFor()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// client-go/informers/apps/v1beta1/deployment.go
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;deploymentInformer) &lt;span style=&#34;color:#50fa7b&#34;&gt;Informer&lt;/span&gt;() cache.SharedIndexInformer {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; f.factory.&lt;span style=&#34;color:#50fa7b&#34;&gt;InformerFor&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;appsv1beta1.Deployment{}, f.defaultInformer)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reflector&#34;&gt;Reflector&lt;/h3&gt;
&lt;p&gt;Reflector 用于监测制定 Kubernetes 资源，当资源发生变化时，触发相应的事件，如：Added（资源添加）事件、Update（资源更新）事件、Delete（资源删除）事件，并将事件及资源名称添加到 DeltaFIFO 中。&lt;/p&gt;
&lt;h4 id=&#34;listandwatch&#34;&gt;ListAndWatch&lt;/h4&gt;
&lt;p&gt;在实例化 Reflector 时，必须传入 ListerWatcher 接口对象，其拥有 &lt;code&gt;List()&lt;/code&gt; 和 &lt;code&gt;Watch()&lt;/code&gt; 方法。Reflector 通过 &lt;code&gt;Run()&lt;/code&gt; 方法启动监控并处理事件。在程序第一次运行时，会执行 &lt;code&gt;List()&lt;/code&gt; 方法将所有的对象数据存入 DeltaFIFO 中，每次 Controller 重启，都会执行 &lt;code&gt;List()&lt;/code&gt; 方法；同时，Reflector 实例中还有 &lt;code&gt;resyncPeriod&lt;/code&gt; 参数，如果该参数不为 0，则会根据该参数值周期性的执行 &lt;code&gt;List()&lt;/code&gt; 操作，此时这些资源对象会被设置为 Sync 操作类型（不同于 Add、Update 等）。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;Watch()&lt;/code&gt; 则会根据 Reflector 实例 &lt;code&gt;period&lt;/code&gt; 参数，周期性的监控资源对象是否有变更。如果发生变更，则通过 &lt;code&gt;r.watchHandler&lt;/code&gt; 处理变更事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1gjmkxmiboej20mr0uwh9f.jpg&#34; alt=&#34;Reflector&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;deltafifo&#34;&gt;DeltaFIFO&lt;/h4&gt;
&lt;p&gt;DeltaFIFO 顾名思义，Delta 是一个资源对象存储，可以保持操作类型（Add、Update、Delete、Sync等）；而 FIFO 则是一个先进先出的队列。其是一个生产者与消费者的队列，其中 Reflector 是生产者，消费者则调用 &lt;code&gt;Pop()&lt;/code&gt; 方法取出最早进入队列的对象数据。&lt;/p&gt;
&lt;h3 id=&#34;indexer&#34;&gt;Indexer&lt;/h3&gt;
&lt;p&gt;Indexer 是 client-go 用来存储资源对象并自带索引功能的本地存储，Reflector 从 DeltaFIFO 中将消费出来的资源对象存储至 Indexer。同时 Indexer 中的数据与 Etcd 中的数据保持完全一致。client-go 可以很方便的从本次存储中读取相应的资源对象数据，而无需每次都从远程 Etcd 集群中读取，从而降低了 API Server 和 Etcd 集群的压力。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;要了解 Kubernetes，Informer 是绕不过的内容，其在 Kubernetes 中非常重要。本文主要图解了 Informer 机制以及 Reflector，由于篇幅有限，DeltaFIFO，Indexer 等概念只做了简单介绍，这些内容会在后续的文章中进行详解，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《Kubernetes 源码剖析 - 郑东旭著》&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 图解 K8S 源码 - Deployment Controller 篇</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-deployment-controller/</link>
      <pubDate>Mon, 28 Sep 2020 15:00:38 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-deployment-controller/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Kubernetes 最为云原生领域的绝对 leader，可以说是当下最著名开源项目之一，拥有着庞大的贡献者群体以及更庞大的用户群体。作为使用 Go 语言开发的明星项目，其源码也是非常有趣的。笔者在研究 Kubernetes 源码时，常常发现很多让人眼前一亮的设计和拍案叫绝的逻辑。但由于 Kubernetes 的代码量十分庞大，函数间的调用也十分复杂，在阅读源码时常常被绕的找不着北，正好手边有一本《图解算法》，于是就萌生了图解 Kubernetes 源码的想法。本文为本系列第一篇文章，尝试使用流程图来分析 Kubernetes Controller Manager 中 的 Deployment Controller 逻辑。&lt;/p&gt;
&lt;h2 id=&#34;deployment-controller&#34;&gt;Deployment Controller&lt;/h2&gt;
&lt;p&gt;Deployment Controller 是 Kube-Controller-Manager 中最常用的 Controller 之一管理 Deployment 资源。而 Deployment 的本质就是通过管理 ReplicaSet 和 Pod 在 Kubernetes 集群中部署 &lt;strong&gt;无状态&lt;/strong&gt; Workload。&lt;/p&gt;
&lt;h3 id=&#34;deploymentreplicaset-和-pod&#34;&gt;Deployment、ReplicaSet 和 Pod&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gj6twofn24j20es09s43a.jpg&#34; alt=&#34;deployment-controller&#34;&gt;&lt;/p&gt;
&lt;p&gt;Deployment 通过控制 ReplicaSet，ReplicaSet 再控制 Pod，最终由 Controller 驱动达到期望状态。在控制器模式下，每次操作对象都会触发一次事件，然后 controller 会进行一次 syncLoop 操作，controller 是通过 informer 监听事件以及进行 ListWatch 操作的。&lt;/p&gt;
&lt;p&gt;Deployment Controller 会监听 DeploymentInformer、ReplicaSetInformer、PodInformer 三种资源。这三种资源变化时，都会触发 syncLoop 也就是下面代码 &lt;code&gt;dc.Run()&lt;/code&gt; 中的 &lt;code&gt;dc.syncDeployment&lt;/code&gt; 操作，来进行状态更新逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;startDeploymentController&lt;/span&gt;(ctx ControllerContext) (http.Handler, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !ctx.AvailableResources[schema.GroupVersionResource{Group: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apps&amp;#34;&lt;/span&gt;, Version: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;, Resource: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;deployments&amp;#34;&lt;/span&gt;}] {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
    }
    dc, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; deployment.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewDeploymentController&lt;/span&gt;(
      ctx.InformerFactory.&lt;span style=&#34;color:#50fa7b&#34;&gt;Apps&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Deployments&lt;/span&gt;(),
      ctx.InformerFactory.&lt;span style=&#34;color:#50fa7b&#34;&gt;Apps&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;ReplicaSets&lt;/span&gt;(),
      ctx.InformerFactory.&lt;span style=&#34;color:#50fa7b&#34;&gt;Core&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Pods&lt;/span&gt;(),
      ctx.ClientBuilder.&lt;span style=&#34;color:#50fa7b&#34;&gt;ClientOrDie&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;deployment-controller&amp;#34;&lt;/span&gt;),
    )
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error creating Deployment controller: %v&amp;#34;&lt;/span&gt;, err)
    }
    &lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; dc.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(ctx.ComponentConfig.DeploymentController.ConcurrentDeploymentSyncs), ctx.Stop)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deployment-controller-启动流程&#34;&gt;Deployment Controller 启动流程&lt;/h3&gt;
&lt;p&gt;那么先从启动逻辑开始，Kube-Controller-Manager 中所有的 Controller 的启动逻辑都差不多，都是在 &lt;code&gt;Run()&lt;/code&gt; 方法中完成初始化并启动，&lt;code&gt;NewControllerInitializers&lt;/code&gt; 会初始化所有 Controller，而 &lt;code&gt;startXXXXController()&lt;/code&gt; 则会启动对应的 Controller。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gj6rw439nrj20mh12o7wh.jpg&#34; alt=&#34;deployment-controller-启动流程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;核心逻辑-synchandler&#34;&gt;核心逻辑 syncHandler&lt;/h3&gt;
&lt;p&gt;Deployment Controller 在初始化时指定了 &lt;code&gt;dc.syncHandler = dc.syncDeployment&lt;/code&gt;，所以核心逻辑就是围绕 &lt;code&gt;syncDeployment()&lt;/code&gt; 来展开的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gj6s4tfuynj20my1zq7wi.jpg&#34; alt=&#34;deployment-controller-核心逻辑&#34;&gt;&lt;/p&gt;
&lt;p&gt;从源码可以看出，删除、暂停、回滚、扩缩容、更新策略的优先级为 &lt;code&gt;delete &amp;gt; pause &amp;gt; rollback &amp;gt; scale &amp;gt; rollout&lt;/code&gt;。而最终都不是直接更新或修改对应资源，而是通过 &lt;code&gt;dc.client.AppsV1().Deployments().UpdateStatus()&lt;/code&gt; 更新 Deployment Status。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;以上就是 Deployment Controller 代码逻辑，通过流程图，希望能描述的更加清晰。因为是第一次尝试图解，可能有遗漏和不足，欢迎留言指正。图解 Kubernetes 源码将作为一个系列继续下去，后续会带来更多的源码图解。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
