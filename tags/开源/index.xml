<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guo Xudong&#39;s Blog·郭旭东的博客 – 开源</title>
    <link>https://guoxudong.io/tags/%E5%BC%80%E6%BA%90/</link>
    <description>Recent content in 开源 on Guo Xudong&#39;s Blog·郭旭东的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 29 Mar 2021 10:16:42 +0800</lastBuildDate>
    
	  <atom:link href="https://guoxudong.io/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Post: 如何选择开源许可证</title>
      <link>https://guoxudong.io/post/open-source-license/</link>
      <pubDate>Mon, 29 Mar 2021 10:16:42 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/open-source-license/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近有同事需要在自己的项目中使用到开源软件，但是不知道是否存在风险，讨论中我发现大家对开源许可证好像都不是很了解，对如何选择开源许可证更是摸不着头脑，许可证的选择往往是跟着一些知名项目的选择进行选择。本文就来讲解一下开源许可证也就是我们常说的 License 都有哪些需要了解的知识。&lt;/p&gt;
&lt;h2 id=&#34;什么是开源许可证协议&#34;&gt;什么是开源许可证/协议？&lt;/h2&gt;
&lt;p&gt;首先要明确的是开源许可证是一种&lt;strong&gt;附带条件的合同/许可&lt;/strong&gt;，是&lt;strong&gt;具有法律效力的文件&lt;/strong&gt;。是作者自由意识的的体现，也就是说作者可以自行设计，其中要包括&lt;strong&gt;违反开源许可证的风险&lt;/strong&gt;，如停止侵权、损害赔偿、消除影响等。&lt;/p&gt;
&lt;p&gt;也就是说，如果你愿意，可以自行设计开源许可证/协议。&lt;/p&gt;
&lt;h3 id=&#34;开源许可证文本范式&#34;&gt;开源许可证文本范式&lt;/h3&gt;
&lt;p&gt;开源许可证主要包含三部分：&lt;strong&gt;被许可人权利&lt;/strong&gt;、&lt;strong&gt;被许可人义务&lt;/strong&gt;、&lt;strong&gt;被许可人权利限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;strong&gt;被许可人权利&lt;/strong&gt;是“贡献”内容的“作者”授权任何“接收者”对其所“贡献”内容进行许可范围内的操作，如允许代码的自由复制/修改/分发、授予专利许可、禁止滥用商标等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被许可人义务&lt;/strong&gt;是“接收者”接受并履行“作者”设置的一些特定条件，如（再分发时）保留署名、注明修改、衍生开源、相同许可证等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被许可人权利限制&lt;/strong&gt;是所有“贡献”内容均在免责声明下分发，这是为了避免原作者的法律风险。&lt;/p&gt;
&lt;h3 id=&#34;开源许可证类似&#34;&gt;开源许可证类似&lt;/h3&gt;
&lt;p&gt;开源许可证主要分为三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格型/强著佐权（Copyleft）- 衍生作品必须全部使用相同许可证（开源），如 GPL v2、AGPL&lt;/li&gt;
&lt;li&gt;弱著佐权（Weak Copyleft） - 允许衍生作品部分使用其他许可证（开源），如 LGPL&lt;/li&gt;
&lt;li&gt;宽松型（Permissive） - 未限制衍生作品使用其他许可证（开源或闭源），如 BSD、MIT、Apache 2.0、木兰&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源许可证的兼容性&#34;&gt;开源许可证的兼容性&lt;/h2&gt;
&lt;p&gt;如我在我的开源项目中用到了别人开源的库，这个时候就要看开源许可证的兼容性了，如果无法同时满足各部分代码的许可证要求，则不可能“合法地”分发，必然引发知识产权侵权风险。&lt;/p&gt;
&lt;p&gt;其中兼容性一般具有以下规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宽松型许可证通常互相兼容&lt;/li&gt;
&lt;li&gt;宽松型许可证/弱著佐权许可证通常可以单向兼容严格型许可证&lt;/li&gt;
&lt;li&gt;严格型许可证往往互不兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gp0llx9xobj21o00r6hdt.jpg&#34; alt=&#34;开源许可证兼容性列表&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：《开源许可证兼容性指南》- 云计算开源产业联盟&lt;/p&gt;
&lt;h2 id=&#34;开源许可证的选择&#34;&gt;开源许可证的选择&lt;/h2&gt;
&lt;p&gt;随着开源产业的扩张，越来多的人参与其中，而宽松型的开源许可证（如 MIT、Apache 2.0）也被越来越的开源项目选择，如无特殊需要，笔者建议尽量选择宽松型的开源许可证，同时这也是整个开源产业的趋势。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gp0lqc78h3j20zl0k075j.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a href=&#34;https://resources.whitesourcesoftware.com/blog-whitesource/open-source-licenses-trends-and-predictions&#34;&gt;Open Source Licenses in 2021: Trends and Predictions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外再附上一张网上流传很广的图，可以更直观的了解如何选择开源许可证：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gp0lcmehjqj20m80dw3zd.jpg&#34; alt=&#34;图解分析&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;开源不等于免费、不等于没有商业模式、不等于没有争议，较之闭源，开源的优势在于：公开带来信任、自由带来高效、免费带来市场。越来越多开源公司的成功以及多种开源商业模式的出现也大大丰富了整个开源世界，吸引越来越多的开发者参与到开源活动中。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 手把手教你免费获取正版 Jetbrains 全家桶 License</title>
      <link>https://guoxudong.io/post/jetbrains-opensource-free-license/</link>
      <pubDate>Tue, 15 Dec 2020 14:50:50 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/jetbrains-opensource-free-license/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;最近 Goland 发布了最新的 2020.3 版本，新增时间包的支持，通过自动补全快捷键(Ctrl+Space)就可以快速补全时间占位符 &lt;code&gt;2006-01-02 02-15-05&lt;/code&gt; 了，再也不用每次都点进源码里去找了。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;Jetbrains 推出的一些列 IDE 被称为 Jetbrains 全家桶，以其极好的用户体验，帅气的 UI 界面和离谱的价格在程序员中拥有极高的知名度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/mw690/ad5fbf65gy1glokceqqkbj21zs0ue0y8.jpg&#34; alt=&#34;全家桶价格&#34;&gt;&lt;/p&gt;
&lt;p&gt;本篇文章就手把手的教大家免费获得正版的 Jetbrains 全家桶 License。&lt;/p&gt;
&lt;h2 id=&#34;初次申请&#34;&gt;初次申请&lt;/h2&gt;
&lt;p&gt;JetBrains 通过为开源项目核心项目贡献者免费提供一套一流的开发者工具来支持非商业开源项目。&lt;/p&gt;
&lt;h3 id=&#34;申请要求&#34;&gt;申请要求&lt;/h3&gt;
&lt;p&gt;开源项目需要满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解&lt;a href=&#34;https://opensource.org/docs/osd&#34;&gt;开源&lt;/a&gt;定义。&lt;/li&gt;
&lt;li&gt;正在积极开发，例如，在过去 3 个月内定期提交新代码。&lt;/li&gt;
&lt;li&gt;不提供开源软件的付费版本，也不提供与开源项目相关的任何商业服务（例如付费支持、咨询等）。&lt;/li&gt;
&lt;li&gt;未获得商业公司或组织（NGO、教育、研究或政府组织）的资助。&lt;/li&gt;
&lt;li&gt;不为他们的核心项目开发者支付工资。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者需要满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;许可证仅提供给项目负责人和核心项目提交者。&lt;/li&gt;
&lt;li&gt;许可证有效期为一年，之后如果您的项目仍符合支持计划要求，也可以续订。&lt;/li&gt;
&lt;li&gt;您只能将免费许可证用于开发非商业开源项目。&lt;/li&gt;
&lt;li&gt;您不能与任何第三方共享免费许可证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时 JetBrains 还为 &lt;a href=&#34;http://www.apache.org/foundation/how-it-works.html#committers&#34;&gt;The Apache Software Foundation&lt;/a&gt;、&lt;a href=&#34;http://numfocus.org/sponsored-projects&#34;&gt;NumFOCUS 项目&lt;/a&gt;和 Drupal 核心贡献者提供免费的 License。&lt;/p&gt;
&lt;h3 id=&#34;选择项目&#34;&gt;选择项目&lt;/h3&gt;
&lt;p&gt;你需要选择一个自己的开源项目，并且持续开发 3 个月以上，这个项目没有 star、commit 数量的要求，同时需要包含开源 &lt;code&gt;License&lt;/code&gt;，比如我使用的就是 &lt;code&gt;Apache-2.0 License&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;之后就可以提交申请了。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;申请链接：&lt;a href=&#34;https://www.jetbrains.com/shop/eform/opensource&#34;&gt;https://www.jetbrains.com/shop/eform/opensource&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;填写申请&#34;&gt;填写申请&lt;/h3&gt;
&lt;p&gt;这里需要填写的内容都比较简单，按照要求填写即可，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目页面：如果没有直接填写项目 github URL&lt;/li&gt;
&lt;li&gt;repo 仓库地址&lt;/li&gt;
&lt;li&gt;License 地址：直接贴上 repo 中 License 的链接即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/mw690/ad5fbf65gy1glol6tl35qj20vg1x210m.jpg&#34; alt=&#34;申请&#34;&gt;&lt;/p&gt;
&lt;p&gt;填写完点击提交。&lt;/p&gt;
&lt;h3 id=&#34;接收邮件&#34;&gt;接收邮件&lt;/h3&gt;
&lt;p&gt;在提交申请后，会收到一封来自 &lt;code&gt;JetBrains Community Support&lt;/code&gt; 的邮件，表示会有几天来评估你的项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/mw690/ad5fbf65gy1glolfekw0mj20ym0f6wk4.jpg&#34; alt=&#34;收到申请&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般会在 2 个工作日内收到批准邮件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/mw690/ad5fbf65gy1glolgt0ot7j215c0wsqlb.jpg&#34; alt=&#34;批准申请&#34;&gt;&lt;/p&gt;
&lt;p&gt;邮件内容除了为你颁发免费的 License，还会希望你将 JetBrains 的 logo 加入到你项目介绍中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/mw690/ad5fbf65gy1glolkyl3c6j21ck0fc0ty.jpg&#34; alt=&#34;加入鸣谢&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;license-激活&#34;&gt;License 激活&lt;/h3&gt;
&lt;p&gt;之后点击邮件中的链接，登录你的 JetBrains 账号（如果没有请先注册一个），按照引导完成激活即可。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;由于我已经激活，所以这里看不到邀请页面。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gloltcob80j22hw17m7bh.jpg&#34; alt=&#34;All Products Pack&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;申请续期&#34;&gt;申请续期&lt;/h2&gt;
&lt;p&gt;在旧的 License 即将到期的 2 周前，&lt;code&gt;JetBrains Community Support&lt;/code&gt; 会再次发来邮件，提醒 License 即将到期。如果你的项目还在积极开发中，可以申请续期，并附上续期链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/mw690/ad5fbf65gy1glom2dv7a7j21520l0guq.jpg&#34; alt=&#34;提醒邮件&#34;&gt;&lt;/p&gt;
&lt;p&gt;申请续期只需在申请页面 &lt;code&gt;Do we know you?&lt;/code&gt; 中选择 &lt;code&gt;Yes&lt;/code&gt;，然后填入去年颁发给你的 License ID，其余内容与之前一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/mw690/ad5fbf65gy1glolwsbn6ij21ma0uc78c.jpg&#34; alt=&#34;申请续期&#34;&gt;&lt;/p&gt;
&lt;p&gt;在申请续期后，同样会收到评估邮件，不过这回时间变成了一到两周。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/mw690/ad5fbf65gy1glom4k0ttvj215g0haah7.jpg&#34; alt=&#34;续期评估邮件&#34;&gt;&lt;/p&gt;
&lt;p&gt;说是两周，但两天后我就收到了续期通过的邮件，内容与初次申请一样，这里就不做展示了。&lt;/p&gt;
&lt;h2 id=&#34;toolbox&#34;&gt;Toolbox&lt;/h2&gt;
&lt;p&gt;最后再推荐一下 JetBrains 的 Toolbox App，Toolbox 保持了 JetBrains 一贯优秀的用户体验。可以轻松管理本机所有 JetBrains 的应用，只需登录一次即可完成所有产品的激活，无需再输入 License，同时安装和更新也十分方便，通过 Toolbox 快速打开 IDE，体验极佳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/bmiddle/ad5fbf65gy1glomepqas8j20og12wdkb.jpg&#34; alt=&#34;Toolbox&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;到这里 Jetbrains License 的申请和激活已经完成了，感谢 JetBrains 对开源的支持。如果你还没有申请，那么就快去申请属于你的 JetBrains License 吧！&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 如何参与开源项目</title>
      <link>https://guoxudong.io/post/contribution-to-the-open-source/</link>
      <pubDate>Wed, 20 May 2020 11:12:59 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/contribution-to-the-open-source/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;这篇文章的起因是朋友的一个疑问：如何参与开源项目？搜索了一下网上类似的文章，大多都是讲解如何操作 GitHub 来给开源项目贡献代码、开源协议有哪些以及开源项目的一些介绍。而开源项目作为开源思想的产物，最难的从来都不是贡献代码，而参与的方式也不只有贡献代码一种（虽然贡献代码是最直接的）。下面就根据我的经验，介绍一下如何参与到开源项目中。&lt;/p&gt;
&lt;h2 id=&#34;心理建设&#34;&gt;心理建设&lt;/h2&gt;
&lt;p&gt;在和不同的小伙伴聊过之后，发现大家都有一个同样的问题：很多同学都觉得参与开源项目是技术大牛的事情，我们这种技术水平一般的，只需学习怎么使用就行了。&lt;/p&gt;
&lt;p&gt;那么这就引出了小标题&lt;strong&gt;心理建设&lt;/strong&gt;的重要性，一个开放的项目（伪开源不算），是可以接纳任何可行有益的建议的，只要是对项目有利的贡献，都会得到认可（前提是你能说服别人）。会有一些技术大牛维护这些项目，但不代表任何参与该项目人都是技术大牛，就如之前 4 岁小女孩可以给 Linux 内核贡献提交，只要你的提交可以提升项目质量，哪怕是一个符号的修改都会得到肯定。社区是开放的，任何人都可以参与进来；社区又是严谨的，只要有错误，任何人都可以修改它，并不是“大神”们的专利。&lt;/p&gt;
&lt;h2 id=&#34;如何开始&#34;&gt;如何开始&lt;/h2&gt;
&lt;p&gt;开始前，首先要明确你想要做的内容，除了贡献代码以外，bug 的发现、新功能的建议、文档的补充、测试用例的完善，甚至是错别字的纠正，这些都是参与开源项目的方式。正如上文所说，一个开放的社区，是不会拒绝任何可以提升项目质量的行为的。&lt;/p&gt;
&lt;p&gt;而代码贡献方面，如果有志于贡献高质量的代码、修复 bug 或贡献新功能，在开始时，可以打开 ISSUE，里面有一些打着 &lt;code&gt;good first issue&lt;/code&gt; Label 的 ISSUE，这些 ISSUE 通常会使一些小功能的开发或者 bug 的修复，你可以通过完成这个 ISSUE 来踏出你贡献代码的第一步。当然，在该 ISSUE 中的交流时必不可少的，这样可以帮助你更详细的了解该 ISSUE 要解决的问题，从而在开发中少走弯路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gf0ylqtijgj20sx0bjabu.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;贡献规范&#34;&gt;贡献规范&lt;/h2&gt;
&lt;p&gt;每个开源项目都会有自己的&lt;strong&gt;贡献指南（Contributing Guidelines）&lt;/strong&gt;，在参与项目之前，请先&lt;strong&gt;阅读该指南&lt;/strong&gt;，一般该指南中都会有诸如 Slack channel 或邮件列表这样的沟通工具的链接，或者钉钉、微信这样即时交流工具的二维码（当然最简单的是在 ISSUE 中交流，并且这也是最直接也最容易得到回复的沟通方式）。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;strong&gt;不要在 fork 代码的 &lt;code&gt;master&lt;/code&gt; 分支上做任何修改，该分支用来和上游代码库保持同步！&lt;/strong&gt; 一个开发分支对应一个功能点，并且对应一个 PR，一个 PR 对应一个 ISSUE，最好不要将多个功能写在一个 PR 里，这样会增加项目维护者 review 的难度。&lt;/p&gt;
&lt;h2 id=&#34;github-操作&#34;&gt;GitHub 操作&lt;/h2&gt;
&lt;p&gt;下面就是一些在 Github 上的操作规范。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fork 项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要参与项目贡献，首先需要 fork 项目代码，在项目页面点击 &lt;code&gt;fork&lt;/code&gt; 按钮，将其 fork 到自己的仓库中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gf05j7h9uzj20ty07ywfd.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目 fork 好之后，将其拉取到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/sunny0826/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了保持与上游仓库代码一致，添加上游仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git remote add upstream https://github.com/kubernetes/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上游仓库添加好之后，之后都可以通过以下命令来使本地仓库与上游仓库保持同步：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 切换分支&lt;/span&gt;
$ git checkout master
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 更新上游代码&lt;/span&gt;
$ git fetch upstream
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 合并代码到 master 分支&lt;/span&gt;
$ git merge upstream/master
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 上传代码&lt;/span&gt;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;新建开发分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在同步上游仓库之后，就可以新建分支，添加自己的修改了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout -b xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;提交 PR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发完成后，就可以 push 代码，然后提交 PR 了。一般需要在提交 PR 时，将关联的 ISSUE 标出，并说明该 PR 解决了什么问题。&lt;/p&gt;
&lt;p&gt;而一些大的开源组织会有一些其他要求，比如 CNCF 的项目，在提交 PR 后 &lt;a href=&#34;https://github.com/k8s-ci-robot&#34;&gt;k8s-ci-robot&lt;/a&gt; 会检测你是否签署了 Linux 基金会的&lt;a href=&#34;https://identity.linuxfoundation.org/projects/cncf&#34;&gt;贡献许可协议&lt;/a&gt;（如果没有，就会要求你先签署一下该协议），同时还会做一些其他操作，比如根据内容打一些标签、做一些简单的测试，确保代码无冲突，并给你分配 reviewer（当然也可以使用 &lt;code&gt;/assign&lt;/code&gt; 命令自己指定）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Review&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在提交 PR 后，就会有人来对你提交的代码进行 review。当然，这个人并不会立即出现，因为大部分开源项目的维护者都不是全职的，并且如果该项目的维护者在国外，还需要考虑时差问题。&lt;/p&gt;
&lt;p&gt;reviewer 会对你提交的内容进行一些评论，可能是需要更改的点，或者是需要增加一些相关的单元测试，这个过程将一直持续，直到这些内容达到合并的标准，当看到 &lt;code&gt;/lgtm&lt;/code&gt; 时，恭喜你，你的代码通过 review 被合并了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除开发分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PR 被成功合并后，就可以对之前开发的分支进行清理了，因为在 review 中，会提交多个 commit，而合并一般会将这些 commit 压缩为一个 commit 然后合并到 &lt;code&gt;master&lt;/code&gt; 分支，这就导致了 commit 信息的不一致，这也是为什么在前文要求不要使用 &lt;code&gt;master&lt;/code&gt; 分支的原因，如果使用 &lt;code&gt;master&lt;/code&gt; 分支，在提交几次 PR 后，就会多出很多很多的 commit&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gf07ejzdglj20mb04fdg6.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;清理本地分支：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git branch -d xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式就是通过分支管理，让 &lt;code&gt;master&lt;/code&gt; 分支始终与上游仓库的 commit 信息一致，而从 &lt;code&gt;master&lt;/code&gt; 分支 checkout 出开发分支，在开发分支内容合并入上游之后，只需同步 &lt;code&gt;master&lt;/code&gt; 分支内容，然后重复上面的步骤就可以开始新的开发了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上就是这些年我参与开源项目的一些经验，是对网上一些文章的补充，其实不同开源组织的贡献方式不尽相同，在参与之前一定要先阅读&lt;strong&gt;贡献指南（Contributing Guidelines）&lt;/strong&gt;，这样会少走很多弯路。还有就是在 ISSUE 中的交流请尽量使用英语，哪怕你知道和你交流的是一名可以读懂汉语的人，这样做的原因是为了让其他不懂汉语的社区成员可以读懂你们交流，从而参与进来，而不是让人以为你们在“密谋”着什么。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
