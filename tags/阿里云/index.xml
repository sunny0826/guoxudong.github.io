<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 阿里云</title><link>https://guoxudong.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/</link><description>Recent content in 阿里云 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 11 Nov 2020 11:23:40 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: Teambition 网盘 VS 阿里云盘：阿里这个浓眉大眼的也开始玩赛马了？</title><link>https://guoxudong.io/post/teambition-disk-vs-aliyun-disk/</link><pubDate>Wed, 11 Nov 2020 11:23:40 +0800</pubDate><guid>https://guoxudong.io/post/teambition-disk-vs-aliyun-disk/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在之前的文章&lt;a href="../alibaba-teambition-disk/">《试用阿里网盘内测版-不限速、无广告、隐私安全我全都要》&lt;/a>中笔者分享了阿里巴巴旗下 Teambition 网盘的内测试用体验。就在文章发布的当天，机缘巧合笔者获得了阿里巴巴另一款网盘产品：「&lt;strong>阿里云盘&lt;/strong>」的 ”个人云种子用户“ 邀请码。惊奇的发现原来阿里巴巴同时存在两款不同的网盘产品，分别属于 &lt;strong>Teambition 团队&lt;/strong>和&lt;strong>阿里云基础产品事业部的智能存储团队&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/wap800/ad5fbf65gy1gkl3hrdu81j20k80z27ii.jpg" alt="个人云种子用户邀请页">&lt;/p>
&lt;p>一直以来，最为大众所知的是腾讯的赛马机制，如微信、王者荣耀都是这个机制的产物，而阿里的赛马机制鲜有人提。但据公开的信息显示，阿里内部其实早就存在了这一机制，只是笔者没有关注到而已。本文并不对这一机制做过多评价，而是着力于这两个网盘产品的使用体验，以一个网盘使用者的视角对比这两个产品的特点与差异。&lt;/p>
&lt;h2 id="阿里云盘">阿里云盘&lt;/h2>
&lt;p>早在今年8月份&lt;a href="https://www.aliyundrive.com/">阿里云盘&lt;/a>就开放了下载试用（当时的测试用户可以拿到 6T 的 VIP 容量），但当笔者注意到时已经从 Apple Store 下架。而在10月底又再度上架 Apple Store（然而笔者已经换了安卓）并开始发放邀请码，这次笔者没有错过试用机会，下载并注册了阿里云盘 APP，但存储空间只有 1T 了，这个存储空间应该就是免费提供给用户的空间大小。&lt;/p>
&lt;p>阿里云盘目前只有 IOS 和安卓的 APP，Windows 和 Mac 端暂时没有上线，并且也没有 web 端可以登录。官网极端的简洁，宛如一个直男&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gkl80aczdnj21h70q67wh.jpg" alt="阿里云盘官网">&lt;/p>
&lt;h2 id="阿里云盘-vs-teambition-网盘">阿里云盘 vs Teambition 网盘&lt;/h2>
&lt;p>与 Teambition 相比，阿里云盘 APP 的界面也十分直男，阿里橙搭配极简的风格组成了 APP 的整个页面。与 Teambition 不同，阿里云盘更贴近手机用户，其中的相册功能可以快速浏览网盘中的照片，同时也提供了手机相册同步功能，可以非常简单的同步手机相册到网盘。&lt;/p>
&lt;p>比较有意思的是「虎符保险箱」这个功能，可以在 APP 内再设置一层密码，用来保存隐私文件。分享功能分为口令分享和私密连接，很遗憾和 Teambition 一样，也是暂时不可用。&lt;/p>
&lt;p>与 Teambition 相同的是上传下载同样不限速，实测都可以达到宽带提供的最大速率。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/wap800/ad5fbf65ly1gkl84rikc7j20u01t0403.jpg" alt="APP 页面">&lt;/p>
&lt;p>不难发现，Teambition 网盘和阿里云盘的策略还是有差异的，Teambition 更强调协作，并且和 Teambition 产品绑定，没有独立的 APP；而阿里云盘则从手机用户入手，有独立的 APP 且操作更为丝滑。同样是没有 Windows 和 Mac 端，但 Teambition 提供了 web 端，而阿里云盘的手机操作体验更佳，也算是各有千秋。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>可以看出两个产品同样都处在比较早期的阶段，并没有如在线解压、微信备份、文件格式转换等功能，还不是成熟的网盘产品，但核心的存储与上传下载功能都比较优秀，很有竞争力。&lt;/p>
&lt;p>随着阿里的入局，为本已如同一潭死水般的网盘市场带来一丝竞争的活力，为用户提供了更多选择的空间。&lt;/p>
&lt;blockquote>
&lt;p>PS：Teambition 团队和阿里云盘团队都在疯狂招人，阿里云盘更是在内网放出话说现在内推可以拿终身会员，有兴趣的朋友可以去尝试一下：）&lt;/p>
&lt;/blockquote></description></item><item><title>Post: 试用阿里网盘内测版-不限速、无广告、隐私安全我全都要</title><link>https://guoxudong.io/post/alibaba-teambition-disk/</link><pubDate>Mon, 02 Nov 2020 09:26:27 +0800</pubDate><guid>https://guoxudong.io/post/alibaba-teambition-disk/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Teambition 网盘自开放内测申请以来已经过去了数月，上周五终于收到了心心念念内测码，于是立马上手体验。Teambition 网盘宣称是不限速、不打扰、够安全、易于协作的网盘，属于阿里巴巴工作学习套件 Teambition，提供能够满足日常需求的超大存储空间，有趣、好用的协作等功能。&lt;/p>
&lt;p>从官网可以看出 Teambition 网盘准确的抓到了个人网盘用户的痛点：&lt;strong>上传下载限速&lt;/strong>、&lt;strong>各种广告弹窗&lt;/strong>、&lt;strong>隐私安全&lt;/strong>以及&lt;strong>操作困难&lt;/strong>，而作为工作学习套件的一部分还增加了协作功能，除了分享资源，还提供了各种协作功能，大大提升协作效率。&lt;/p>
&lt;p>目前 Teambition 网盘还处于 Beta 内测版，申请地址：&lt;a href="https://survey.aliyun.com/apps/zhiliao/jqBinngVQ">https://survey.aliyun.com/apps/zhiliao/jqBinngVQ&lt;/a>&lt;/p>
&lt;h2 id="优势">优势&lt;/h2>
&lt;p>总的来说优势体现在不限速、无广告、隐私安全和协作方面。&lt;/p>
&lt;h3 id="速度">速度&lt;/h3>
&lt;p>经实测 Teambition 网盘的上传下载速度都能达到本地带宽的最大值，上传下载速度都非常丝滑。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65ly1gkamt4yh6tj20b604p74d.jpg" alt="上传速度">&lt;/p>
&lt;br>
&lt;p>Teambition 网盘背靠阿里巴巴集团，由阿里云提供资源支持，所以 Teambition 可以以极低成本拿到海量的资源，这也就是他们敢于宣传资源上传下载不限速的原因。&lt;/p>
&lt;p>上传下载速度应该是所有功能的核心，也是和友商比较最多的一点。作为一名云资源管理者和维护者，我深知存储和网络带宽消耗成本的巨大，企业为了保证各种图片、视频、文件资源的可用性，会花费不菲的成本来采购 OSS 或 S3 这样的对象存储，这些资源的上传下载自然不会限速，甚至还有配套的加速服务。&lt;/p>
&lt;p>所以对于网盘的限速从情感上是可以接受的，因为这些资源成本巨大，但是如果限速到&lt;strong>几k、几十k/秒&lt;/strong>，那这样的策略就不是基于成本的考虑，而是垄断后的特权了。&lt;/p>
&lt;h3 id="容量">容量&lt;/h3>
&lt;p>内测版开放了 2T 的免费容量，这个大小基本满足了个人用户的使用需求，后续应该会开放购买更大的容量。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gkasv8u9fzj208n03xglh.jpg" alt="网盘容量">&lt;/p>
&lt;h3 id="隐私安全">隐私安全&lt;/h3>
&lt;p>在直接咨询了阿里的开发人员后，得知 Teambition 网盘采用与天猫双十一相同的技术架构，确保用户个人隐私和文件的绝对安全。&lt;/p>
&lt;h3 id="页面">页面&lt;/h3>
&lt;p>网盘页面简洁明了，功能一目了然，可以识别众多文件格式。确实也和承诺中的一样，没有广告推送和弹窗，整体保持简洁清新的风格。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gkamyvsv50j21h60q7dj9.jpg" alt="网盘页面">&lt;/p>
&lt;h3 id="协作">协作&lt;/h3>
&lt;p>除了一般网盘的功能外，Teambition 网盘还突出了协作的功能。&lt;/p>
&lt;h4 id="讨论功能">讨论功能&lt;/h4>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65ly1gkanbqdngbj20dd09dq3w.jpg" alt="讨论">&lt;/p>
&lt;p>参与协作的用户可以使用不同的颜色，将想要讨论的对象&lt;strong>圈出来&lt;/strong>，这样就可以在同一幅图片或者视频中进行多组讨论，不用添加多余的描述。这个功能在视频中效果会更加明显，可以逐帧&lt;strong>圈&lt;/strong>出修改对象并发表意见（剪辑师、设计师狂怒）。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gkandlm1cfj21780ppqil.jpg" alt="圈出讨论">&lt;/p>
&lt;p>你觉得是狗可爱还是猫可爱呢？：）&lt;/p>
&lt;h4 id="图像识别">图像识别&lt;/h4>
&lt;p>文档中并没有提到这个功能，是我在测试时偶然发现的，Teambition 网盘会自动识别你上传图像的内容，并在详情中的 &lt;strong>“包含的事物”&lt;/strong> 中展示，如下图：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1gkanoe8od2j214l0jo1gt.jpg" alt="图像识别">&lt;/p>
&lt;h4 id="分享">分享&lt;/h4>
&lt;p>目前分享功能是关闭的，原因是内测期间有用户利用 Teambition 网盘分享违规文件，所以暂时无法体验 Teambition 网盘的分享功能。不过从 &lt;strong>&lt;a href="https://thoughts.teambition.com/sharespace/5f72e44becf9290016f85c8c/docs/5f99203decf9290016f85ce3">「分享」功能升级说明&lt;/a>&lt;/strong> 可以看到目前已经开启了安全升级，同时还增加了更多功能。&lt;/p>
&lt;p>多种分享权限：&lt;/p>
&lt;ul>
&lt;li>限时分享有效期增加更细致的时间颗粒度（7天、永久、自定义）&lt;/li>
&lt;li>分享支持增加添加密码&lt;/li>
&lt;li>批量分享支持画册、缩略图两种模式查看文件&lt;/li>
&lt;/ul>
&lt;p>粒度更细的分享管理：&lt;/p>
&lt;ul>
&lt;li>支持查看分享文件的浏览量和被下载量&lt;/li>
&lt;li>支持查看分享文件的有效期&lt;/li>
&lt;li>分享中的文件支持随时取消&lt;/li>
&lt;/ul>
&lt;h2 id="不足">不足&lt;/h2>
&lt;p>Teambition 网盘的核心功能确实直击网盘使用的痛点，但还处于 Beta 内测版，有很多不足。&lt;/p>
&lt;ul>
&lt;li>目前只有 web 端和手机端可以使用，微信小程序、桌面端（Mac 和 Windows）、平板设备端还未开放&lt;/li>
&lt;li>手机端目前还不能删除文件，删除文件要在 web 端操作，而且手机端网盘的加载速度也很慢，且多次出现加载不出来的情况&lt;/li>
&lt;li>分享功能暂时不可用&lt;/li>
&lt;li>暂时还没有与各种设备打通，还没有手机相册/内容备份等功能&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>总的来说，Teambition 网盘抓住了网盘使用的痛点，并以此收获了众多的关注与好评。但要走的路还很长，在海量用户使用下网盘本身的可用性、对各种设备的支持、对违规内容的识别和管控都将是 Teambition 网盘面临的挑战。&lt;/p>
&lt;p>往长远了看 Teambition 网盘的出现给了用户更多的选择，同时打破了目前网盘市场的局面，逼着“一家独大”的同行去改善自己的产品和服务，从用户的角度这都是好事情。&lt;/p></description></item><item><title>Post: 听说，阿里云给它的 OpenAPI 开发了一套编程语言</title><link>https://guoxudong.io/post/aliyun-darabonba/</link><pubDate>Tue, 01 Sep 2020 11:49:12 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-darabonba/</guid><description>
&lt;h2 id="openapi">OpenAPI&lt;/h2>
&lt;p>熟悉公有云的同学对 OpenAPI 都不会陌生，OpenAPI 可以称之为公有云与用户之间的一座桥梁。直接使用公有云的大多是技术人员，而对于技术人员，尤其是开发者来说，往往并不满足于只使用 Web UI 界面来与公有云交互，尤其是当使用的公有云产品日益增多时。由于 Web UI 是面向全体用户设计，并不能满足用户的全部需求。这时 OpenAPI 就出现了，用户通过 OpenAPI 将自己的系统直接对接公有云，并根据自己的使用场景和需求进行设计，开发出一套满足自己需求的公有云管理系统或流程，这样既提高了用户本身的自动化水平，还降低了误操作带来的风险。&lt;/p>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>最早的 OpenAPI 往往是云厂商开放出来的一系列 RESTful API 接口，用户需要根据接口要求自己封装认证方法、传入参数，但是由于部分 OpenAPI 并不是 RESTful 风格、产品升级导致的接口参数变化、文档更新不及时等问题，导致云厂商开始寻求新的解决办法。SDK 就是一种解决办法，通过云厂商自己封装的 SDK，可以提高用户体验并屏蔽部分直接使用 OpenAPI 带来的麻烦，但是随着云产品的增加，需要开发的 SDK 越来越多，并且由于 SDK 往往是多语言的，云厂商需要投入大量人手来维护这些 SDK，导致某些产品由于人力资源有限并没有提供 SDK 或者 SDK 语言不全。&lt;/p>
&lt;p>在这种背景下，阿里云的同学提出了一种新办法：他们重新定义了一门 DSL 语言 Darabonba 来描述各种各样的 OpenAPI，就如题目所说给 OpenAPI 开发了一种编程语言，从某种程度上来说，可以称之为：&lt;strong>OpenAPI as code&lt;/strong>。&lt;/p>
&lt;h2 id="darabonba">Darabonba&lt;/h2>
&lt;p>Darabonba(原名 TeaDSL)，是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65ly1giba4r6z4aj20rs0ci400.jpg" alt="Darabonba 设计理念">&lt;/p>
&lt;p>在笔者看来，操作云产品的功能是开发者的目的，而 OpenAPI 是实现这个目的的手段，SDK 则简化了这种手段，Darabonba 的作用则降低了开发 SDK 的成本，并提高了开发 SDK 的速度，对云厂商的效率会有非常明显的提升。同时 Darabonba 也为使用多种编程语言的团队提供了一条捷径，原先需要每种编程语言都要出人来参加 OpenAPI 的集成，现在只需要公有云维护团队出一名或几名同学即可完成全语言 SDK 的生成。而如果公司本身有需要开发大量的 OpenAPI，甚至可以直接使用 Darabonba，开发符合自己系统 OpenAPI 的工具，&lt;a href="https://github.com/aliyun/darabonba">Darabonba&lt;/a> 目前已经开源，使用 &lt;a href="https://github.com/aliyun/darabonba/blob/master/LICENSE">Apache-2.0 LICENSE&lt;/a>。&lt;/p>
&lt;h3 id="组件">组件&lt;/h3>
&lt;p>Darabonba 目前支持：&lt;strong>Java&lt;/strong>、&lt;strong>C#&lt;/strong>、&lt;strong>TypeScript&lt;/strong>、&lt;strong>PHP&lt;/strong>、&lt;strong>Golang&lt;/strong> 和 &lt;strong>Python&lt;/strong> 代码的生成，除了解析器和多语言生成器，还提供了：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/aliyun/darabonba-vscode">VS Code 插件&lt;/a>：提供语法高亮、代码提示、代码格式化、语法检查等功能。&lt;/li>
&lt;li>&lt;a href="https://github.com/aliyun/darabonba-cli">CLI&lt;/a>：命令行工具，快速在本地拉起一个 Darabonba 项目。&lt;/li>
&lt;li>&lt;a href="https://darabonba.api.aliyun.com/module">Darabonba 模块仓库&lt;/a>：模块仓库，提供 Darabonba 模块的发布和下载。&lt;/li>
&lt;/ul>
&lt;h3 id="darabonba-语言优势">Darabonba 语言优势&lt;/h3>
&lt;ul>
&lt;li>更宽泛的风格支持：支持 RESTful 风格的 OpenAPI，及其他所有基于 HTTP 协议的 OpenAPI。对非 RESTful 风格的 OpenAPI 更友好。&lt;/li>
&lt;li>编程逻辑化：将 OpenAPI 从元数据定义走向编程化，封装复杂的 HTTP 处理过程为简单的方法接口。&lt;/li>
&lt;li>运行时事务性支持：支持配置或设置 OpenAPI 的幂等、重试、超时、退避，将复杂的 OpenAPI 调用过程收敛在方法中。&lt;/li>
&lt;/ul>
&lt;h2 id="快速上手">快速上手&lt;/h2>
&lt;p>下图可以看到完整的 Darabonba 运行流程，现在我们就来快速制作一套 Code Sample 吧。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65ly1gibatrt4puj21ao1e8tet.jpg" alt="">&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>阿里云提供了Darabonba 的 Web UI 界面，但是在网页上不好调试，我们选择本地安装 CLI 命令行工具。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#999;font-style:italic"># Darabonba CLI 是由 Node.js 开发的，使用 npm 来安装&lt;/span>
$ npm install -g @darabonba/cli
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构建-darabonba-模块">构建 Darabonba 模块&lt;/h3>
&lt;p>我们假设要创建一个模块为 &lt;code>sample_ecs&lt;/code>，用来生成查询 ECS 信息的 SDK 代码。首先创建一个目录：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ mkdir sample_ecs
$ &lt;span style="color:#24909d">cd&lt;/span> sample_ecs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化模块，输入相关信息：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara init
package scope: guoxudong.io
package name: sample_ecs
package version: 0.0.1
main entry: main.dara
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成初始化后，会新建 2 个文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Darafile&lt;/code>：包描述文件&lt;/li>
&lt;li>&lt;code>main.dara&lt;/code>：入口文件&lt;/li>
&lt;/ul>
&lt;h3 id="安装-vs-code-插件">安装 VS Code 插件&lt;/h3>
&lt;p>打开 VS Code，按 &lt;code>F1&lt;/code> 或 &lt;code>Ctrl + Shift + P&lt;/code> 打开命令面板，选择 Install Extension 并输入 &lt;code>darabonba&lt;/code>。&lt;/p>
&lt;p>或启动VS Code 快速打开（&lt;code>Ctrl + P&lt;/code>），粘贴以下命令，然后按 Enter。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ext install darabonba.darabonba
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后就可以使用语法高亮、代码提示、代码格式化、语法检查等功能了。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1gibbkgjhc5j20q80l3wh7.jpg" alt="代码高亮">&lt;/p>
&lt;h3 id="安装依赖模块">安装依赖模块&lt;/h3>
&lt;p>首先需要设置依赖仓库地址：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara config &lt;span style="color:#24909d">set&lt;/span> registry https://darabonba.api.aliyun.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后就是将依赖写入 &lt;code>Darafile&lt;/code> 中：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;scope&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;guoxudong.io&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;sample_ecs&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;0.0.1&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;main.dara&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;libraries&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Console&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;darabonba:Console:*&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;ECS&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;alibabacloud:Ecs20140526:*&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;RPC&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;alibabacloud:RPC:*&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Util&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;darabonba:Util:*&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;java&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;package&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;aliyun.com.alibabacloud.sample&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;csharp&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;namespace&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Alibabacloud.Sample&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;php&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;package&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Alibabacloud.Sample&amp;#34;&lt;/span>
},
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;python&amp;#34;&lt;/span>: {
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;package&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;alibabacloud_sample&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里引入了4个模块：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Console&lt;/code>：打印输出模块&lt;/li>
&lt;li>&lt;code>ECS&lt;/code>：ECS 模块&lt;/li>
&lt;li>&lt;code>RPC&lt;/code>：RPC Client 模块&lt;/li>
&lt;li>&lt;code>Util&lt;/code>：工具模块&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
值得注意的的是 &lt;code>libraries&lt;/code> 中内容的 key，就是 &lt;code>.dara&lt;/code> 文件中 import 导入依赖的名称，所以这里可以将 key 修改为好理解的值，然后 import 相应值就可以了。
&lt;/div>
&lt;p>修改完 &lt;code>Darafile&lt;/code> 之后，安装这些依赖：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后就可以看到多了一个 &lt;code>.libraries.json&lt;/code> 文件和一个 &lt;code>libraries&lt;/code> 目录，需要的所有依赖模块就都已经安装好了。&lt;/p>
&lt;h3 id="查看模块内容">查看模块内容&lt;/h3>
&lt;p>更多的模块，可在&lt;a href="https://darabonba.api.aliyun.com/module">模块仓库&lt;/a>中搜索。这里以 ECS 模块为例&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gic1orwhjoj21h70q3gr4.jpg" alt="ECS 模块">&lt;/p>
&lt;p>可以在 &lt;code>Detail&lt;/code> 中看到所有可以调用的接口，通过还可以点击其他 tab 可以查看版本、安装方法等内容：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65ly1gibbruwd1zj21at0pqadt.jpg" alt="">&lt;/p>
&lt;p>也可通过命令单独安装模块：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara install alibabacloud:Ecs20140526
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="代码编写">代码编写&lt;/h3>
&lt;p>现在就可以编写 Darabonba 代码了，Darabonba 代码的整体风格偏向于 Java，不是很难懂，这里贴上一段简单的代码：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#6ab825;font-weight:bold">import&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">ECS&lt;/span>;
&lt;span style="color:#6ab825;font-weight:bold">import&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">RPC&lt;/span>;
&lt;span style="color:#6ab825;font-weight:bold">import&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">Util&lt;/span>;
&lt;span style="color:#6ab825;font-weight:bold">import&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">Console&lt;/span>;
&lt;span style="color:#999;font-style:italic">/**
&lt;/span>&lt;span style="color:#999;font-style:italic">* Initialization 初始化公共请求参数
&lt;/span>&lt;span style="color:#999;font-style:italic">*/&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">static&lt;/span> function &lt;span style="color:#447fcf">Initialization&lt;/span>(regionId: string)&lt;span style="color:#6ab825;font-weight:bold">throws&lt;/span> : ECS{
var config = &lt;span style="color:#6ab825;font-weight:bold">new&lt;/span> RPC.&lt;span style="color:#bbb">Config&lt;/span>{};
&lt;span style="color:#999;font-style:italic">// 您的AccessKey ID
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> config.&lt;span style="color:#bbb">accessKeyId&lt;/span> = &lt;span style="color:#ed9d13">&amp;#34;&amp;lt;accessKeyId&amp;gt;&amp;#34;&lt;/span>;
&lt;span style="color:#999;font-style:italic">// 您的AccessKey Secret
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> config.&lt;span style="color:#bbb">accessKeySecret&lt;/span> = &lt;span style="color:#ed9d13">&amp;#34;&amp;lt;accessKeySecret&amp;gt;&amp;#34;&lt;/span>;
&lt;span style="color:#999;font-style:italic">// 您的可用区ID
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> config.&lt;span style="color:#bbb">regionId&lt;/span> = regionId;
&lt;span style="color:#6ab825;font-weight:bold">return&lt;/span> &lt;span style="color:#6ab825;font-weight:bold">new&lt;/span> ECS(config);
}
&lt;span style="color:#999;font-style:italic">/**
&lt;/span>&lt;span style="color:#999;font-style:italic">* DescribeZones 查询一个阿里云地域下的可用区
&lt;/span>&lt;span style="color:#999;font-style:italic">*/&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">static&lt;/span> async function &lt;span style="color:#447fcf">DescribeZones&lt;/span>(client: ECS, regionId: string)&lt;span style="color:#6ab825;font-weight:bold">throws&lt;/span>: &lt;span style="color:#6ab825;font-weight:bold">void&lt;/span>{
var req = &lt;span style="color:#6ab825;font-weight:bold">new&lt;/span> ECS.&lt;span style="color:#bbb">DescribeZonesRequest&lt;/span>{};
&lt;span style="color:#999;font-style:italic">// 可用区所在的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> req.&lt;span style="color:#bbb">regionId&lt;/span> = regionId;
&lt;span style="color:#999;font-style:italic">// 根据汉语、英语和日语筛选返回结果。更多详情，请参见RFC7231
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> &lt;span style="color:#999;font-style:italic">// 取值范围：
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> &lt;span style="color:#999;font-style:italic">// zh-CN
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> &lt;span style="color:#999;font-style:italic">// en-US
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> &lt;span style="color:#999;font-style:italic">// ja
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> &lt;span style="color:#999;font-style:italic">// 默认值：zh-CN。
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> req.&lt;span style="color:#bbb">acceptLanguage&lt;/span> = &lt;span style="color:#ed9d13">&amp;#34;zh-CN&amp;#34;&lt;/span>;
var resp = client.&lt;span style="color:#bbb">describeZones&lt;/span>(req);
Console.&lt;span style="color:#bbb">log&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;--------------------查询地域下的可用区--------------------&amp;#34;&lt;/span>);
Console.&lt;span style="color:#bbb">log&lt;/span>(Util.&lt;span style="color:#bbb">toJSONString&lt;/span>(resp));
}
&lt;span style="color:#6ab825;font-weight:bold">static&lt;/span> async function &lt;span style="color:#447fcf">main&lt;/span>(args: [string]) &lt;span style="color:#6ab825;font-weight:bold">throws&lt;/span>: &lt;span style="color:#6ab825;font-weight:bold">void&lt;/span> {
&lt;span style="color:#999;font-style:italic">// 可用区域Id （请自行配置）
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> var regionId = &lt;span style="color:#ed9d13">&amp;#34;&amp;lt;regionId&amp;gt;&amp;#34;&lt;/span>;
var client = Initialization(regionId);
&lt;span style="color:#999;font-style:italic">// 查询阿里云地域下的可用区
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span> DescribeZones(client, regionId)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个代码注释很完善，这里就不多讲解了，本示例在官网有&lt;a href="https://api.aliyun.com/?spm=a2c6h.17640777.J_1935739830.2.8f9a54e1V4j8vN#/codesample">完整示例&lt;/a>，有兴趣的同学可以研究一下。而 Darabonba 的文档，可以在 &lt;a href="https://github.com/aliyun/darabonba">Github&lt;/a> 上找到。&lt;/p>
&lt;h3 id="代码生成">代码生成&lt;/h3>
&lt;p>现在就可以生成代码了，下面以生成 Python 代码为例，执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara codegen python ./tmp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令执行成功后，就可以看到 Python 代码已经生成了：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gic21suu35j208a05h3yh.jpg" alt="">&lt;/p>
&lt;p>如果代码还没有写完，想检查是否有语法错误，可以使用 &lt;code>check&lt;/code> 命令检查：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ dara check main.dara
Check success !
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这我们的代码就生成成功了，但是这还不是结束，我们需要去测试一下生成的代码能否正常运行，在实践中就出现过代码生成成功，但是运行报错的情况。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
如果生成的是 Python 代码，这里推荐使用 &lt;code>Python 3.6&lt;/code>，经测 3.8 版本不支持 sdk 的一些语法。
&lt;/div>
&lt;p>同样的，也可以在 &lt;a href="https://darabonba.api.aliyun.com/sample">OpenAPI Explorer Code Sample&lt;/a>，通过 Web UI 来生成代码，除了调试速度比较慢之外，其余体验都十分不错。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gic2hxwdtaj21ha0qb441.jpg" alt="Code Sample">&lt;/p>
&lt;h2 id="code-sample-全民赛码">Code Sample 全民赛码&lt;/h2>
&lt;p>最近阿里云还推出了这么一个比赛，看了下奖品有机械键盘、无人机、双肩包和内推资格，有兴趣的同学可以关注一下，还是挺好玩的：&lt;a href="https://developer.aliyun.com/topic/codesample/active1?spm=dara_code_sample.home.0.0.2ee614e5L9uDCw">传送门&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gic2ef0fxgj21o00hyh65.jpg" alt="">&lt;/p>
&lt;p>阿里云开放平台携手开发者社区、内容设计部，联合举办“OpenAPI 开发者挑战赛第三期—— CodeSample 全民赛码 ”，面向数万开发者，招募阿里云 OpenAPI 示例代码（CodeSample）。无论您是入门开发，或是运维大神，无论是利用 OpenAPI 解决一个轻量场景，或是满足一个小功能，通通到碗里来！&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>在这个项目叫 TeaDSL 的时候笔者就开始关注 Darabonba 了，由于笔者是 OpenAPI SDK 的重度使用用户，之前开发的 devops 平台以及 &lt;a href="https://github.com/sunny0826/cms-grafana-builder">cms-grafana-builder&lt;/a> 项目都大量使用了阿里云 SDK。在4月份看到朴灵的&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247495266&amp;amp;idx=1&amp;amp;sn=64177bf3fc7f4068c14733dc77b5383f&amp;amp;chksm=e92ad36dde5d5a7bf6a0ddd821a3cdee6ee063eb221623c6c8333cf68787b3118bd0a8653f17&amp;amp;scene=21#wechat_redirect">《TeaDSL：支持任意 OpenAPI 网关的多语言 SDK 方案》&lt;/a>时，认为其只是解决云厂商 OpenAPI 开发的多语言困局，提升研发效率，和 OpenAPI 的使用者关系不大。但是在这次进行深入研究之后发现，Darabonba 甚至可以用来生成自己系统的 OpenAPI 多语言 SDK，并不是只能用于生成阿里云的 SDK，非常的惊艳。&lt;/p></description></item><item><title>Post: 云中谁寄锦书来，免费生成一封七夕情书吧</title><link>https://guoxudong.io/post/love-letter-aliyun/</link><pubDate>Tue, 25 Aug 2020 16:19:09 +0800</pubDate><guid>https://guoxudong.io/post/love-letter-aliyun/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>今天是七夕节，但对我来时只是”平凡“的一天，上午认识的一个阿里云的小姐姐给我发来一个可疑链接，说是有好玩的活动，推荐我参加一下。于是在午休时间，闲来无事的我点开了这个链接，没想到事情并不简单。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gi34yex8kgj20al05qmxm.jpg" alt="">&lt;/p>
&lt;h2 id="云效-devops">云效 DevOps&lt;/h2>
&lt;p>点开之后，原来是使用云效 DevOps 来体验发布一个为朋友、爱人定制的“情书”。年初时，我和云效的开发人员有聊过，他们对云效 DevOps 非常有信心，相信会做出一个和原来的云效完全不同的更好用的产品，正好借着这个机会，我来免费体验一把云效 DevOps。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gi352mu9k4j212w0q0wmi.jpg" alt="">&lt;/p>
&lt;h3 id="整体感觉">整体感觉&lt;/h3>
&lt;p>UI 的整体感觉非常棒，完全不像是“阿里云”的 UI，风格简洁清爽。云效 DevOps 将整个 DevOps 生命周期都做了出来，从代码仓库，静态代码扫描，CI/CD，到文档和任务的管理都有，还改善了之前只能使用阿里云代码仓库的缺点，可以使用自建代码仓库，同时还支持云有云、公有云和混合云的部署方式。同时&lt;strong>云效还为小微企业提供了扶持计划，30人以下团队可以免费使用！&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gi359oqgh9j21h20q97a5.jpg" alt="活动页">&lt;/p>
&lt;p>这里就不过多介绍云效，有兴趣的朋友可以上阿里云官方，搜索&lt;strong>云效&lt;/strong>就能了解更多内容了。&lt;/p>
&lt;h2 id="制作情书">制作情书&lt;/h2>
&lt;p>与其说是是制作，不如说是修改制作好的代码，将自己想说的话放进去，然后在通过云效一键发布。&lt;/p>
&lt;h3 id="克隆七夕代码">克隆七夕代码&lt;/h3>
&lt;p>新用户注册好之后选择&lt;code>导入代码库&lt;/code>-&lt;code>URL导入&lt;/code>，贴入示例代码库地址 &lt;code>https://code.aliyun.com/yunxiao2020/letter.git&lt;/code> 点击 &lt;code>确定&lt;/code> 即可完成示例代码的导入。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gi35ntu6avj212m0k2dgv.jpg" alt="云效 DevOps">&lt;/p>
&lt;h3 id="修改情书内容">修改情书内容&lt;/h3>
&lt;p>编辑代码修改情书内容，地址&lt;code>app/service/data.js&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gi35q45ru3j21hc0pfmy3.jpg" alt="修改内容">&lt;/p>
&lt;p>可以修改以下字段来实现内容的定制：&lt;/p>
&lt;ul>
&lt;li>&lt;code>theme&lt;/code>：情书模板，提供了爱人、朋友、同事三种模板，如下所示：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gi35sch68xj210g0jb0xy.jpg" alt="爱人、朋友、同事">&lt;/p>
&lt;ul>
&lt;li>&lt;code>from&lt;/code>：寄信人，上学时候写过情书的同学都懂~&lt;/li>
&lt;li>&lt;code>To&lt;/code>：收信人，同上&lt;/li>
&lt;li>&lt;code>avatar&lt;/code>：寄信人头像，我这里使用的是图床的 URL，没有图床的 github 上的图片地址也是可以的&lt;/li>
&lt;li>&lt;code>question&lt;/code>：开信问题：设置一个只有你的他/她知道答案的问题，防止被别人看到你的真心话&lt;/li>
&lt;li>&lt;code>answer&lt;/code>：上面问题的答案&lt;/li>
&lt;li>&lt;code>text&lt;/code>: 情书正文，说出你想和他/她说的话吧！&lt;/li>
&lt;/ul>
&lt;p>现在情书内容就写完了，点击&lt;code>保存&lt;/code>-&lt;code>确定&lt;/code>，将代码提交到 &lt;code>master&lt;/code> 分支。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1gi35y8l234j20fe0880sw.jpg" alt="保存">&lt;/p>
&lt;h3 id="配置流水线">配置流水线&lt;/h3>
&lt;p>代码写好了，现在就可以使用流水线将情书的 H5 发布出去了。点击左上角九宫格，选择 &lt;code>流水线&lt;/code> - &lt;code>新建流水线&lt;/code>，选择模板：&lt;code>其他&lt;/code> - &lt;code>云效七夕活动&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gi362uhnv8j21hc0pfmye.jpg" alt="选择模板">&lt;/p>
&lt;p>之后就可以配置流水线了，点击 &lt;code>添加代码源&lt;/code>，选择 &lt;code>云效Codeup&lt;/code> 代码源，选择刚刚克隆的 &lt;code>letter&lt;/code> 代码库，选择 &lt;code>master&lt;/code> 分支，开启 &lt;code>代码源触发&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gi36917of6j21h70q7wie.jpg" alt="image">&lt;/p>
&lt;p>配置 Docker 镜像构建，点击 &lt;code>Docker 镜像构建&lt;/code> - &lt;code>镜像构建并推送至自定义镜像仓库&lt;/code>，填入以下内容：&lt;/p>
&lt;ul>
&lt;li>镜像仓库地址: &lt;code>registry.cn-hangzhou.aliyuncs.com/yunxiao-letter/yunxiao-letter:${BUILD_JOB_ID}&lt;/code>&lt;/li>
&lt;li>用户名:&lt;code>yunxiao-letter@1515906102291199&lt;/code>&lt;/li>
&lt;li>密码: &lt;code>yunxiao2020&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>配置 Kubernetes 发布，点击 &lt;code>Kubernetes 发布&lt;/code> - &lt;code>Kubectl发布&lt;/code> - &lt;code>新建连接&lt;/code> - &lt;code>自定义集群&lt;/code>&lt;/p>
&lt;p>之后进入 &lt;code>https://research.devops.aliyun.com/kube.config.yml&lt;/code> 页面，将页面配置文件复制到集群配置文件中。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gi36dhtzfxj21070jgt9j.jpg" alt="连接 Kubernetes">&lt;/p>
&lt;p>配置好连接后，填写其他配置：&lt;/p>
&lt;ul>
&lt;li>命名空间填: &lt;code>yunxiao&lt;/code>&lt;/li>
&lt;li>YAML路径填: &lt;code>deployment.yml&lt;/code>&lt;/li>
&lt;li>新建变量1 选择&lt;code>上游输出&lt;/code>，&lt;code>YUNXIAO_LETTER_IMAGE&lt;/code>=&lt;code>镜像仓库地址&lt;/code>&lt;/li>
&lt;li>新建变量2 选择&lt;code>自定义&lt;/code>，&lt;code>PIPELINE_ID&lt;/code>=&lt;code>${PIPELINE_ID}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36f8xxffj20w70icdgb.jpg" alt="其他配置">&lt;/p>
&lt;p>完成所有配置后，点击 &lt;code>保存并运行&lt;/code> - &lt;code>运行&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36hajgyuj20fd08s746.jpg" alt="">&lt;/p>
&lt;h3 id="修复问题">修复问题&lt;/h3>
&lt;p>这里为了让用户体验质量卡点 &lt;code>JavaScript 单元测试&lt;/code> 功能，他们还在项目中埋了一个小坑，让首次构建失败，原因是：测试通过率小于100%&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36jr1kwjj21090a7t9h.jpg" alt="质量卡点">&lt;/p>
&lt;p>查看报错信息，发现是 &lt;code>expect&lt;/code> 值被设置为 &lt;code>400&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1gi36k3n45mj212g0e4tad.jpg" alt="报错信息">&lt;/p>
&lt;p>进入对应的单元测试文件，修改代码：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gi36md5twaj21h40pzn10.jpg" alt="修复问题">&lt;/p>
&lt;p>修改完成后，点击 &lt;code>保存&lt;/code> - &lt;code>提交&lt;/code>，由于之前设置了流水线 &lt;code>提交源代码触发&lt;/code>，流水线在提交后会自动触发，并发布成功：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gi36npelasj210109l3zc.jpg" alt="发布成功">&lt;/p>
&lt;p>点击&lt;code>预览&lt;/code>或者扫面二维码就可以看到你的情书了。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>通过这次七夕活动，体验了一把云效 DevOps，整体来说用户体验很好，同时还提供了30人一下团队免费使用的政策，可以为小团队省出不少搭建和开发 DevOps 环境和流程的时间和经历，非常推荐大家都来尝试一下，制作一封云上情书送给你的他/她吧。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>活动地址：&lt;a href="https://developer.aliyun.com/adc/series/devops/?spm=a2c6h.12883283.1362932.3.2785201ctOUs0C&amp;amp;accounttraceid=fd6b3040ada34768aa78f84a9f645c46kouc">https://developer.aliyun.com/adc/series/devops/?spm=a2c6h.12883283.1362932.3.2785201ctOUs0C&amp;amp;accounttraceid=fd6b3040ada34768aa78f84a9f645c46kouc&lt;/a>&lt;/p>
&lt;/div>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developer.aliyun.com/adc/scenario/exp/8464960ac980400d95ff092b95e1a97e">云效DevOps七夕云中密书 - developer.aliyun.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Post: 修改 Nginx Ingress 日志打印格式</title><link>https://guoxudong.io/post/nginx-ingress-log-aliyun/</link><pubDate>Mon, 02 Mar 2020 15:29:16 +0800</pubDate><guid>https://guoxudong.io/post/nginx-ingress-log-aliyun/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近接到一个需求，需要展示 ingress 上面的访问日志，由于我们的业务系统都部署在 Kubernetes 上面，通过 ingress 进行访问，所以这里的访问日志，其实就是我们全部业务系统的访问日志。&lt;/p>
&lt;p>日志采集方面，阿里云天生就提供了 nginx-ingress 日志和采集和展示，本身提供很多不错的基于 ingress 日志数据的图表与分析。如果你使用的是阿里云 ACK 容器服务，那么极端推荐使用，配置方法见官方文档：https://help.aliyun.com/document_detail/86532.html。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfmo5d410j21970nzwjg.jpg" alt="image">&lt;/p>
&lt;p>让人头秃的是，我们这次不但要采集 ingress 日志上比较常规的 &lt;code>url&lt;/code> &lt;code>client_ip&lt;/code> &lt;code>method&lt;/code> &lt;code>status&lt;/code> 等字段，还要采集我们系统在 &lt;code>Request Headers&lt;/code> 里面自定义的参数，这些参数是默认的 ingress 并不展示的，所以需要我们进行调整。&lt;/p>
&lt;h2 id="开始">开始&lt;/h2>
&lt;p>首先明确需要调整的组件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx-ingress&lt;/code> 的 ConfigMap：用于打印自定义日志字段&lt;/li>
&lt;li>&lt;code>AliyunLogConfig&lt;/code>：这个是阿里云日志服务的 CRD 扩展，需要在这个里面加入新增的字段名和修改后的正则表达式&lt;/li>
&lt;li>在日志服务控制台，添加新增字段的指定字段查询&lt;/li>
&lt;li>新增展示仪表盘&lt;/li>
&lt;/ul>
&lt;h3 id="调整-ingress-日志输出">调整 ingress 日志输出&lt;/h3>
&lt;p>我们 ingress 组件使用的是 &lt;code>nginx-ingress-container&lt;/code>，这里要调整日志输出格式，老规矩，直接官方文档：https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/。&lt;/p>
&lt;p>从文档可见，只需要调整 &lt;code>ingress-nginx&lt;/code> 的 ConfigMap &lt;code>nginx-configuration&lt;/code> data 中的 &lt;code>log-format-upstream&lt;/code> 字段即可。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;p>知识点：&lt;/p>
&lt;p>官方文档里面给的说明不是很详细，没有提到 &lt;code>Request Headers&lt;/code> 里自定义的字段应该怎么表示（也有可能是我眼瘸没看见），但经过我多次试验发现，&lt;code>Request Headers&lt;/code> 里的字段在 &lt;code>log-format-upstream&lt;/code> 中应该使用 &lt;code>$http_{your field}&lt;/code> 表示，比如 &lt;code>$http_cookie&lt;/code>；而带 &lt;code>-&lt;/code> 的字段则需要将 &lt;code>-&lt;/code> 改为 &lt;code>_&lt;/code>，并且使用小写，比如 &lt;code>app-Id&lt;/code> 就应使用 &lt;code>$http_app_id&lt;/code> 表示。&lt;/p>
&lt;/div>
&lt;p>修改 ConfigMap，&lt;code>ingress-controller&lt;/code> 将进行热更新，看到如下日志，就证明配置已完成更新，接下来就可以看到你自定义字段的值已经打印出来了。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">I0302 &lt;span style="color:#3677a9">08&lt;/span>:&lt;span style="color:#3677a9">20&lt;/span>:&lt;span style="color:#3677a9">58.393365&lt;/span> &lt;span style="color:#3677a9">9&lt;/span> controller.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">200&lt;/span>] Backend successfully reloaded.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调整阿里云日志组件配置">调整阿里云日志组件配置&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
执行下面的步骤请确保已经按照&lt;a href="https://help.aliyun.com/document_detail/86532.html">官方文档&lt;/a>正确部署阿里云日志服务在您的 K8S 集群之后，并且已达到要求的版本。
&lt;/div>
&lt;p>日志已经成功打印了，接下来就是调整日志采集的字段了，这里只需要调整日志服务 CRD 的扩展配置即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit AliyunLogConfig k8s-nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在修改配置之前，推荐先去 &lt;a href="https://regex101.com/">https://regex101.com/&lt;/a> 验证正则表达式是否正确，将调整过的正则表达式和 &lt;code>ingress-controller&lt;/code> 打印的日志贴入下图指定位置，就可以看出正则表达式是否正确。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gcfo9lxuc6j21gv0juwka.jpg" alt="image">&lt;/p>
&lt;p>然后将添加的字段名称（这个名称将作为 key 在日志服务中展示，可以与 header 中的字段不同）和正则表达式贴入如下 CRD 中。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>log.alibabacloud.com/v1alpha1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>AliyunLogConfig&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># your config name, must be unique in you k8s cluster&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logstore name to upload log&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">logstore&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># product code, only for k8s nginx ingress&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">productCode&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logtail config detail&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">logtailConfig&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputType&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugin&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># logtail config name, should be same with [metadata.name]&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configName&lt;/span>:&lt;span style="color:#666"> &lt;/span>k8s-nginx-ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputDetail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">plugin&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">inputs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>service_docker_stdout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">detail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">IncludeLabel&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">io.kubernetes.container.name&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-controller&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Stderr&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Stdout&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">processors&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>processor_regex&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">detail&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">KeepSource&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Keys&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- client_ip&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- x_forward_for&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- remote_user&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- method&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- url&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- version&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- body_bytes_sent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- http_referer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- http_user_agent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- request_length&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- request_time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- proxy_upstream_name&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_addr&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_response_length&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_response_time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- upstream_status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- req_id&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- host&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#999;font-style:italic">#需要添加的字段名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- ...&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">NoKeyError&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">NoMatchError&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">Regex&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#修改后的正则表达式&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">SourceKey&lt;/span>:&lt;span style="color:#666"> &lt;/span>content&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="日志控制台新增字段">日志控制台新增字段&lt;/h3>
&lt;p>如果上面的操作无误的话，日志服务中就会展示您添加的字段了，如果配置有误，所有的自定义字段都会不显示，只会显示保留字段名称。&lt;/p>
&lt;p>添加指定字段查询，就可以快速查看添加的字段了。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gcfohy9fv4j21460gxtc6.jpg" alt="image">&lt;/p>
&lt;h3 id="新增展示仪表盘">新增展示仪表盘&lt;/h3>
&lt;p>日志既然已经取到了，那么展示就很容易了，直接在查询栏中输入分析语句，日志服务支持 SQL 聚合日志，并直接生成统计图表，点击添加到仪表盘可以就可以添加到现有仪表盘或者新建一个仪表盘。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfos33c23j219a0nuae3.jpg" alt="image">&lt;/p>
&lt;h2 id="成果">成果&lt;/h2>
&lt;p>之后进行一些微调，添加过滤栏，由于这里统计的是登录用户，你甚至都可以添加一个词云来看看哪些用于使用系统比较频繁。当然，想添加什么都看您的喜好，日志在你手里，想怎么分析都可以。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gcfowk10tjj21970ns79i.jpg" alt="image">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>本次实现的功能并不是什么高深的功能，只不过是一个简单的访问日志记录和展示，相信每个系统其实都有一套这种功能。但是这种实现方式在我看来优点更多：&lt;/p>
&lt;ul>
&lt;li>无代码：全程没有写一行代码，如果有的话，也就是业务需要统一 &lt;code>Request Headers&lt;/code> 里面的字段。&lt;/li>
&lt;li>配置简单：只需要修改 nginx ConfigMap 中的一个字段，并在 CRD 中添加字段名称和正在表达式，唯一的难度可能就是正则表达式。&lt;/li>
&lt;li>配置快：整体的配置时间很短，加上查文档和调整图表也不过半天的时间，肯定比 &lt;code>提需求-评估-开发-测试-验收&lt;/code> 全流程走一遍，前端后端撕一遍要快的多的多的多。&lt;/li>
&lt;li>高度定制：可以根据自己的喜好，随意定制图表。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>最近发现阿里云日志服务是一个宝藏产品，从安全到 k8s 业务，从成本控制到疫情动态，日志服务真的就是把所有没有前端开发资源的服务都帮了一把。
&amp;mdash; 摘自本人朋友圈&lt;/p>
&lt;/blockquote></description></item><item><title>Post: 使用 Velero 进行集群备份与迁移</title><link>https://guoxudong.io/post/aliyun-velero/</link><pubDate>Wed, 13 Nov 2019 09:13:22 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-velero/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在近日的一个风和日丽的下午，正在快乐的写 bug 时，突然间钉钉就被 call 爆了，原来是 k8s 测试集群的一个 namespace 突然不见了。这个 namespace 里面有 60 多个服务，瞬间全部没有了……虽然得益于我们的 CI/CD 系统，这些服务很快都重新部署并正常运行了，但是如果在生产环境，那后果就是不可想象的了。在排查这个问题发生的原因的同时，集群资源的灾备和恢复功能就提上日程了，这时 Velero 就出现了。&lt;/p>
&lt;h2 id="velero">Velero&lt;/h2>
&lt;p>&lt;a href="https://github.com/vmware-tanzu/velero">Velero&lt;/a> 是 VMWare 开源的 k8s 集群备份、迁移工具。可以帮助我们完成 k8s 的例行备份工作，以便在出现上面问题的时候可以快速进行恢复。同时也提供了集群迁移功能，可以将 k8s 资源迁移到其他 k8s 集群的功能。Velero 将集群资源保存在对象存储中，默认情况下可以使用 &lt;a href="https://velero.io/docs/v1.1.0/aws-config">AWS&lt;/a>、&lt;a href="https://velero.io/docs/v1.1.0/azure-config">Azure&lt;/a>、&lt;a href="https://velero.io/docs/v1.1.0/gcp-config">GCP&lt;/a> 的对象存储，同时也给出了插件功能用来拓展其他平台的存储，这里我们用到的就是阿里云的对象存储 OSS，阿里云也提供了 Velero 的插件，用于将备份存储到 OSS 中。下面我就介绍一下如何在阿里云容器服务 ACK 使用 Velero 完成备份和迁移。&lt;/p>
&lt;blockquote>
&lt;p>Velero 地址：https://github.com/vmware-tanzu/velero&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>ACK 插件地址：https://github.com/AliyunContainerService/velero-plugin&lt;/p>
&lt;/blockquote>
&lt;h3 id="下载-velero-客户端">下载 Velero 客户端&lt;/h3>
&lt;p>Velero 由客户端和服务端组成，服务器部署在目标 k8s 集群上，而客户端则是运行在本地的命令行工具。&lt;/p>
&lt;ul>
&lt;li>前往 &lt;a href="https://github.com/vmware-tanzu/velero/releases">Velero 的 Release 页面&lt;/a> 下载客户端，直接在 GitHub 上下载即可&lt;/li>
&lt;li>解压 release 包&lt;/li>
&lt;li>将 release 包中的二进制文件 &lt;code>velero&lt;/code> 移动到 &lt;code>$PATH&lt;/code> 中的某个目录下&lt;/li>
&lt;li>执行 &lt;code>velero -h&lt;/code> 测试&lt;/li>
&lt;/ul>
&lt;h3 id="创建-oss-bucket">创建 OSS bucket&lt;/h3>
&lt;p>创建一个 OSS bucket 用于存储备份文件，这里也可以用已有的 bucket，之后会在 bucket 中创建 &lt;code>backups&lt;/code>、&lt;code>metadata&lt;/code>、&lt;code>restores&lt;/code>三个目录，这里建议在已有的 bucket 中创建一个子目录用于存储备份文件。&lt;/p>
&lt;p>创建 OSS 的时候一定要选对区域，要和 ACK 集群在同一个区域，存储类型和读写权限选择&lt;strong>标准存储&lt;/strong>和&lt;strong>私有&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/wap720/ad5fbf65gy1g8w7t8c4xbj21021d8thq.jpg" alt="image">&lt;/p>
&lt;h3 id="创建阿里云-ram-用户">创建阿里云 RAM 用户&lt;/h3>
&lt;p>这里需要创建一个阿里云 RAM 的用户，用于操作 OSS 以及 ACK 资源。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>新建权限策略&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1g8w80cjiv2j21uo18cag8.jpg" alt="image">&lt;/p>
&lt;p>策略内容：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Statement&amp;#34;&lt;/span>: [
{
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Action&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;ecs:DescribeSnapshots&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;ecs:CreateSnapshot&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;ecs:DeleteSnapshot&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;ecs:DescribeDisks&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;ecs:CreateDisk&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;ecs:Addtags&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;oss:PutObject&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;oss:GetObject&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;oss:DeleteObject&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;oss:GetBucket&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;oss:ListObjects&amp;#34;&lt;/span>
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Resource&amp;#34;&lt;/span>: [
&lt;span style="color:#ed9d13">&amp;#34;*&amp;#34;&lt;/span>
],
&lt;span style="color:#6ab825;font-weight:bold">&amp;#34;Effect&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;Allow&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>新建用户&lt;/p>
&lt;p>在新建用户的时候要选择 &lt;code>编程访问&lt;/code>，来获取 &lt;code>AccessKeyID&lt;/code> 和 &lt;code>AccessKeySecret&lt;/code>，这里请创建一个新用于用于备份，不要使用老用户的 AK 和 AS。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8w8h4ek4uj21h40ue785.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="部署服务端">部署服务端&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>拉取 &lt;a href="https://github.com/AliyunContainerService/velero-plugin">Velero 插件&lt;/a> 到本地&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/AliyunContainerService/velero-plugin
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置修改&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改 &lt;code>install/credentials-velero&lt;/code> 文件，将新建用户中获得的 &lt;code>AccessKeyID&lt;/code> 和 &lt;code>AccessKeySecret&lt;/code> 填入，这里的 OSS EndPoint 为之前 OSS 的访问域名（&lt;strong>注：这里需要选择外网访问的 EndPoint。&lt;/strong>）：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8w8xd1sgzj21c20cm75z.jpg" alt="image">&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#40ffff">ALIBABA_CLOUD_ACCESS_KEY_ID&lt;/span>=&amp;lt;ALIBABA_CLOUD_ACCESS_KEY_ID&amp;gt;
&lt;span style="color:#40ffff">ALIBABA_CLOUD_ACCESS_KEY_SECRET&lt;/span>=&amp;lt;ALIBABA_CLOUD_ACCESS_KEY_SECRET&amp;gt;
&lt;span style="color:#40ffff">ALIBABA_CLOUD_OSS_ENDPOINT&lt;/span>=&amp;lt;ALIBABA_CLOUD_OSS_ENDPOINT&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改 &lt;code>install/01-velero.yaml&lt;/code>，将 OSS 配置填入：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero.io/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>BackupStorageLocation&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">component&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>default&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">config&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">objectStorage&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">bucket&lt;/span>:&lt;span style="color:#666"> &lt;/span>&amp;lt;ALIBABA_CLOUD_OSS_BUCKET&amp;gt; &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># OSS bucket 名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">prefix&lt;/span>:&lt;span style="color:#666"> &lt;/span>&amp;lt;OSS_PREFIX&amp;gt; &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># bucket 子目录&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>alibabacloud&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero.io/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>VolumeSnapshotLocation&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">component&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>default&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">config&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">region&lt;/span>:&lt;span style="color:#666"> &lt;/span>&amp;lt;REGION&amp;gt; &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 地域，如果是华东2（上海），则为 cn-shanghai&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>alibabacloud&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>k8s 部署 Velero 服务&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 新建 namespace&lt;/span>
kubectl create namespace velero
&lt;span style="color:#999;font-style:italic"># 部署 credentials-velero 的 secret&lt;/span>
kubectl create secret generic cloud-credentials --namespace velero --from-file &lt;span style="color:#40ffff">cloud&lt;/span>=install/credentials-velero
&lt;span style="color:#999;font-style:italic"># 部署 CRD&lt;/span>
kubectl apply -f install/00-crds.yaml
&lt;span style="color:#999;font-style:italic"># 部署 Velero&lt;/span>
kubectl apply -f install/01-velero.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>测试 Velero 状态&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ velero version
Client:
Version: v1.1.0
Git commit: a357f21aec6b39a8244dd23e469cc4519f1fe608
Server:
Version: v1.1.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 Velero 的客户端和服务端已经部署成功。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务端清理&lt;/p>
&lt;p>在完成测试或者需要重新安装时，执行如下命令进行清理：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete namespace/velero clusterrolebinding/velero
kubectl delete crds -l &lt;span style="color:#40ffff">component&lt;/span>=velero
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="备份测试">备份测试&lt;/h3>
&lt;p>&lt;code>velero-plugin&lt;/code> 项目中已经给出 &lt;code>example&lt;/code> 用于测试备份。&lt;/p>
&lt;ul>
&lt;li>部署测试服务&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f examples/base.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>对 &lt;code>nginx-example&lt;/code> 所在的 namespace 进行备份&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero backup create nginx-backup --include-namespaces nginx-example --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>模拟 namespace 被误删&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete namespaces nginx-example
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用 Velero 进行恢复&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero restore create --from-backup nginx-backup --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="集群迁移">集群迁移&lt;/h3>
&lt;p>迁移方法同备份，在备份后切换集群，在新集群恢复备份即可。&lt;/p>
&lt;h3 id="高级用法">高级用法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>定时备份&lt;/p>
&lt;p>对集群资源进行定时备份，则可在发生意外的情况下，进行恢复（默认情况下，备份保留 30 天）。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 每日1点进行备份&lt;/span>
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style="color:#ed9d13">&amp;#34;0 1 * * *&amp;#34;&lt;/span>
&lt;span style="color:#999;font-style:italic"># 每日1点进行备份，备份保留48小时&lt;/span>
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style="color:#ed9d13">&amp;#34;0 1 * * *&amp;#34;&lt;/span> --ttl 48h
&lt;span style="color:#999;font-style:italic"># 每6小时进行一次备份&lt;/span>
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style="color:#ed9d13">&amp;#34;@every 6h&amp;#34;&lt;/span>
&lt;span style="color:#999;font-style:italic"># 每日对 web namespace 进行一次备份&lt;/span>
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style="color:#ed9d13">&amp;#34;@every 24h&amp;#34;&lt;/span> --include-namespaces web
&lt;/code>&lt;/pre>&lt;/div>&lt;p>定时备份的名称为：&lt;code>&amp;lt;SCHEDULE NAME&amp;gt;-&amp;lt;TIMESTAMP&amp;gt;&lt;/code>，恢复命令为：&lt;code>velero restore create --from-backup &amp;lt;SCHEDULE NAME&amp;gt;-&amp;lt;TIMESTAMP&amp;gt;&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>备份删除&lt;/p>
&lt;p>直接执行命令进行删除&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero delete backups &amp;lt;BACKUP_NAME&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>备份资源查看&lt;/p>
&lt;p>备份查看&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero backup get
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看定时备份&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero schedule get
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看可恢复备份&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">velero restore get
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>备份排除项目&lt;/p>
&lt;p>可为资源添加指定标签，添加标签的资源在备份的时候被排除。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 添加标签&lt;/span>
kubectl label -n &amp;lt;ITEM_NAMESPACE&amp;gt; &amp;lt;RESOURCE&amp;gt;/&amp;lt;NAME&amp;gt; velero.io/exclude-from-backup=&lt;span style="color:#24909d">true&lt;/span>
&lt;span style="color:#999;font-style:italic"># 为 default namespace 添加标签&lt;/span>
kubectl label -n default namespace/default velero.io/exclude-from-backup=&lt;span style="color:#24909d">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="问题汇总">问题汇总&lt;/h3>
&lt;h4 id="时区问题">时区问题&lt;/h4>
&lt;p>进行定时备份时，发现备份使用的事 UTC 时间，并不是本地时间，经过排查后发现是 &lt;code>velero&lt;/code> 镜像的时区问题，在调整后就会正常定时备份了，这里我重新调整了时区，直接调整镜像就好，修改 &lt;code>install/01-velero.yaml&lt;/code> 文件，将镜像替换为 &lt;code>registry-vpc.cn-shanghai.aliyuncs.com/keking/velero:latest&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">prometheus.io/path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/metrics&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">prometheus.io/port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;8085&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">prometheus.io/scrape&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">component&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceAccountName&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># sync from gcr.io/heptio-images/velero:latest&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>registry-vpc.cn-shanghai.aliyuncs.com/keking/velero:latest &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 修复时区后的镜像&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>IfNotPresent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /velero&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">args&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- server&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- --default-volume-snapshot-locations=alibabacloud:default&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>VELERO_SCRATCH_DIR&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>/scratch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ALIBABA_CLOUD_CREDENTIALS_FILE&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>/credentials/cloud&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/plugins&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugins&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/scratch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>scratch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/credentials&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cloud-credentials&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initContainers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>registry.cn-hangzhou.aliyuncs.com/acs/velero-plugin-alibabacloud:v1.2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>IfNotPresent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>velero-plugin-alibabacloud&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/target&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugins&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">emptyDir&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugins&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">emptyDir&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>scratch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cloud-credentials&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">secret&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">secretName&lt;/span>:&lt;span style="color:#666"> &lt;/span>cloud-credentials&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="版本问题">版本问题&lt;/h4>
&lt;p>截止发稿时，Velero 已经发布了 v1.2.0 版本，目前 ACK 的 Velero 的插件还未升级。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>近日正好有 k8s 集群服务迁移服务的需求，使用 Velero 完成了服务的迁移，同时也每日进行集群资源备份，其能力可以满足容器服务的灾备和迁移场景，实测可用，现已运行在所有的 k8s 集群。&lt;/p></description></item><item><title>Post: 使用 Grafana 展示阿里云监控指标</title><link>https://guoxudong.io/post/aliyun-cms-grafana/</link><pubDate>Thu, 07 Nov 2019 11:08:36 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-cms-grafana/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>对于阿里云用户来说，阿里云监控是一个很不错的产品，首先它在配额内使用是免费的！免费的！免费的！重要的事情说三遍。他的功能类似于 zabbix，但是比 zabbix 提供了更多的监控项，基本上在云上使用的资源都可以通过云监控来实时监控。而它提供的开箱即用方式，天然集成云资源，并提供多种告警方式，免去了监控与告警系统搭建与维护的繁琐，并且减少了资源的消耗，比购买 ECS 自己搭建 zabbix 要少消耗很多资源。同时阿里云监控和阿里云其他服务一样，也提供了比较完整的 OpenApi 以及各种语言的 sdk，可以基于阿里云的 OpenApi 将其与自己的系统集成。我们之前也是这么做的，但是随着监控项的增加，以及经常需要在办公场地监控投屏的专项监控页，光凭我们的运维开发工程师使用 vue 写速度明显跟不上，而且页面的美观程度也差很多。&lt;/p>
&lt;h3 id="手写前端-vs-grafana">手写前端 VS Grafana&lt;/h3>
&lt;p>手写前端虽然可定制化程度更高，但是需要消耗大量精力进行调试，对于运维人员，哪怕是运维开发也是吃不消的（前端小哥哥和小姐姐是不会来帮你的，下图就是我去年拿 vue 写的伪 Grafana 展示页面，花费了大约一周时间在调整这些前端元素）。
&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pfrw1licj22ye1gg4qp.jpg" alt="image">&lt;/p>
&lt;p>Grafana 则标准化程度很高，展示也更加符合大众审美，某些定制化需求可以通过自定义 DataSource 或者 AJAX 插件的 iframe 模式完成。开发后端 DataSource 肯定就没有前端调整 css 那么痛苦和耗时了，整体配置开发一个这样的页面可能只消耗一人天就能完成。而在新产品上线时，构建一个专项监控展示页面速度就更快了，几分钟内就能完成。
&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pfvp0keej22yc1g2khm.jpg" alt="image">&lt;/p>
&lt;h2 id="关于阿里云监控">关于阿里云监控&lt;/h2>
&lt;p>云监控（CloudMonitor）是一项针对阿里云资源和互联网应用进行监控的服务。&lt;/p>
&lt;p>云监控为云上用户提供开箱即用的企业级开放型一站式监控解决方案。涵盖 IT 设施基础监控，外网网络质量拨测监控，基于事件、自定义指标、日志的业务监控。为您全方位提供更高效、更全面、更省钱的监控服务。通过提供跨产品、跨地域的应用分组管理模型和报警模板，帮助您快速构建支持几十种云产品、管理数万实例的高效监控报警管理体系。通过提供 Dashboard，帮助您快速构建自定义业务监控大盘。使用云监控，不但可以帮助您提升您的系统服务可用时长，还可以降低企业 IT 运维监控成本。&lt;/p>
&lt;p>云监控服务可用于收集获取阿里云资源的监控指标或用户自定义的监控指标，探测服务可用性，以及针对指标设置警报。使您全面了解阿里云上的资源使用情况、业务的运行状况和健康度，并及时收到异常报警做出反应，保证应用程序顺畅运行。&lt;/p>
&lt;h2 id="关于-grafana">关于 Grafana&lt;/h2>
&lt;p>Grafana 是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。由于云监控的 Grafana 还没有支持告警，所以我们这里只用了 Grafana 的可视化功能，而告警本身就是云监控自带的，所以也不需要依赖 Grafana 来实现。而我们的 Prometheus 也使用了 Grafana 进行数据可视化，所以有现成的 Grafana-Server 使用。&lt;/p>
&lt;h2 id="阿里云监控对接-grafana">阿里云监控对接 Grafana&lt;/h2>
&lt;p>首先 Grafana 服务的部署方式这里就不做介绍了，请使用较新版本的 Grafana，最好是 5.5.0+。后文中也有我开源的基于阿里云云监控的 Grafana 的 helm chart，可以使用 helm 安装，并会直接导入云监控的指标，这个会在后文中介绍。&lt;/p>
&lt;h3 id="安装阿里云监控插件">安装阿里云监控插件&lt;/h3>
&lt;p>进入插件目录进行安装&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">cd&lt;/span> /var/lib/grafana/plugins/
git clone https://github.com/aliyun/aliyun-cms-grafana.git
service grafana-server restart
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是使用 docker 或者部署在 k8s 集群，这里也可以使用环境变量在 Grafana 部署的时候进行安装&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>GF_INSTALL_PLUGINS &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 多个插件请使用,隔开&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>grafana-simple-json-datasource,https://github.com/aliyun/aliyun-cms-grafana/archive/master.zip;aliyun-cms-grafana&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您也可以下载 aliyun-cms-grafana.zip 插件解压后，上传服务器的 Grafana 的 plugins 目录下，重启 grafana-server 即可。&lt;/p>
&lt;h3 id="配置云监控-datasource">配置云监控 DataSource&lt;/h3>
&lt;ol>
&lt;li>Grafana 启动后，进入 &lt;code>Configuration&lt;/code> 页面，选择 &lt;code>DataSource&lt;/code> Tab 页，单击右上方的&lt;code>Add data source&lt;/code>，添加数据源。&lt;/li>
&lt;li>选中&lt;code>CMS Grafana Service&lt;/code>，单击&lt;code>select&lt;/code>。
&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8ph0ukr0pj21nm0jk76m.jpg" alt="image">&lt;/li>
&lt;li>填写配置项，URL 根据云监控所在地域填写，并且填写阿里云账号的 accessKeyId 和 accessSecret，完成后单击&lt;code>Save&amp;amp;Test&lt;/code>。
&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1g8ph4bg2bij218m194n9f.jpg" alt="image">&lt;/li>
&lt;/ol>
&lt;h3 id="创建-dashboard">创建 Dashboard&lt;/h3>
&lt;ol>
&lt;li>单击 &lt;code>Create&lt;/code> -&amp;gt; &lt;code>Dashboard&lt;/code> -&amp;gt; &lt;code>Add Query&lt;/code>&lt;/li>
&lt;li>配置图标，数据源选择之前添加的 &lt;code>CMS Grafana Service&lt;/code>，然后文档中的配置项填入指标即可（这里要注意的是，云监控 API 给返回的只有实例 ID，并没有自定义的实例名称，这里需要手动将其填入 &lt;code>Y - column describe&lt;/code> 中；而且只支持输入单个 Dimension，若输入多个，默认选第一个，由于这些问题才有了后续我开发的 &lt;code>cms-grafana-builder&lt;/code> 的动机）。
&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1g8phck0irbj22ye13in79.jpg" alt="image">&lt;/li>
&lt;li>配置参考 &lt;a href="https://help.aliyun.com/document_detail/28619.html">云产品监控项&lt;/a>，
&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g8phg832uvj21a40vo793.jpg" alt="image">&lt;/li>
&lt;/ol>
&lt;h2 id="使用-helm-chart-的方式部署-grafana">使用 helm chart 的方式部署 Grafana&lt;/h2>
&lt;p>项目地址：https://github.com/sunny0826/cms-grafana-builder&lt;/p>
&lt;h3 id="cms-grafana-builder">cms-grafana-builder&lt;/h3>
&lt;p>由于上文中的问题，我们需要手动选择每个实例 ID 到 Dimension 中，并且还要讲该实例的名称键入 &lt;code>Y - column describe&lt;/code> 中，十分的繁琐，根本不可能大批量的输入。&lt;/p>
&lt;p>这就是我开发这个 Grafana 指标参数生成器的原因，起初只是一个 python 脚本，用来将我们要监控的指标组装成一个 Grafana 可以使用 json 文件，之后结合 Grafana 的容器化部署方法，将其做成了一个 helm chart。可以在启动的时候自动将需要的参数生成，并且每日会对所有指标进行更新，这样就不用每次新购或者释放掉资源后还需要再跑一遍脚本。&lt;/p>
&lt;h3 id="部署">部署&lt;/h3>
&lt;p>只需要将项目拉取下来运行 &lt;code>helm install&lt;/code> 命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm install my-release kk-grafana-cms &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--namespace {your_namespace} &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">access_key_id&lt;/span>={your_access_key_id} &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">access_secret&lt;/span>={your_access_secret} &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">region_id&lt;/span>={your_aliyun_region_id} &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">password&lt;/span>={admin_password}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多详情见 &lt;a href="https://github.com/sunny0826/cms-grafana-builder">github README&lt;/a>，欢迎提 issue 交流。&lt;/p>
&lt;h3 id="指标选择">指标选择&lt;/h3>
&lt;p>在部署成功后，可修改 ConfigMap：&lt;code>grafana-cms-metric&lt;/code>，然后修改对应的监控指标项。&lt;/p>
&lt;h3 id="效果">效果&lt;/h3>
&lt;p>ECS:
&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1g8pi9toh3dj21gv0pldyf.jpg" alt="">&lt;/p>
&lt;p>RDS:
&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g8pi9o91ejj21h80q316p.jpg" alt="">&lt;/p>
&lt;p>EIP:
&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pi9i9if3j21h70q3aif.jpg" alt="">&lt;/p>
&lt;p>Redis:
&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1g8pi8ss733j21h30pz7b6.jpg" alt="">&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>为了满足公司需求，后续还开发 DataSource 定制部分，用于公司监控大屏的展示，这部分是另一个项目，不在这个项目里，就不细说了，之后有机会总结后再进行分享。&lt;/p></description></item><item><title>Post: 阿里云产品夜谈-容器服务交流</title><link>https://guoxudong.io/post/aliyun-product-meetup/</link><pubDate>Mon, 30 Sep 2019 09:32:35 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-product-meetup/</guid><description>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1g7hb4iwdpvj213i0vs4qq.jpg" alt="image">&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>9月25日晚受邀来到阿里云飞天园区参加阿里云MVP产品夜谈，在会上遇到了容器服务团队的负责人易立，并就容器服务进行了交流。此次参加夜谈的除了来自全球各地的阿里云MVP，还有来自安全团队、容器团队、AIoT 团队、大数据团队、数据库团队、人工智能团队、中间件团队、搜索引擎&amp;amp;智能推荐团队的负责人&amp;amp;产品经理。各个参会的MVP可以根据自己的研究方向或者感兴趣的方向选择，直接与团队负责人面对面交流，获取阿里云产品的最新信息，并提出使用意见，促进产品的发展。由于主要从事云原生&amp;amp;容器方面的工作，我选择了容器团队，与阿里云容器服务团队负责人易立就容器服务进行交流，本文记录了部分交流内容。&lt;/p>
&lt;h2 id="容器服务交流">容器服务交流&lt;/h2>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1g7hdbw7rwij21zk13ax6s.jpg" alt="">&lt;/p>
&lt;h3 id="关于集群版本集群升级">关于集群版本&amp;amp;集群升级&lt;/h3>
&lt;p>众所周知，Kubernetes 以非常稳定的3个月发布一个版本速度在高速迭代这，Kubernetes v1.16.0 也即将 release ，但是目前 ACK 的 Kubernetes 版本依旧为 v1.12.6-aliyun.1 已落后官方4个大版本。得到的回复是新版本 1.14 已经上线，下周就可以升级了，1.14 版本之前已经上线，只不过一直在灰度测试，下周（2019年9月29日）就全面放开升级了。截止写这篇文章的时候，我们的多个 Kubernetes 集群已成功升级到 v1.14.6-aliyun.1 ，虽然在升级的时候出现了一点小问题，但是最后还是顺利解决了。&lt;/p>
&lt;p>然后就是集群升级的问题，集群升级的时候会建议对所有节点打快照，确保节点安全，但是如果在节点升级当中失败，就会出现一半为新版本节点，一半为旧版本节点的问题。我们的一个节点升级失败，就出现了上述问题，最后还是将该节点容器驱散，并将该节点移出集群才解决了升级问题。希望集群升级提供整体状态保存&amp;amp;回退功能，确保如果升级失败（或者出现新旧版本不兼容问题）的时候可以安全回退到之前版本。&lt;/p>
&lt;h3 id="关于容器服务前端展示">关于容器服务前端展示&lt;/h3>
&lt;p>ACK 的 WEB 界面相对简陋，一直以来都是对 Kubernetes Dashboard 进行了简单的包装，和其他公有云相比确实不如。不过这也不是容器服务独有的问题，阿里云你产品众多，大部分都有这样的问题。与易立交流得知，容器服务团队目前主要的任务还是确保 Kubernetes 集群的安全稳定运行，他们在安全和可用性上花费的大量精力，貌似并没有拿到什么前端开发资源。我注意到像费用中心、日志服务等产品都有了新版页面，这里希望能容器服务页面也能尽快改版，提高页面操作的便捷和美观。&lt;/p>
&lt;h3 id="关于授权管理">关于授权管理&lt;/h3>
&lt;p>一直以来容器服务都有授权管理功能，后来都基于RAM重新做了授权管理功能。但是RAM权限管理策略十分复杂，配置起来也很麻烦，不同的策略结构和语法学习起来非常困难。在配置和管理起来非常困难，我们只能把所有权限收回，每项权限都要根据需求提工单来进行配置，还时长会出现配置不生效的问题。而且这个问题一提出，就引起了大家的共鸣，后了解得知，为了安全合规的要求，操作便捷和安全合规没法兼顾。这里希望授权管理上能在确保合规的同时，能提升RAM操作的便捷性。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1g7hdrlln6vj21rm0ycwov.jpg" alt="image">
关于容器服务的交流主要是以上几点，其他的还包括监控、存储和 CI/CD 方面进行了交流，同时也获得了不少建议。当面给阿里云提需求的机会并不多，我也是抓住机会，把日常使用 ACK 的问题汇总之后一股脑的丢了出去。有类似需求的同学可以在&lt;a href="https://connect.aliyun.com">阿里云的聆听平台&lt;/a>上给阿里云提交建议，以我的经验，合理的需求会很快审核通过并排期开发，换句话说就是“人人都可以是阿里云的产品经理”。&lt;/p></description></item><item><title>Post: GitHub/Gitee 静态页托管页部署SSL证书</title><link>https://guoxudong.io/post/aliyun-ssl/</link><pubDate>Fri, 23 Aug 2019 09:36:55 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-ssl/</guid><description>
&lt;p>本文档介绍了在 &lt;a href="https://pages.github.com/">Github&lt;/a> / &lt;a href="https://gitee.com/help/articles/4136">Gitee&lt;/a> 的静态页托管Pages服务部署SSL证书，配置HTTPS安全访问的操作说明。&lt;/p>
&lt;h3 id="pages服务">Pages服务&lt;/h3>
&lt;p>Github/Gitee的Pages是一个免费的静态网页托管服务，您可以使用Github或码云Pages托管博客、项目官网等静态网页。常见的静态站点生成器有：Hugo、Jekyll、Hexo等，可以用来生成静态站点。默认情况下，托管的站点使用 &lt;code>github.io&lt;/code> / &lt;code>gitee.io&lt;/code> 域名来访问站点，同时也支持自定义域名，并配置强制使用HTTPS。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果要在 Gitee Pages 上配置自定义域名+HTTPS，则需要开启 Gitee Pages Pro 。&lt;/p>
&lt;/blockquote>
&lt;h3 id="github-pages-服务部署ssl证书">Github Pages 服务部署SSL证书&lt;/h3>
&lt;h4 id="前提条件">前提条件&lt;/h4>
&lt;ul>
&lt;li>GitHub 仓库&lt;/li>
&lt;li>开启 GitHub Pages&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g69e503ukoj21ig0hwad9.jpg" alt="image">&lt;/p>
&lt;h4 id="证书签发">证书签发&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>购买证书后点击申请&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g69ee2r500j22cc078t9z.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书申请&lt;/p>
&lt;p>如果该域名是由阿里云购买，则选择自动DNS验证，如果不是在阿里云购买的，可以选择手动验证。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/bmiddle/ad5fbf65gy1g69egsu7fuj20ye0swwh3.jpg" alt="image">&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书签发&lt;/p>
&lt;p>证书通过申请后，会收到证书签发的邮件。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/wap720/ad5fbf65gy1g69epoqw6uj21680cotaj.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="设置自定义域名">设置自定义域名&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>解析域名&lt;/p>
&lt;p>在证书签发成功后，添加DNS解析，将绑定了SSL证书的域名解析到 &lt;code>YourRepo.github.io&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65gy1g69evivrvqj21mi07it9g.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置域名&lt;/p>
&lt;p>解析之后将域名添加到 &lt;code>Custom domain&lt;/code> 并且点击 &lt;code>Save&lt;/code> ，Github会自动验证，出现&lt;code>Your site is published at https://YourDomainName.com/&lt;/code>则证明解析成功。&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g69esrcn2tj21a210wwk0.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="gitee-pages-pro-服务部署ssl证书">Gitee Pages Pro 服务部署SSL证书&lt;/h3>
&lt;h4 id="前提条件-1">前提条件&lt;/h4>
&lt;ul>
&lt;li>Gitee 仓库&lt;/li>
&lt;li>开启 Gitee Pages Pro&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Gitee 需要开启 Gitee Pages Pro 服务才支持自定义域名+HTTPS。&lt;/p>
&lt;/blockquote>
&lt;h4 id="证书签发-1">证书签发&lt;/h4>
&lt;p>证书签发同 Github Pages。这里介绍非阿里云购买的域名，进行证书申请。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>购买证书流程如上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>申请证书&lt;/p>
&lt;p>证书验证方式选择&lt;code>手工DNS验证&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拷贝验证信息&lt;/p>
&lt;p>拷贝验证信息内的&lt;code>记录值&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>验证解析&lt;/p>
&lt;p>进入购买域名所在网站进行DNS解析，这里以&lt;a href="https://www.name.com/zh-cn/">name.com&lt;/a>为例：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g69fqad2euj221g0700tt.jpg" alt="image">&lt;/p>
&lt;p>解析成功之后，返回阿里云SSL证书管理页面点击&lt;code>验证&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书签发&lt;/p>
&lt;p>签发成功后会收到签发成功的邮件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="设置自定义域名-1">设置自定义域名&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>解析域名&lt;/p>
&lt;p>进入域名所在网站，添加DNS解析记录，将绑定了SSL证书的域名解析到&lt;code>gitee.gitee.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g69fyy5it5j21z606mjs9.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置域名&lt;/p>
&lt;ol>
&lt;li>
&lt;p>域名添加到&lt;code>自定义域名&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g69g11wx0qj21a60xiq7m.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置证书&lt;/p>
&lt;ul>
&lt;li>
&lt;p>证书下载，选择 nginx 类型。&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/bmiddle/ad5fbf65gy1g69g3pua7xj20ne0v0jus.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gitee pages 配置证书，将证书文件与私钥文件贴入并提交。&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g69g64n1btj21bs0yogq8.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>勾选&lt;code>强制使用HTTPS&lt;/code>，并保存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="验证">验证&lt;/h3>
&lt;p>在Github/Gitee配置成功之后，您可在浏览器中输入 &lt;a href="https://www.YourDomainName.com">https://www.YourDomainName.com&lt;/a> 验证证书安装结果。可以正常访问静态托管站点，并且浏览器地址栏显示绿色的小锁标识说明证书安装成功。&lt;/p></description></item><item><title>Post: 阿里云 ACK 挂载 NAS 数据卷</title><link>https://guoxudong.io/post/nas-k8s/</link><pubDate>Mon, 08 Jul 2019 15:09:56 +0800</pubDate><guid>https://guoxudong.io/post/nas-k8s/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>今天接到一个将 NAS 数据卷挂载到 Kubernetes 集群的需求，需要将一个 NAS 数据卷挂载到集群中。这一很简单的操作由于好久没有操作了，去翻看了一下官方文档，发现官方文档还在停留在去年7月份&amp;hellip;为了防止之后还有相似情况的发生，这里将所有操作做一个简单记录。&lt;/p>
&lt;h2 id="购买存储包创建文件系统">购买存储包（创建文件系统）&lt;/h2>
&lt;p>在挂载 NAS 之前，首先要先购买 NAS 文件存储，这里推荐购买存储包，100G 的 SSD 急速型一年只需1400多，而容量型只要279，对于我这种只有少量 NAS 存储需求的人来说是是靠谱的，因为我只需要5G的左右的存储空间，SSD 急速型 NAS 一年只要18块，完美。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sglwrx0gj22wa09gae4.jpg" alt="image">&lt;/p>
&lt;p>选择想要创建 NAS 所在 VPC 和 区域&lt;/p>
&lt;h2 id="添加挂载点">添加挂载点&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>点击添加挂载点
&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sgp0dos2j22ky0iowkr.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 VPC 网络、交换机和权限组
&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g4sgpwqrgoj20xu0vowib.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="linux-挂载-nas-数据卷">Linux 挂载 NAS 数据卷&lt;/h2>
&lt;p>在挂载点创建成功后，就可以将 NAS 数据卷挂载到 Linux 系统，这里以 CentOS 为例：&lt;/p>
&lt;h3 id="安装-nfs-客户端">安装 NFS 客户端&lt;/h3>
&lt;p>如果 Linux 系统要挂载 NAS ，首先需要安装 NFS 客户端&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo yum install nfs-utils
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="挂载-nfs-文件系统">挂载 NFS 文件系统&lt;/h3>
&lt;p>这里阿里云早就进行了优化，点击创建的文件系统，页面上就可以 copy 挂载命令。页面提供了挂载地址的 copy 和挂载命令的 copy 功能。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g4sh2i33wnj22w40yyn55.jpg" alt="image">&lt;/p>
&lt;p>挂载命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo mount -t nfs -o &lt;span style="color:#40ffff">vers&lt;/span>=4,minorversion=0,noresvport xxxxx.cn-shanghai.nas.aliyuncs.com:/ /mnt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看挂载结果">查看挂载结果&lt;/h3>
&lt;p>直接在挂载数据卷所在服务上执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">df -h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就可以看到结果：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sh6xwyt8j20lj0850tq.jpg" alt="image">&lt;/p>
&lt;h2 id="kubernetes-集群挂载-nas-数据卷">Kubernetes 集群挂载 NAS 数据卷&lt;/h2>
&lt;p>K8S 的持久数据卷挂载大同小异，流程都是：&lt;strong>创建PV&lt;/strong> -&amp;gt; &lt;strong>创建PVC&lt;/strong> -&amp;gt; &lt;strong>使用PVC&lt;/strong>&lt;/p>
&lt;p>下面就简单介绍在阿里云上的操作：&lt;/p>
&lt;h3 id="创建存储卷pv">创建存储卷（PV）&lt;/h3>
&lt;p>首先要创建存储卷，选择 &lt;strong>容器服务&lt;/strong> -&amp;gt; &lt;strong>存储卷&lt;/strong> -&amp;gt; &lt;strong>创建&lt;/strong>&lt;/p>
&lt;p>这里要注意的是：&lt;strong>挂载点域名使用上面面的挂载地址&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g4shuiiyyqj20hc0hp0tz.jpg" alt="image">&lt;/p>
&lt;h3 id="创建存储声明pvc">创建存储声明（PVC）&lt;/h3>
&lt;p>&lt;strong>选择 NAS&lt;/strong> -&amp;gt; &lt;strong>已有存储卷&lt;/strong>&lt;/p>
&lt;p>选择刚才创建的存储卷&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g4shv5vs1kj20hx0bvt9g.jpg" alt="image">&lt;/p>
&lt;h3 id="使用pvc">使用PVC&lt;/h3>
&lt;p>使用的方法这里就不做详细介绍了，相关文章也比较多，这里就只记录 Deployment 中使用的 yaml 片段：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/data &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 挂载路径&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>volume-nas-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>volume-nas-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">persistentVolumeClaim&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">claimName&lt;/span>:&lt;span style="color:#666"> &lt;/span>nas-test &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># PVC 名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="结语">结语&lt;/h2>
&lt;p>这里只是做一个简单的记录，仅适用于阿里云 ACK 容器服务，同时也是 ACK 的一个简单应用。由于不经常对数据卷进行操作，这里做简单的记录，防止以后使用还要再看一遍文档。&lt;/p></description></item><item><title>Post: 4月29日 云栖社区分享PPT -- 阿里云容器服务的优势与调优</title><link>https://guoxudong.io/post/aliyun-share/</link><pubDate>Tue, 30 Apr 2019 18:46:24 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-share/</guid><description>
&lt;p>该PPT 为 2019年4月26日 在云栖社区分享使用，这里留作展示和记录，下载地址可以参考下方链接。&lt;/p>
&lt;iframe src="https://guoxudong.io/aliyun-share/index.html" style="width: 100%;height:600px;" frameborder="0">&lt;/iframe>
&lt;p>由于图片资源位于 GitHub 上，国内访问可能会有些慢，建议下载观看。&lt;/p>
&lt;p>PPT 下载地址：https://yq.aliyun.com/articles/700084&lt;/p></description></item><item><title>Post: 阿里云容器服务新建集群优化方案(更新版)</title><link>https://guoxudong.io/post/aliyun-k8s-perfect/</link><pubDate>Thu, 25 Apr 2019 22:26:06 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-k8s-perfect/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>选择阿里云的&lt;code>容器服务&lt;/code>，主要原因是公司主要业务基本都在运行在阿里云上。相较自建 kubernetes 集群，容器服务的优势在于部署相对简单，与阿里云 VPC 完美兼容，网络的配置相对简单，而如果使用 &lt;code>kubeadm&lt;/code> 安装部署 kubernetes 集群，除了众所周知的科学上网的问题，还有一系列的问题，包括 &lt;code>etcd&lt;/code> 、 &lt;code>Scheduler&lt;/code> 和 &lt;code>Controller-Manager&lt;/code> 的高可用问题等。并且如果使用托管版的阿里云 kubernetes 容器服务，还会省掉3台 master 节点的钱，并且可能将 master 节点的运维问题丢给阿里云解决，并且其提供的 master 节点性能肯定会比自购的配置好，这点是阿里云容器服务的研发小哥在来我司交流时专门强调的。&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>前面吹了阿里云容器服务的优势，那这里就说说在实践中遇到的容器服务的问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在新建集群的时候需要选择相应的 VPC 并选择 &lt;code>Pod&lt;/code> 和 &lt;code>Service&lt;/code> 所在的网段，这两个网段不能和 Node 节点存在于同一网段，但是如果您在阿里云中存在不止一个 VPC （VPC的网段可以是 10.0.0.0/8，172.16-31.0.0/12-16，192.168.0.0/16 ），如果网段设置不对的话，就可能会使原本存在该网段的 ECS 失联，需要删除集群重新创建。如果删除失败的话，还需要手动删除路由表中的记录（&lt;strong>别问我是怎么知道的&lt;/strong>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在使用容器服务创建集群后，会创建2个 SLB （之前是3个），一个是 SLB 是在 VPC 上并且绑定一个弹性IP（需要在创建的时候手动勾选创建弹性IP）用于 API Server，一个是经典网络的 SLB 使用提供给 Ingress 使用。但是这两个外网IP创建后的规格都是默认最大带宽、按流量收费，这个并不符合我们的要求，需要手动修改，&lt;del>然而这个修改都会在第二天才能生效&lt;/del>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器服务创建集群后，Node 节点的名称会使&lt;code>{region-id}.{ECS-id}&lt;/code>的形式，这个命名方式在集群监控，使用 &lt;code>kubectl&lt;/code> 操作集群方面就显得比较反人类了，每次都要去查 &lt;code>ECS id&lt;/code> 才能确定是哪个节点，而这个 Node 节点名称是不能修改的！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="网段问题解决">网段问题解决&lt;/h2>
&lt;p>这个比较好解决，甚至可以说不用解决，只要把网段规划好，不要出现网段冲突就好&lt;/p>
&lt;h2 id="node-节点名称无法修改问题解决">Node 节点名称无法修改问题解决&lt;/h2>
&lt;p>这个功能之前已有人在阿里聆听平台提出这个问题了，咨询了容器服务的研发小哥，得到的反馈是该功能已经在灰度测试了，相信很快就可以上线了。&lt;/p>
&lt;h2 id="创建-slb-规格问题解决">创建 SLB 规格问题解决&lt;/h2>
&lt;p>相较之前自动创建3个 SLB 的方式，目前的版本只会自动创建2个并且有一个是 VPC 内网+弹性IP的方式，已经进行了优化，但是 ingress 绑定的 SLB 还是经典网络类型，无法接入云防火墙并且规格也是不合适的。这里给出解决方案：&lt;/p>
&lt;h3 id="方法一使用-kubectl-配置">方法一：使用 &lt;code>kubectl&lt;/code> 配置&lt;/h3>
&lt;h4 id="1-创建新的-slb">1. 创建新的 SLB&lt;/h4>
&lt;ul>
&lt;li>这里需要创建一个新的 SLB 用来代替自动创建的不符合要求的 SLB。这里可以先私网 SLB 先不绑定弹性IP。&lt;em>&lt;strong>这里要注意的事，新建的 SLB 需要与 k8s集群处于同一 VPC 内，否则在后续会绑定失败&lt;/strong>&lt;/em>。
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1ma5lxgvdj21ws0s6qa5.jpg" alt="image">&lt;/li>
&lt;li>查看新购买 SLB 的 ID
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1ma8zuq1gj20sa0hoq4b.jpg" alt="image">&lt;/li>
&lt;/ul>
&lt;h4 id="2-在创建集群后重新绑定-ingress-controller-的-service">2. 在创建集群后重新绑定 &lt;code>ingress-controller&lt;/code> 的 &lt;code>Service&lt;/code>&lt;/h4>
&lt;p>首先需要使用 &lt;code>kubectl&lt;/code> 或者直接在阿里云控制台操作，创建新的 &lt;code>nginx-ingress-svc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#999;font-style:italic"># nginx ingress service&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-lb-{new-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-lb-{new-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># set loadbalancer to the specified slb id&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-id&lt;/span>:&lt;span style="color:#666"> &lt;/span>{SLB-ID}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># set loadbalancer address type to intranet if using private slb instance&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#39;true&amp;#39;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#service.beta.kubernetes.io/alicloud-loadbalancer-backend-label: node-role.kubernetes.io/ingress=true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>LoadBalancer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># do not route traffic to other nodes&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># and reserve client ip for upstream&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">externalTrafficPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Local&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>http&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">443&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>https&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">443&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># select app=ingress-nginx pods&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>ingress-nginx&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建成功后，可以进到 SLB 页面查看，可以看到 &lt;code>80&lt;/code> 和 &lt;code>443&lt;/code> 端口的监听已经被添加了
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1maej57c1j21ru0rwq8b.jpg" alt="image">&lt;/p>
&lt;h4 id="3-绑定符合要求的弹性ip">3. 绑定符合要求的弹性IP&lt;/h4>
&lt;p>确定 SLB 创建成功并且已经成功监听后，这里就可以为 SLB 绑定符合您需求的弹性IP了，这里我们绑定一个按宽带计费2M的弹性IP&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mak2r0p3j207k07mq33.jpg" alt="image">&lt;/p>
&lt;h4 id="4-验证连通性">4. 验证连通性&lt;/h4>
&lt;p>到上面这步，我们的 ingress 入口 SLB 已经创建完成，这里我们验证一下是否联通。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在k8s集群中部署一个 &lt;code>nginx&lt;/code> ，直接在阿里云容器服务控制台操作即可
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mant7ec6j21s40qegpr.jpg" alt="image">
这里创建 ingress 路由，&lt;strong>注意：这里的域名需要解析到刚才创建的 SLB 绑定的弹性IP&lt;/strong>
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1maqf7gdjj21ns0kymz8.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>访问该域名，显示 &lt;code>nginx&lt;/code> 欢迎页，则证明修改成功
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mat8srhnj21ak0hmact.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法二-使用阿里云容器服务控制台配置">方法二： 使用阿里云容器服务控制台配置&lt;/h3>
&lt;h4 id="1-阿里云容器控制台创建新-service">1. 阿里云容器控制台创建新 &lt;code>service&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>在阿里云容器服务控制台：&lt;code>路由与负载均衡&lt;/code> &amp;ndash;&amp;gt; &lt;code>服务&lt;/code> 点击&lt;code>创建&lt;/code>&lt;/li>
&lt;li>选择 &lt;code>kube-system&lt;/code> 命名空间&lt;/li>
&lt;li>类型选中&lt;code>负载均衡&lt;/code> - &lt;code>内网访问&lt;/code>&lt;/li>
&lt;li>关联 &lt;code>nginx-ingress-controller&lt;/code>&lt;/li>
&lt;li>并添加端口映射&lt;/li>
&lt;li>点击创建&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2g4fwfgevj20i50hsgmp.jpg" alt="image">&lt;/p>
&lt;h4 id="2-进入负载均衡查看-slb-是否创建">2. 进入负载均衡查看 SLB 是否创建&lt;/h4>
&lt;p>可见 SLB 已经成功创建&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2g4pb1d45j215303c74r.jpg" alt="image">&lt;/p>
&lt;h4 id="3-绑定符合要求的弹性ip-1">3. 绑定符合要求的弹性IP&lt;/h4>
&lt;p>同方法一&lt;/p>
&lt;h4 id="4验证连通性">4.验证连通性&lt;/h4>
&lt;p>同方法一&lt;/p>
&lt;h3 id="后续操作">后续操作&lt;/h3>
&lt;ul>
&lt;li>在确定新的 SLB 创建成功后，就可以将容器服务自动创建的 SLB 释放了&lt;/li>
&lt;li>删除 &lt;code>kube-system&lt;/code> 中原本绑定的 &lt;code>Service&lt;/code> &lt;strong>（目前版本已经可以关联删除绑定的 SLB 了，不用分开操作）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>这里别忘了，自动创建给API Server 的SLB还是按流量付费的，记得降配&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>上面的这些问题和解决方案都属于临时方案，已在阿里的聆听平台提出了上面的问题，相信很快就会有所改进。总的来说，阿里云容器服务在提供优质的 kubernetes 功能，并且只收 ECS 的钱，对于想学习 kubernetes 又没有太多资金的同学也比较友好，直接买按量付费实例，测试完释放即可，不用购买 master 节点，十分良心！&lt;/p></description></item><item><title>Post: Istio初探之Bookinfo样例部署</title><link>https://guoxudong.io/post/istio-bookinfo-demo/</link><pubDate>Thu, 21 Mar 2019 09:42:18 +0800</pubDate><guid>https://guoxudong.io/post/istio-bookinfo-demo/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前介绍了 Istio 和 Service Mesh 能给我们带来什么，我们为什么要用 Istio ，但大家对 Istio 的认识可能还没有那么深刻。正如Linux 的创始人 &lt;a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds&lt;/a> 的那句话：&lt;strong>Talk is cheap. Show me the code.&lt;/strong> 这里我们部署一个demo，由四个单独的微服务构成**（注意这里的四个微服务是由不同的语言编写的）**，用来演示多种 Istio 特性。这个应用模仿在线书店的一个分类，显示一本书的信息。页面上会显示一本书的描述，书籍的细节（ISBN、页数等），以及关于这本书的一些评论。&lt;/p>
&lt;h2 id="bookinfo-应用">Bookinfo 应用&lt;/h2>
&lt;p>Bookinfo 应用分为四个单独的微服务：&lt;/p>
&lt;ul>
&lt;li>&lt;code>productpage&lt;/code> ：&lt;code>productpage&lt;/code> 微服务会调用 &lt;code>details&lt;/code> 和 &lt;code>reviews&lt;/code> 两个微服务，用来生成页面。&lt;/li>
&lt;li>&lt;code>details&lt;/code> ：这个微服务包含了书籍的信息。&lt;/li>
&lt;li>&lt;code>reviews&lt;/code> ：这个微服务包含了书籍相关的评论。它还会调用 ratings 微服务。&lt;/li>
&lt;li>&lt;code>ratings&lt;/code> ：ratings 微服务中包含了由书籍评价组成的评级信息。&lt;/li>
&lt;/ul>
&lt;p>这里主要使用&lt;code>reviews&lt;/code>来演示 Istio 特性，&lt;code>reviews&lt;/code> 微服务有 3 个版本：&lt;/p>
&lt;ul>
&lt;li>v1 版本不会调用 &lt;code>ratings&lt;/code> 服务。&lt;/li>
&lt;li>v2 版本会调用 &lt;code>ratings&lt;/code> 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。&lt;/li>
&lt;li>v3 版本会调用 &lt;code>ratings&lt;/code> 服务，并使用 1 到 5 个红色星形图标来显示评分信息。&lt;/li>
&lt;/ul>
&lt;p>下图展示了这个应用的端到端架构。
&lt;img src="https://istio.io/docs/examples/bookinfo/noistio.svg" alt="Istio 注入之前的 Bookinfo 应用">&lt;/p>
&lt;center>Istio 注入之前的 Bookinfo 应用&lt;/center>
&lt;p>Bookinfo 是一个异构应用，几个微服务是由不同的语言编写的。这些服务对 Istio &lt;strong>并无依赖&lt;/strong>，但是构成了一个有代表性的服务网格的例子：它由多个服务、多个语言构成，并且 reviews 服务具有多个版本。&lt;/p>
&lt;h2 id="部署应用">部署应用&lt;/h2>
&lt;p>这里 Istio 的安装部署就不在赘述了。&lt;/p>
&lt;p>值得注意的是：如果使用的是&lt;strong>阿里云&lt;/strong>容器服务安装的 Istio ，需要在 &lt;code>容器服务&lt;/code>-&lt;code>市场&lt;/code>-&lt;code>应用目录&lt;/code> 中选择 &lt;code>gateway&lt;/code> 进行安装，这里提供了多种 &lt;code>gateway&lt;/code> ，我们选择 &lt;code>istio-ingressgateway&lt;/code>，选择直接安装的话会默认创建 &lt;code>LoadBalancer&lt;/code> 类型的Service，会自动创建一个经典网络SLB，这里是可以调整的，会在后续的文章中进行详细讲解，这里不做赘述。&lt;/p>
&lt;p>在 Istio 中运行这一应用，无需对应用自身做出任何改变。我们只要简单的在 Istio 环境中对服务进行配置和运行，具体一点说就是把 Envoy sidecar 注入到每个服务之中。这个过程所需的具体命令和配置方法由运行时环境决定，而部署结果较为一致，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://istio.io/docs/examples/bookinfo/withistio.svg" alt="Bookinfo 应用">&lt;/p>
&lt;center>Bookinfo 应用&lt;/center>
&lt;p>所有的微服务都和 Envoy sidecar 集成在一起，被集成服务所有的出入流量都被 sidecar 所劫持，这样就为外部控制准备了所需的 Hook，然后就可以利用 Istio 控制平面为应用提供服务路由、遥测数据收集以及策略实施等功能。&lt;/p>
&lt;h3 id="下载安装">下载安装&lt;/h3>
&lt;p>到 GitHub 中 istio 的 &lt;a href="https://github.com/istio/istio/releases">release&lt;/a> 中下载相应版本的 istio 包，下载后将 &lt;code>bin&lt;/code> 目录配置到环境变量 &lt;code>PATH&lt;/code> 中 &lt;code>export PATH=&amp;quot;/istio/bin:$PATH&amp;quot;&lt;/code> ，这里我们使用的是 &lt;code>istio 1.0.5&lt;/code> 版本&lt;/p>
&lt;p>Bookinfo 这个应用就在 &lt;code>samples/&lt;/code>目录下&lt;/p>
&lt;h2 id="在-阿里云容器服务kubernetes-中运行">在 阿里云容器服务（kubernetes） 中运行&lt;/h2>
&lt;p>启动应用容器，这里提供两种注入方法：&lt;strong>手工注入&lt;/strong>和&lt;strong>自动注入&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动注入&lt;/p>
&lt;p>需要修改 namespace ，为其添加 label 标签，这样所以在这个 namespace 中创建的应用都会被自动注入 sidecar&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl label namespace {inject-namespace} istio-injection=enabled
$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>手工注入&lt;/p>
&lt;p>需要使用 istioctl 命令生成注入后应用的配置，然后在部署应用&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml | kubectl apply -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>由于是测试，这里我们使用手工注入的方法。
上面的命令会启动全部的四个服务，其中也包括了 &lt;code>reviews&lt;/code> 服务的三个版本（&lt;code>v1&lt;/code>、&lt;code>v2&lt;/code> 以及 &lt;code>v3&lt;/code>）&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ istioctl kube-inject -f bookinfo.yaml | kubectl apply -f -
service/details created
deployment.extensions/details-v1 configured
service/ratings created
deployment.extensions/ratings-v1 created
service/reviews created
deployment.extensions/reviews-v1 created
deployment.extensions/reviews-v2 created
deployment.extensions/reviews-v3 created
service/productpage created
deployment.extensions/productpage-v1 created
$ kubectl get po
NAME READY STATUS RESTARTS AGE
details-v1-8685d68cf9-8fwdb 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
productpage-v1-5fd9fddc97-tx88z 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
ratings-v1-7c4d756c55-cn76d 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
reviews-v1-5d868db586-w28q5 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
reviews-v2-787647c7d9-7sc52 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
reviews-v3-6964c86584-8728m 2/2 Running &lt;span style="color:#3677a9">0&lt;/span> 1h
$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
details ClusterIP 10.11.224.17 &amp;lt;none&amp;gt; 9080/TCP 1h
productpage ClusterIP 10.11.16.86 &amp;lt;none&amp;gt; 9080/TCP 1h
ratings ClusterIP 10.11.244.59 &amp;lt;none&amp;gt; 9080/TCP 1h
reviews ClusterIP 10.11.162.37 &amp;lt;none&amp;gt; 9080/TCP 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 Bookinfo 应用已经正常运行&lt;/p>
&lt;h3 id="指定-ingress-和-ip-的端口">指定 ingress 和 IP 的端口&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>为为应用程序定义入口网关：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>确认网关创建完成&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get gateway
NAME AGE
bookinfo-gateway 1h
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>快速查询访问地址，这里的是之前在阿里云上创建的 &lt;code>LoadBalancer&lt;/code> 类型的 Service&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get svc istio-ingressgateway -n istio-system
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
istio-ingressgateway LoadBalancer 10.11.18.83 xxx.xxx.xxx.xxx 80:xxx/TCP,443:xxx/TCP 2h
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="查看效果">查看效果&lt;/h3>
&lt;p>访问 http://{EXTERNAL-IP}/productpage 注意：这里最后不能有/，否则将找不到页面
&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1ad2jg6p3j21g90mxgo7.jpg" alt="image">
多次刷新浏览器，将在 &lt;code>productpage&lt;/code> 中看到评论的不同的版本，它们会按照 round robin（红星、黑星、没有星星）的方式展现，这三个展示分来来自&lt;code>v1&lt;/code>、&lt;code>v2&lt;/code>和&lt;code>v3&lt;/code>版本，因为还没有使用 Istio 来控制版本的路由，所以这里显示的是以轮询的负载均衡算法进行展示。&lt;/p>
&lt;h3 id="请求路由">请求路由&lt;/h3>
&lt;p>BookInfo示例部署了三个版本的reviews服务，因此需要设置一个缺省路由。否则当多次访问该应用程序时，会发现有时输出会包含带星级的评价内容，有时又没有。出现该现象的原因是当没有为应用显式指定缺省路由时，Istio会将请求随机路由到该服务的所有可用版本上。&lt;/p>
&lt;p>在使用 Istio 控制 Bookinfo 版本路由之前，你需要在目标规则中定义好可用的版本 。&lt;/p>
&lt;p>运行以下命令为 Bookinfo 服务创建的默认的目标规则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果不需要启用双向TLS，请执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果需要启用双向 TLS，请执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f samples/bookinfo/networking/destination-rule-all-mtls.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待几秒钟，等待目标规则生效。你可以使用以下命令查看目标规则：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get destinationrules
NAME AGE
details 28s
productpage 28s
ratings 28s
reviews 28s
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="将所有微服务的缺省版本设置为v1">将所有微服务的缺省版本设置为v1&lt;/h3>
&lt;p>通过运行如下命令，将所有微服务的缺省版本设置为v1：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过下面的命令来显示所有已创建的路由规则：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get virtualservices
NAME AGE
bookinfo 33m
details 8s
productpage 8s
ratings 8s
reviews 8s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显示已创建的详细路由规划：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get virtualservices -o yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于路由规则是通过异步方式分发到代理的，过一段时间后规则才会同步到所有pod上。因此需要等几秒钟后再尝试访问应用。&lt;/p>
&lt;p>在浏览器中打开 Bookinfo 应用程序的URL: http://{EXTERNAL-IP}/productpage。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1adqyf9dej21g70oitbd.jpg" alt="image">&lt;/p>
&lt;p>可以看到 Bookinfo 应用程序的 &lt;code>productpage&lt;/code> 页面，显示的内容中不包含带星的评价信息，这是因为 &lt;code>reviews:v1&lt;/code> 服务不会访问ratings服务。&lt;/p>
&lt;h3 id="将来自特定用户的请求路由到reviewsv2">将来自特定用户的请求路由到reviews:v2&lt;/h3>
&lt;p>本例中，首先使用 Istio 将100%的请求流量都路由到了 Bookinfo 服务的&lt;code>v1&lt;/code>版本；然后再设置了一条路由规则，路由规则基于请求的 header（例如一个用户cookie）选择性地将特定的流量路由到了 &lt;code>reviews&lt;/code> 服务的&lt;code>v2&lt;/code>版本。&lt;/p>
&lt;p>通过运行如下命令，把来自测试用户&amp;quot;jason&amp;quot;的请求路由到 &lt;code>reviews:v2 &lt;/code>，以启用ratings服务。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过如下命令确认规则是否创建：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get virtualservice reviews -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
annotations:
kubectl.kubernetes.io/last-applied-configuration: |
{&lt;span style="color:#ed9d13">&amp;#34;apiVersion&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;kind&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;VirtualService&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;metadata&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;annotations&amp;#34;&lt;/span>:{},&lt;span style="color:#ed9d13">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;reviews&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;namespace&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;default&amp;#34;&lt;/span>},&lt;span style="color:#ed9d13">&amp;#34;spec&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;hosts&amp;#34;&lt;/span>:[&lt;span style="color:#ed9d13">&amp;#34;reviews&amp;#34;&lt;/span>],&lt;span style="color:#ed9d13">&amp;#34;http&amp;#34;&lt;/span>:[{&lt;span style="color:#ed9d13">&amp;#34;match&amp;#34;&lt;/span>:[{&lt;span style="color:#ed9d13">&amp;#34;headers&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;end-user&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;exact&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;jason&amp;#34;&lt;/span>}}}],&lt;span style="color:#ed9d13">&amp;#34;route&amp;#34;&lt;/span>:[{&lt;span style="color:#ed9d13">&amp;#34;destination&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;host&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;reviews&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;subset&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;v2&amp;#34;&lt;/span>}}]},{&lt;span style="color:#ed9d13">&amp;#34;route&amp;#34;&lt;/span>:[{&lt;span style="color:#ed9d13">&amp;#34;destination&amp;#34;&lt;/span>:{&lt;span style="color:#ed9d13">&amp;#34;host&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;reviews&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;subset&amp;#34;&lt;/span>:&lt;span style="color:#ed9d13">&amp;#34;v1&amp;#34;&lt;/span>}}]}]}}
creationTimestamp: &lt;span style="color:#ed9d13">&amp;#34;2019-03-21T06:01:10Z&amp;#34;&lt;/span>
generation: &lt;span style="color:#3677a9">1&lt;/span>
name: reviews
namespace: default
resourceVersion: &lt;span style="color:#ed9d13">&amp;#34;62486214&amp;#34;&lt;/span>
selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/virtualservices/reviews
uid: b9e41681-4b9e-11e9-a679-00163e045478
spec:
hosts:
- reviews
http:
- match:
- headers:
end-user:
exact: jason
route:
- destination:
host: reviews
subset: v2
- route:
- destination:
host: reviews
subset: v1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>确认规则已创建之后，在浏览器中打开BookInfo应用程序的URL: http://{EXTERNAL-IP}/productpage。&lt;/p>
&lt;p>以&amp;quot;jason&amp;quot;用户登录 &lt;code>productpage&lt;/code> 页面，您可以在每条评价后面看到星级信息。&lt;/p>
&lt;p>这里登录用户名为 &lt;code>jason&lt;/code> ，密码随便输入即可&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1adtjugp3j21gb0iygoa.jpg" alt="image">&lt;/p>
&lt;h3 id="流量转移">流量转移&lt;/h3>
&lt;p>除了基于内容的路由，Istio还支持基于权重的路由规则。&lt;/p>
&lt;p>首先，将所有微服务的缺省版本设置为v1：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl replace -f samples/bookinfo/networking/virtual-service-all-v1.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次，使用下面的命令把50%的流量从reviews:v1转移到reviews:v3:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl replace -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中多次刷新productpage页面，大约有50%的几率会看到页面中出现带红星的评价内容。&lt;/p>
&lt;p>说明： 注意该方式和使用容器编排平台的部署特性来进行版本迁移是完全不同的。容器编排平台使用了实例scaling来对流量进行管理。而通过Istio，两个版本的reviews服务可以独立地进行扩容和缩容，并不会影响这两个版本服务之间的流量分发。&lt;/p>
&lt;p>如果觉得 &lt;code>reviews：v3&lt;/code> 微服务已经稳定，你可以通过以下命令， 将 &lt;code>virtual service&lt;/code> 100％的流量路由到 &lt;code>reviews：v3&lt;/code>，从而实现一个灰度发布的功能。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl replace -f samples/bookinfo/networking/virtual-service-reviews-v3.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在华为云cce上运行">在华为云（CCE）上运行&lt;/h2>
&lt;p>华为云率先将 Istio 作为产品投入到公有云中进行商业应用，开通方式十分简单，只要在华为云CCE上创建集群，然后申请 Istio 公测即可。&lt;/p>
&lt;p>为了方便测试 Bookinfo 应用在华为云上提供了一键体验应用，点击即可省去刚刚那一系列的 &lt;code>kubectl&lt;/code> 操作&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afbs7oq4j21g90id0vv.jpg" alt="image">&lt;/p>
&lt;center>一键创建体验应用&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afgth1cgj219b0a7tb1.jpg" alt="image">&lt;/p>
&lt;center>点击灰度发布即可&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afjc5hvgj21fv0o1q6q.jpg" alt="image">&lt;/p>
&lt;center>创建金丝雀发布&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afnqyqlhj20ze0o00vl.jpg" alt="image">&lt;/p>
&lt;center>选择灰度发布的组件&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afp1c5ltj20zk0le765.jpg" alt="image">&lt;/p>
&lt;center>填写版本号&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afq846bjj20z80nowgl.jpg" alt="image">&lt;/p>
&lt;center>选择镜像版本&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afra8rmhj21050mfgpb.jpg" alt="image">&lt;/p>
&lt;center>版本创建完成后配置灰度策略&lt;/center>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1afwpan6qj21090mste1.jpg" alt="image">&lt;/p>
&lt;center>选择相应策略，策略下发即可&lt;/center>
&lt;p>总的来说，华为云的 Istio 确实已经是商业化应用，这里只是展示了部分灰度发布的功能。其他比如流量治理，流量监控等功能还没展示，这些功能做的十分细致，值得尝试。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="https://help.aliyun.com/document_detail/90563.html?spm=a2c4g.11186623.6.759.5dbd1f5fSB2m9T">在Kubernetes上基于Istio实现Service Mesh智能路由&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://support.huaweicloud.com/bestpractice-cce/cce_bestpractice_0012.html">基于ISTIO服务网格的灰度发布&lt;/a>&lt;/p></description></item><item><title>Post: 阿里云环境Istio初探</title><link>https://guoxudong.io/post/istio-demo/</link><pubDate>Wed, 13 Mar 2019 15:45:43 +0800</pubDate><guid>https://guoxudong.io/post/istio-demo/</guid><description>
&lt;h1 id="istio应用部署样例">istio应用部署样例&lt;/h1>
&lt;p>该实例为一套istio服务上线流程：&lt;code>注入&lt;/code>-&amp;gt;&lt;code>部署&lt;/code>-&amp;gt;&lt;code>创建目标规则&lt;/code>-&amp;gt;&lt;code>创建默认路由&lt;/code>。就大多数istio服务网格应用均可基于这一流程上线。&lt;/p>
&lt;h3 id="部署istio">部署istio&lt;/h3>
&lt;p>istio有多种部署方式，阿里云、华为云等云服务商均提供一键安装，同时也可以通过GitHub下载release包，使用&lt;code>install/kubernetes/istio-demo.yaml&lt;/code>部署，或者使用helm部署。&lt;strong>这里采用阿里云容器服务一键部署istio&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g117xxixlvj20a00ajdgb.jpg" alt="image">&lt;/p>
&lt;h3 id="部署两个版本的服务">部署两个版本的服务&lt;/h3>
&lt;p>这里选择一个简单的Python项目作为服务端，这里使用&lt;a href="https://github.com/fleeto">崔秀龙&lt;/a>老哥的&lt;a href="https://github.com/fleeto/flaskapp/blob/master/app/main.py">flaskapp&lt;/a>服务，该服务的作用就是提供2个url路径：&lt;/p>
&lt;ul>
&lt;li>一个是/env，用户获取容器中的环境变量，例如 http://flaskapp/env/version&lt;/li>
&lt;li>另一个是/fetch ，用于获取在参数url中指定的网址的内容，例如 http://flaskapp/fetch?url=http://weibo.com&lt;/li>
&lt;/ul>
&lt;p>创建2个Deployment，分别命名为 flaskapp-v1 和 flaskapp-v2 ，同时创建一个 Service ,将其命名为flaskapp。代码文件为 &lt;code>flaskapp.istio.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>http&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp-v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>dustise/flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>IfNotPresent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>version&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp-v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>dustise/flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>IfNotPresent&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>version&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>v2&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>两个版本Deployment的镜像一致，但是使用了不同的version标签区分，分别为 v1 和 v2 。实际环境中的镜像是不同的&lt;/li>
&lt;li>在两个Deployment中都有一个名为version的环境变量，分别为 v1 和 v2 。这里设置是为了方便后续区分服务。&lt;/li>
&lt;li>两个Deployment中都使用了 app 和 version 标签，在 istio 网格应用中通常会使用这两个标签作为应用和版本的标识。&lt;/li>
&lt;li>Service 中的 Selector 仅使用了一个 app 标签，这意味着该 Service 对两个 Deployment 都是有效的。&lt;/li>
&lt;li>将在 Service 中定义的端口根据 &lt;strong>istio 规范&lt;/strong>命名为http。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>istio注入并部署服务端&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ istioctl kube-inject -f flask.istio.yaml | kubectl apply -f -
service/flaskapp created
deployment.extensions/flaskapp-v1 created
deployment.extensions/flaskapp-v2 created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在rancher查看注入情况&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g1045ku3dcj20cj05kglp.jpg" alt="image">&lt;/p>
&lt;p>这里也可以使用&lt;code>kubectl describe po flaskapp-v1-7d4f9b8459-2ncnf&lt;/code>命令查看Pod容器，这里可以看到Pod中多了一个容器，名为&lt;code>istio-proxy&lt;/code>，这就表示注入成功了。而前面&lt;code>istio-init&lt;/code>的初始化容器，这个容器是用于初始化劫持的。&lt;/p>
&lt;h3 id="部署客户端">部署客户端&lt;/h3>
&lt;p>这里的客户端是一个安装了测试工具的镜像，测试的内容可以在容器内通过shell完成。代码文件为 &lt;code>sleep.istio.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ssh&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>dustise/sleep&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>IfNotPresent&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>istio注入并部署客户端&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ istioctl kube-inject -f sleep.istio.yaml | kubectl apply -f -
service/sleep created
deployment.extensions/sleep created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>sleep&lt;/code>应用的Pod进入Running状态就可以进行验证了&lt;/strong>&lt;/p>
&lt;h3 id="验证服务">验证服务&lt;/h3>
&lt;p>直接在sleep容器中执行命令行&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> i in &lt;span style="color:#ed9d13">`&lt;/span>seq 10&lt;span style="color:#ed9d13">`&lt;/span>;&lt;span style="color:#6ab825;font-weight:bold">do&lt;/span> http --body http://flaskapp/env/version;&lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>
v1
v2
...
v1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该命令使用一个for循环，重复访问 http://flaskapp/env/version ，查看内容，结果为 v1 和 v2 随机出现，各占一半。出现 v1 和 v2 版本轮流调用的效果，达到了基本的负载均衡的功能。&lt;/p>
&lt;h3 id="创建目标规则">创建目标规则&lt;/h3>
&lt;p>目标规则代码 &lt;code>flaskapp-destinationrule.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.istio.io/v1alpha3&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>DestinationRule&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">subsets&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>v2&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>部署目标规则（这里使用kubectl和istioctl均可）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f flaskapp-destinationrule.yaml
Created config destination-rule/default/flaskapp at revision &lt;span style="color:#3677a9">59183403&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建默认路由">创建默认路由&lt;/h3>
&lt;p>默认路由代码 &lt;code>flaskapp-default-vs-v2.yaml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.istio.io/v1alpha3&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>VirtualService&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp-default-v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hosts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">http&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">route&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">destination&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666"> &lt;/span>flaskapp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">subset&lt;/span>:&lt;span style="color:#666"> &lt;/span>v2&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>部署默认路由&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f flaskapp-default-vs-v2.yaml
Created config virtual-service/default/flaskapp-default-v2 at revision &lt;span style="color:#3677a9">59185583&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="验证路由规则是否生效">验证路由规则是否生效&lt;/h3>
&lt;p>再次在sleep容器中执行命令，查看新定义的流量管理规则是否生效&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> i in &lt;span style="color:#ed9d13">`&lt;/span>seq 10&lt;span style="color:#ed9d13">`&lt;/span>;&lt;span style="color:#6ab825;font-weight:bold">do&lt;/span> http --body http://flaskapp/env/version;&lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>
v2
v2
v2
v2
v2
v2
v2
v2
v2
v2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里就可以看到，设置的默认路由已经生效了，多次重复访问，返回的内容都是来自环境变量 version 设置为 v2 的版本，也就是v2版本。&lt;/p>
&lt;h4 id="kiali查看调用情况">kiali查看调用情况&lt;/h4>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65ly1g104tydblxj21az0li40i.jpg" alt="image">&lt;/p>
&lt;p>可以看到流量都进入了v2版本中&lt;/p>
&lt;h3 id="小结">小结&lt;/h3>
&lt;p>这里实现了一个极简的istio应用，可以帮助新手快速入门，官网提供的Bookinfo应用较为复杂。这里提供的小例子更为简洁易懂，非常利于入门。&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fleeto/istio-for-beginner">《深入浅出Istio》&lt;/a> &amp;mdash; 崔秀龙&lt;/li>
&lt;/ul></description></item><item><title>Post: 阿里云日志服务采集k8s日志并实现livetail功能</title><link>https://guoxudong.io/post/dashboard-k8s/</link><pubDate>Thu, 14 Feb 2019 14:07:06 +0800</pubDate><guid>https://guoxudong.io/post/dashboard-k8s/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>目前的项目日志都是通过Logtail直接采集，投递到OSS持久化，同时可以通过阿里云日志服务、devops自建平台进行查看（虽然大部分人是直接登录ECS查看=。=），
在开始进行容器化之后，同样遇到日志的问题，目前的解决方案是阿里云日志服务持久化和展现格式化后的日志、使用rancher查看实时日志，
但是之前由于rancher平台出现一些问题，导致不能及时查看日志的情况，在这个背景下对阿里云日志服务采集k8s日志和livetail进行搭建并调研此方案是否可行。&lt;/p>
&lt;/blockquote>
&lt;h1 id="简介转自阿里云官方文档">简介（转自阿里云官方文档）&lt;/h1>
&lt;p>日志服务（Log Service，简称 LOG）是针对日志类数据的一站式服务，在阿里巴巴集团经历大量大数据场景锤炼而成。您无需开发就能快捷完成日志数据采集、消费、投递以及查询分析等功能，提升运维、运营效率，建立 DT 时代海量日志处理能力。&lt;/p>
&lt;h1 id="kubernetes日志采集组件安装">kubernetes日志采集组件安装&lt;/h1>
&lt;h2 id="安装logtail">安装Logtail&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>进入阿里云容器服务找到集群id
&lt;img src="https://guoxudong.io/images/source/log_ser.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过ssh登录master节点，或者任意安装了kubectl并配置了该集群kubeconfig的服务器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行命令，将${your_k8s_cluster_id}替换为集群id&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget http://logtail-release-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/kubernetes/alicloud-log-k8s-install.sh -O alicloud-log-k8s-install.sh; chmod &lt;span style="color:#3677a9">744&lt;/span> ./alicloud-log-k8s-install.sh; sh ./alicloud-log-k8s-install.sh &lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">your_k8s_cluster_id&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Project k8s-log-${your_k8s_cluster_id}下会自动创建名为config-operation-log的Logstore，用于存储alibaba-log-controller的运行日志。请勿删除此Logstore，否则无法为alibaba-log-controller排查问题。&lt;/li>
&lt;li>若您需要将日志采集到已有的Project，请执行安装命令sh ./alicloud-log-k8s-install.sh${your_k8s_cluster_id} ${your_project_name} ，并确保日志服务Project和您的Kubernetes集群在同一地域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>该条命令其实就是执行了一个shell脚本，使用helm安装了采集kubernetes集群日志的组件&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-vim" data-lang="vim">#!&lt;span style="color:#ed9d13">/bin/&lt;/span>bash&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $# -eq &lt;span style="color:#3677a9">0&lt;/span> ] ; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[Invalid Param], use sudo ./install-k8s-log.sh {your-k8s-cluster-id}&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>clusterName=$(echo $&lt;span style="color:#3677a9">1&lt;/span> | tr &lt;span style="color:#ed9d13">&amp;#39;[A-Z]&amp;#39;&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;[a-z]&amp;#39;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>curl --connect-timeout &lt;span style="color:#3677a9">5&lt;/span> http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/region-id&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $? != &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] ECS meta server connect fail, only support alibaba cloud k8s service&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>regionId=`curl http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/region-id`&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>aliuid=`curl http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/owner-account-id`&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>helmPackageUrl=&lt;span style="color:#ed9d13">&amp;#34;http://logtail-release-$regionId.oss-$regionId.aliyuncs.com/kubernetes/alibaba-cloud-log.tgz&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>wget $helmPackageUrl -O alibaba-cloud-log.tgz&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $? != &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] download alibaba-cloud-log.tgz from $helmPackageUrl failed&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>project=&lt;span style="color:#ed9d13">&amp;#34;k8s-log-&amp;#34;&lt;/span>$clusterName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $# -ge &lt;span style="color:#3677a9">2&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> project=$&lt;span style="color:#3677a9">2&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>echo [INFO] your k8s is using project : $project&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>helm install alibaba-cloud-log.tgz --name alibaba-log-controller \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set ProjectName=$project \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set RegionId=$regionId \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set InstallParam=$regionId \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set MachineGroupId=&lt;span style="color:#ed9d13">&amp;#34;k8s-group-&amp;#34;&lt;/span>$clusterName \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set Endpoint=$regionId&lt;span style="color:#ed9d13">&amp;#34;-intranet.log.aliyuncs.com&amp;#34;&lt;/span> \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set AlibabaCloudUserId=&lt;span style="color:#ed9d13">&amp;#34;:&amp;#34;&lt;/span>$aliuid \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set LogtailImage.Repository=&lt;span style="color:#ed9d13">&amp;#34;registry.$regionId.aliyuncs.com/log-service/logtail&amp;#34;&lt;/span> \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set ControllerImage.Repository=&lt;span style="color:#ed9d13">&amp;#34;registry.$regionId.aliyuncs.com/log-service/alibabacloud-log-controller&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>installRst=$?&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $installRst -eq &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[SUCCESS] install helm package : alibaba-log-controller success.&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">0&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] install helm package failed, errno &amp;#34;&lt;/span> $installRst&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">0&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>命令执行后，会在kubernetes集群中的每个节点运行一个日志采集的pod：logatail-ds，该pod位于kube-system&lt;/p>
&lt;p>&lt;img src="https://guoxudong.io/images/source/log_detail.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成后，可使用以下命令来查看pod状态，若状态全部成功后，则表示安装完成&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm status alibaba-log-controller
LAST DEPLOYED: Thu Nov &lt;span style="color:#3677a9">22&lt;/span> 15:09:35 &lt;span style="color:#3677a9">2018&lt;/span>
NAMESPACE: default
STATUS: DEPLOYED
RESOURCES:
==&amp;gt; v1/ServiceAccount
NAME SECRETS AGE
alibaba-log-controller &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/CustomResourceDefinition
NAME AGE
aliyunlogconfigs.log.alibabacloud.com &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/ClusterRole
alibaba-log-controller &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/ClusterRoleBinding
NAME AGE
alibaba-log-controller &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/DaemonSet
NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE
logtail-ds &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &amp;lt;none&amp;gt; &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/Deployment
NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
alibaba-log-controller &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1/Pod(related)
NAME READY STATUS RESTARTS AGE
logtail-ds-2fqs4 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-4bz7w 1/1 Running &lt;span style="color:#3677a9">1&lt;/span> 6d
logtail-ds-6vg88 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-7tp6v 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-9575c 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-bgq84 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-kdlhr 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-lknxw 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-pdxfk 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-pf4dz 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-rzsnw 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-sqhbv 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-vvtwn 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-wwmhg 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-xbp4j 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-zpld9 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
alibaba-log-controller-85f8fbb498-nzhc8 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="配置日志组件展示">配置日志组件展示&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>在集群内安装好日志组件后，登录阿里云日志服务控制台，就会发现有一个新的project，名称为k8s-log-{集群id}
&lt;img src="https://guoxudong.io/images/source/log_src_de.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建Logstore
&lt;img src="https://guoxudong.io/images/source/log-1.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据导入
&lt;img src="https://guoxudong.io/images/source/log-2.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择数据类型中选择docker标准输出
&lt;img src="https://guoxudong.io/images/source/log-3.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据源配置，这里可以使用默认的
&lt;img src="https://guoxudong.io/images/source/log-4.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择数据源
&lt;img src="https://guoxudong.io/images/source/log-5.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置好之后等待1-2分钟，日志就会进来了
&lt;img src="https://guoxudong.io/images/source/log-6.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了快速查询和过滤，需要配置索引
&lt;img src="https://guoxudong.io/images/source/log-7.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加容器名称、命名空间、pod名称作为索引（后续使用livetail需要）
&lt;img src="https://guoxudong.io/images/source/log-8.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这样就完成了一个k8s集群日志采集和展示的基本流程了&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="livetail功能使用">livetail功能使用&lt;/h1>
&lt;h2 id="背景介绍">背景介绍&lt;/h2>
&lt;p>在线上运维的场景中，往往需要对日志队列中进入的数据进行实时监控，从最新的日志数据中提取出关键的信息进而快速地分析出异常原因。在传统的运维方式中，如果需要对日志文件进行实时监控，需要到服务器上对日志文件执行命令tail -f，如果实时监控的日志信息不够直观，可以加上grep或者grep -v进行关键词过滤。日志服务在控制台提供了日志数据实时监控的交互功能LiveTail，针对线上日志进行实时监控分析，减轻运维压力。&lt;/p>
&lt;h2 id="使用方法">使用方法&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>这里选择来源类型为kubernetes，命名空间、pod名称、容器名称为上一步新建的3个索引的内容，过滤关键字的功劳与tail命令后加的grep命令是一样的，用于关键词过滤
&lt;img src="https://guoxudong.io/images/source/log-9.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击开启livetail，这时就有实时日志展示出来了
&lt;img src="https://guoxudong.io/images/source/log-10.png" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>以上就是阿里云livetail日志服务功能&lt;/strong>&lt;/p></description></item><item><title>Post: 为ingress配置SSL证书，实现HTTPS访问</title><link>https://guoxudong.io/post/https-ingress/</link><pubDate>Sat, 29 Dec 2018 21:28:13 +0800</pubDate><guid>https://guoxudong.io/post/https-ingress/</guid><description>
&lt;blockquote>
&lt;p>devops平台率先在公司内使用kubernetes集群提供后端服务，但是由于之前一直处于探索阶段，所以使用的事http的方式提供后端服务，但是在开发统一入口后，出现了访问HTTPS页面的跨域问题，由此引出了后端服务配置SSL证书的问题&lt;/p>
&lt;/blockquote>
&lt;h1 id="使用rancher配置ssl证书">使用rancher配置SSL证书&lt;/h1>
&lt;h2 id="下载ssl证书文件">下载SSL证书文件&lt;/h2>
&lt;p>首先需要获得SSL证书文件，可以直接在阿里云SSL证书管理控制台下载&lt;/p>
&lt;p>选中需要下载证书，选择下载nginx证书
&lt;img src="https://guoxudong.io/images/source/zhengshu.png" alt="image">&lt;/p>
&lt;h2 id="将证书上传项目">将证书上传项目&lt;/h2>
&lt;p>打开rancher，选择要使用证书的项目，点击资源中的证书&lt;/p>
&lt;h2 id="将证书上传项目-1">将证书上传项目&lt;/h2>
&lt;p>打开rancher，选择要使用证书的项目，点击资源中的证书
&lt;img src="https://guoxudong.io/images/source/https-1.png" alt="image">
添加证书，点击从文件上传
&lt;img src="https://guoxudong.io/images/source/https-2.png" alt="image">
上传证书文件中的秘钥和证书，点击保存即可&lt;/p>
&lt;h1 id="使用yaml上传证书">使用yaml上传证书&lt;/h1>
&lt;p>这个证书的原理其实是在相应的命名空间创建了一个包含证书信息的secrets&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">data&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tls.crt&lt;/span>:&lt;span style="color:#666"> &lt;/span>{私钥}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tls.key&lt;/span>:&lt;span style="color:#666"> &lt;/span>{证书}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Secret&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>keking-cn&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-plat&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>kubernetes.io/tls&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在kubernetes上运行该yaml即可&lt;/p>
&lt;h1 id="rancher中证书绑定">rancher中证书绑定&lt;/h1>
&lt;p>选中需要绑定证书的ingress，点击编辑，选中证书，保存即可（由于ingress-controller中没有绑定默认证书，所以这里不能选中默认）
&lt;img src="https://guoxudong.io/images/source/https-3.png" alt="image">
保存完毕，证书即可生效&lt;/p></description></item><item><title>Post: 阿里云部署rancher2.1采坑记</title><link>https://guoxudong.io/post/install-rancher/</link><pubDate>Thu, 29 Nov 2018 18:28:13 +0800</pubDate><guid>https://guoxudong.io/post/install-rancher/</guid><description>
&lt;blockquote>
&lt;p>近期由于公司需要将部署在ucloud上的rancher迁移到阿里云上，所以将部署到阿里云的图中遇到的问题和踩到的坑在这里进行记录。&lt;/p>
&lt;/blockquote>
&lt;h1 id="无法删除namespace">无法删除namespace&lt;/h1>
&lt;p>在安装新环境的rancher之前，需要将kubernetes集群中cattle-system ns下面的cluster-agent和node-agent干掉，这里我选择直接删除cattle-system这个命名空间&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete ns cattle-system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而问题来了，在删除命名空间之后，这个命名空间并没有立刻被删除，而是一直处于Terminating状态，这里我专门写了一篇文章解决这个问题，这里就不再赘述&lt;/p>
&lt;h1 id="阿里云证书配置">阿里云证书配置&lt;/h1>
&lt;p>由于之前使用的ucloud的机器进行测试，使用默认自签名证书并没有使用SSL证书，所以在配置证书这里遇到的许多的问题&lt;/p>
&lt;p>首先根据官方文档使用权威CA机构颁发的证书，这里使用的是本公司自己的证书&lt;/p>
&lt;p>获取证书方法：
&lt;img src="https://guoxudong.io/images/source/jinrussl.png" alt="image">&lt;/p>
&lt;p>点击下载证书，选择nginx证书下载
&lt;img src="https://guoxudong.io/images/source/zhengshu.png" alt="image">&lt;/p>
&lt;p>之后将下载的证书上传到rancher所在服务器，并配置好数据卷挂载&lt;/p>
&lt;p>将下面代码的挂载地址指向证书文件，运行代码&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run -d --restart=unless-stopped &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-p 80:80 -p 443:443 &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /root/var/log/auditlog:/var/log/auditlog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-e &lt;span style="color:#40ffff">AUDIT_LEVEL&lt;/span>=&lt;span style="color:#3677a9">3&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /etc/your_certificate_directory/fullchain.pem:/etc/rancher/ssl/cert.pem &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /etc/your_certificate_directory/privkey.pem:/etc/rancher/ssl/key.pem &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>rancher/rancher:latest --no-cacerts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后会自动冲dockerhub上拉取最新的rancher进行进行安装，之后使用命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker ps
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看容器是否在运行，如果运行正常，则后端的配置就完成了&lt;/p>
&lt;p>划重点：这是是在后端配置了证书，所以在阿里云的配置上要使用四层TCP监听&lt;/p>
&lt;p>这个地方可是坑了我许久，我一直在前端配置https七层监听，导致一直无法正常访问，一度已经到了怀疑人生的地步=。=&lt;/p>
&lt;p>之后就是简单的阿里云SLB配置四层TCP监听，这里也就不再赘述了&lt;/p>
&lt;h1 id="k8s集群导入rancher">k8s集群导入rancher&lt;/h1>
&lt;p>前后端都准备就绪，现在就可以访问rancher了，访问rancher根据页面提示进行基本配置，登录后选择添加集群&lt;/p>
&lt;p>选择导入现有集群
&lt;img src="https://guoxudong.io/images/source/add.png" alt="image">&lt;/p>
&lt;p>为集群创建一个rancher中的名称，然后根据提示将命令拷贝到k8s集群所在宿主机执行即可，注意：这里由于配置了证书，所以选择有证书，不绕过证书的那个命令执行，之后就可看到集群数据导入中
&lt;img src="https://guoxudong.io/images/source/wating.png" alt="image">&lt;/p>
&lt;p>等待几秒即可开心的使用rancher了！&lt;/p>
&lt;h1 id="关于rancher部署后访问集群api超时问题">关于rancher部署后访问集群api超时问题&lt;/h1>
&lt;p>经过排查，原因是阿里云在容器服务对外连接处设置了TLS双向认证，导致rancher的外网ip经常性的被拦截，导致超时&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;p>对k8s集群中rancher的cattle-cluster-agent传递内网参数，将其配置为内网连接，就可以正常访问了&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n cattle-system patch deployments cattle-cluster-agent --patch &lt;span style="color:#ed9d13">&amp;#39;{
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;spec&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;template&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;spec&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;hostAliases&amp;#34;: [{
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;hostnames&amp;#34;:[&amp;#34;rancher.keking.cn&amp;#34;], #rancher的域名
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;ip&amp;#34;: &amp;#34;10.0.0.219&amp;#34; #rancher部署地址
&lt;/span>&lt;span style="color:#ed9d13"> }]
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13">}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>