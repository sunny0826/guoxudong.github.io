<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 容器</title><link>https://guoxudong.io/tags/%E5%AE%B9%E5%99%A8/</link><description>Recent content in 容器 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 04 Dec 2019 17:09:51 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 小工具介绍：KubeWatch</title><link>https://guoxudong.io/post/kubewatch/</link><pubDate>Wed, 04 Dec 2019 17:09:51 +0800</pubDate><guid>https://guoxudong.io/post/kubewatch/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这次要介绍一个 Kubernetes 资源观测工具，实时监控 Kubernetes 集群中各种资源的新建、更新和删除，并实时通知到各种协作软件/聊天软件，目前支持的通知渠道有：&lt;/p>
&lt;ul>
&lt;li>&lt;code>slack&lt;/code>&lt;/li>
&lt;li>&lt;code>hipchat&lt;/code>&lt;/li>
&lt;li>&lt;code>mattermost&lt;/code>&lt;/li>
&lt;li>&lt;code>flock&lt;/code>&lt;/li>
&lt;li>&lt;code>webhook&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>我这边开发了钉钉的通知渠道，但是在上游 &lt;a href="https://github.com/bitnami-labs/kubewatch/issues/198">ISSUE#198&lt;/a> 中提出的贡献请求并没有得到回应，所以这边只能 fork 了代码，然后自己进行了开发，以支持钉钉通知。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>这里推荐使用 helm 进行安装，快速部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm install kubewatch stable/kubewatch &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set rbac.create=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.channel=&lt;span style="color:#ed9d13">&amp;#39;#YOUR_CHANNEL&amp;#39;&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.token=&lt;span style="color:#ed9d13">&amp;#39;xoxb-YOUR_TOKEN&amp;#39;&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set resourcesToWatch.pod=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set resourcesToWatch.daemonset=&lt;span style="color:#24909d">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想使用钉钉通知，则可以在 &lt;a href="https://github.com/sunny0826/kubewatch-chat">GitHub&lt;/a> 上拉取我的代码，代码中包含 helm chart 包，可直接进行安装&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/sunny0826/kubewatch-chat.git
&lt;span style="color:#24909d">cd&lt;/span> kubewatch-chat
helm install kubewatch kubewatch &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set dingtalk.sign=&lt;span style="color:#ed9d13">&amp;#34;XXX&amp;#34;&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set dingtalk.token=&lt;span style="color:#ed9d13">&amp;#34;XXXX-XXXX-XXXX&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="钉钉配置">钉钉配置&lt;/h2>
&lt;p>在钉钉中创建 &lt;code>智能群助手&lt;/code> ，之后&lt;/p>
&lt;h3 id="获取-token">获取 token&lt;/h3>
&lt;p>复制的 webhook 中 &lt;code>https://oapi.dingtalk.com/robot/send?access_token={YOUR_TOKEN}&lt;/code>, &lt;code>{YOUR_TOKEN}&lt;/code> 就是要填入的 token。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1g9ku2hvs16j20ep05smxk.jpg" alt="">&lt;/p>
&lt;h2 id="安全设置">安全设置&lt;/h2>
&lt;p>钉钉智能群助手在更新后新增了安全设置，提供三种验证方式 &lt;code>自定义关键词&lt;/code> &lt;code>加签&lt;/code> &lt;code>IP地址（段）&lt;/code>，这里推荐使用 &lt;code>IP地址（段）的方式&lt;/code>，直接将 Kubernetes 集群的出口 IP 填入设置即可。同时也提供了 &lt;code>加签&lt;/code> 的方式，拷贝秘钥，将其填入 &lt;code>dingtalk.sign&lt;/code> 中。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1g9ku6qjwy2j20fo077glw.jpg" alt="">&lt;/p>
&lt;h2 id="项目配置">项目配置&lt;/h2>
&lt;p>编辑 &lt;code>kubewatch/value.yaml&lt;/code> ，修改配置&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#999;font-style:italic">## Global Docker image parameters&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">## Please, note that this will override the image parameters, including dependencies, configured to use the global value&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">## Current available global Docker image parameters: imageRegistry and imagePullSecrets&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">##&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># global:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># imageRegistry: myRegistryName&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># imagePullSecrets:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># - myRegistryKeySecretName&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">slack&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">channel&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">token&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;xoxb&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hipchat&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># room: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># token: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># url: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mattermost&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># channel: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># url: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># username: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">flock&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># url: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">webhook&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># url: &amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">dingtalk&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enabled&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">token&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">sign&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># namespace to watch, leave it empty for watching all.&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespaceToWatch&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Resources to watch&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resourcesToWatch&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deployment&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicationcontroller&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicaset&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">daemonset&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">services&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">pod&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">job&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">persistentvolume&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">registry&lt;/span>:&lt;span style="color:#666"> &lt;/span>docker.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># repository: bitnami/kubewatch&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">repository&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/kubewatch-chart&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># tag: 0.0.4-debian-9-r405&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tag&lt;/span>:&lt;span style="color:#666"> &lt;/span>latest&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">pullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>Always&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">## Optionally specify an array of imagePullSecrets.&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">## Secrets must be manually created in the namespace.&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">##&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># pullSecrets:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># - myRegistryKeySecretName&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">## String to partially override kubewatch.fullname template (will maintain the release name)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">##&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># nameOverride:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">## String to fully override kubewatch.fullname template&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic">##&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># fullnameOverride:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">rbac&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># If true, create &amp;amp; use RBAC resources&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">create&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceAccount&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Specifies whether a ServiceAccount should be created&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">create&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># The name of the ServiceAccount to use.&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># If not set and create is true, a name is generated using the fullname template&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># limits:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># cpu: 100m&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># memory: 300Mi&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># requests:&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># cpu: 100m&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># memory: 300Mi&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Affinity for pod assignment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># affinity: {}&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Tolerations for pod assignment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tolerations&lt;/span>:&lt;span style="color:#666"> &lt;/span>[]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Node labels for pod assignment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># Ref: https://kubernetes.io/docs/user-guide/node-selection/&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">nodeSelector&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">podAnnotations&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">podLabels&lt;/span>:&lt;span style="color:#666"> &lt;/span>{}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicaCount&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>value.yaml&lt;/code> 安装&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git clone https://github.com/sunny0826/kubewatch-chat.git
&lt;span style="color:#24909d">cd&lt;/span> kubewatch-chat
helm install my-release -f kubewatch/values.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="slack-配置">Slack 配置&lt;/h2>
&lt;p>Slack 为 kubewatch 默认的通知软件，这里就不简介 Slack 的安装和注册，直接从创建 APP 开始&lt;/p>
&lt;h3 id="创建一个-app">创建一个 APP&lt;/h3>
&lt;p>进去创建 &lt;a href="https://api.slack.com/apps">APP 页面&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1g9kum3x5npj21h40p6tdx.jpg" alt="image">&lt;/p>
&lt;p>选择 &lt;code>App Name&lt;/code> 和 &lt;code>Development Slack Workspace&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1g9kupp0av1j210c0uejvj.jpg" alt="">&lt;/p>
&lt;h3 id="添加-bot-用户">添加 Bot 用户&lt;/h3>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kuszmgggj21n4156gu2.jpg" alt="image">&lt;/p>
&lt;h3 id="添加-app-到-workspace">添加 App 到 Workspace&lt;/h3>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1g9kuyzwzetj21qu0wmq9n.jpg" alt="image">&lt;/p>
&lt;h3 id="获取-bot-token">获取 Bot-token&lt;/h3>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kv06dva8j21s60uajxf.jpg" alt="image">&lt;/p>
&lt;h2 id="通知效果">通知效果&lt;/h2>
&lt;p>在 Slack 中，&lt;code>创建&lt;/code> &lt;code>更新&lt;/code> &lt;code>删除&lt;/code> 分别以绿、黄和红色代表&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1g9kv23nvmoj213c0mewj4.jpg" alt="image">&lt;/p>
&lt;p>在钉钉中，我进行了汉化&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kv5fppglj20dd08zdgs.jpg" alt="image">&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1g9kv5uuxn4j20ea08fgmk.jpg" alt="image">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>对于 kubewatch 我们这里主要用作监控各种 CronJob 的定时触发状态，已经 ConfigMap 和 Secrets 的状态变化，同时也观察 HPA 触发的弹性伸缩的状态，可以实时观测到业务高峰的到来，是一个不错的小工具。&lt;/p></description></item><item><title>Post: 阿里云产品夜谈-容器服务交流</title><link>https://guoxudong.io/post/aliyun-product-meetup/</link><pubDate>Mon, 30 Sep 2019 09:32:35 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-product-meetup/</guid><description>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1g7hb4iwdpvj213i0vs4qq.jpg" alt="image">&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>9月25日晚受邀来到阿里云飞天园区参加阿里云MVP产品夜谈，在会上遇到了容器服务团队的负责人易立，并就容器服务进行了交流。此次参加夜谈的除了来自全球各地的阿里云MVP，还有来自安全团队、容器团队、AIoT 团队、大数据团队、数据库团队、人工智能团队、中间件团队、搜索引擎&amp;amp;智能推荐团队的负责人&amp;amp;产品经理。各个参会的MVP可以根据自己的研究方向或者感兴趣的方向选择，直接与团队负责人面对面交流，获取阿里云产品的最新信息，并提出使用意见，促进产品的发展。由于主要从事云原生&amp;amp;容器方面的工作，我选择了容器团队，与阿里云容器服务团队负责人易立就容器服务进行交流，本文记录了部分交流内容。&lt;/p>
&lt;h2 id="容器服务交流">容器服务交流&lt;/h2>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1g7hdbw7rwij21zk13ax6s.jpg" alt="">&lt;/p>
&lt;h3 id="关于集群版本集群升级">关于集群版本&amp;amp;集群升级&lt;/h3>
&lt;p>众所周知，Kubernetes 以非常稳定的3个月发布一个版本速度在高速迭代这，Kubernetes v1.16.0 也即将 release ，但是目前 ACK 的 Kubernetes 版本依旧为 v1.12.6-aliyun.1 已落后官方4个大版本。得到的回复是新版本 1.14 已经上线，下周就可以升级了，1.14 版本之前已经上线，只不过一直在灰度测试，下周（2019年9月29日）就全面放开升级了。截止写这篇文章的时候，我们的多个 Kubernetes 集群已成功升级到 v1.14.6-aliyun.1 ，虽然在升级的时候出现了一点小问题，但是最后还是顺利解决了。&lt;/p>
&lt;p>然后就是集群升级的问题，集群升级的时候会建议对所有节点打快照，确保节点安全，但是如果在节点升级当中失败，就会出现一半为新版本节点，一半为旧版本节点的问题。我们的一个节点升级失败，就出现了上述问题，最后还是将该节点容器驱散，并将该节点移出集群才解决了升级问题。希望集群升级提供整体状态保存&amp;amp;回退功能，确保如果升级失败（或者出现新旧版本不兼容问题）的时候可以安全回退到之前版本。&lt;/p>
&lt;h3 id="关于容器服务前端展示">关于容器服务前端展示&lt;/h3>
&lt;p>ACK 的 WEB 界面相对简陋，一直以来都是对 Kubernetes Dashboard 进行了简单的包装，和其他公有云相比确实不如。不过这也不是容器服务独有的问题，阿里云你产品众多，大部分都有这样的问题。与易立交流得知，容器服务团队目前主要的任务还是确保 Kubernetes 集群的安全稳定运行，他们在安全和可用性上花费的大量精力，貌似并没有拿到什么前端开发资源。我注意到像费用中心、日志服务等产品都有了新版页面，这里希望能容器服务页面也能尽快改版，提高页面操作的便捷和美观。&lt;/p>
&lt;h3 id="关于授权管理">关于授权管理&lt;/h3>
&lt;p>一直以来容器服务都有授权管理功能，后来都基于RAM重新做了授权管理功能。但是RAM权限管理策略十分复杂，配置起来也很麻烦，不同的策略结构和语法学习起来非常困难。在配置和管理起来非常困难，我们只能把所有权限收回，每项权限都要根据需求提工单来进行配置，还时长会出现配置不生效的问题。而且这个问题一提出，就引起了大家的共鸣，后了解得知，为了安全合规的要求，操作便捷和安全合规没法兼顾。这里希望授权管理上能在确保合规的同时，能提升RAM操作的便捷性。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1g7hdrlln6vj21rm0ycwov.jpg" alt="image">
关于容器服务的交流主要是以上几点，其他的还包括监控、存储和 CI/CD 方面进行了交流，同时也获得了不少建议。当面给阿里云提需求的机会并不多，我也是抓住机会，把日常使用 ACK 的问题汇总之后一股脑的丢了出去。有类似需求的同学可以在&lt;a href="https://connect.aliyun.com">阿里云的聆听平台&lt;/a>上给阿里云提交建议，以我的经验，合理的需求会很快审核通过并排期开发，换句话说就是“人人都可以是阿里云的产品经理”。&lt;/p></description></item><item><title>Post: 解决 Nginx-Ingress 重定向失败问题</title><link>https://guoxudong.io/post/nginx-ingress-error/</link><pubDate>Fri, 16 Aug 2019 11:15:37 +0800</pubDate><guid>https://guoxudong.io/post/nginx-ingress-error/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近对公司 Kubernetes 集群的 &lt;code>nginx-ingress-controller&lt;/code> 进行了升级，但是升级后却出现了大问题，之前所有采用 &lt;code>nginx.ingress.kubernetes.io/rewrite-target: /&lt;/code> 注释进行重定向的 Ingress 路由全部失效了，但是那些直接解析了域名，没有进行重定向的却没有发生这个问题。&lt;/p>
&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;ol>
&lt;li>首先检查对应服务健康状态，发现所有出问题的服务的状态均正常，同时受影响的之后 http 调用，而 RPC 调用却不受影响，这时问题就定位到了 ingress。&lt;/li>
&lt;li>然后检查 nginx-ingress-controller ，发现 nginx-ingress-controller 的状态也是正常的，路由也是正常的。&lt;/li>
&lt;li>最后发现受影响的只有添加了重定向策略的 ingress 。&lt;/li>
&lt;/ol>
&lt;h2 id="问题解决">问题解决&lt;/h2>
&lt;p>问题已经定位，接下来就是着手解决问题，这时候值得注意的就是之前进行了什么变更：升级了 nginx-ingress-controller 版本！看来问题就出现在新版本上，那么就打开官方文档：https://kubernetes.github.io/ingress-nginx/examples/rewrite/ 看一下吧。&lt;/p>
&lt;h3 id="attention">Attention&lt;/h3>
&lt;blockquote>
&lt;p>Starting in Version 0.22.0, ingress definitions using the annotation &lt;code>nginx.ingress.kubernetes.io/rewrite-target&lt;/code> are not backwards compatible with previous versions. In Version 0.22.0 and beyond, any substrings within the request URI that need to be passed to the rewritten path must explicitly be defined in a &lt;a href="https://www.regular-expressions.info/refcapture.html">capture group&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>文档上给出了非常明显的警告⚠️：从 V0.22.0 版本开始将不再兼容之前的入口定义，再查看一下我的 nginx-ingress-controller 版本，果然问题出现来这里。&lt;/p>
&lt;h3 id="note">Note&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://www.regular-expressions.info/refcapture.html">Captured groups&lt;/a> are saved in numbered placeholders, chronologically, in the form &lt;code>$1&lt;/code>, &lt;code>$2&lt;/code> &amp;hellip; &lt;code>$n&lt;/code>. These placeholders can be used as parameters in the &lt;code>rewrite-target&lt;/code> annotation.&lt;/p>
&lt;/blockquote>
&lt;h3 id="示例">示例&lt;/h3>
&lt;p>到这里问题已经解决了，在更新了 ingress 的配置之后，之前所有无法重定向的服务现在都已经可以正常访问了。修改见如下示例：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13">apiVersion: extensions/v1beta1
&lt;/span>&lt;span style="color:#ed9d13">kind: Ingress
&lt;/span>&lt;span style="color:#ed9d13">metadata:
&lt;/span>&lt;span style="color:#ed9d13"> annotations:
&lt;/span>&lt;span style="color:#ed9d13"> nginx.ingress.kubernetes.io/rewrite-target: /$2
&lt;/span>&lt;span style="color:#ed9d13"> name: rewrite
&lt;/span>&lt;span style="color:#ed9d13"> namespace: default
&lt;/span>&lt;span style="color:#ed9d13">spec:
&lt;/span>&lt;span style="color:#ed9d13"> rules:
&lt;/span>&lt;span style="color:#ed9d13"> - host: rewrite.bar.com
&lt;/span>&lt;span style="color:#ed9d13"> http:
&lt;/span>&lt;span style="color:#ed9d13"> paths:
&lt;/span>&lt;span style="color:#ed9d13"> - backend:
&lt;/span>&lt;span style="color:#ed9d13"> serviceName: http-svc
&lt;/span>&lt;span style="color:#ed9d13"> servicePort: 80
&lt;/span>&lt;span style="color:#ed9d13"> path: /something(/|$)(.*)
&lt;/span>&lt;span style="color:#ed9d13">&amp;#39;&lt;/span> | kubectl create -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="结语">结语&lt;/h2>
&lt;p>解决这个问题的实际时间虽然不长，但是着实让人出了一身冷汗，同时也给了我警示：变更有风险，升级需谨慎。在升级之前需要先浏览新版本的升级信息，同时需要制定完善的回滚策略，确保万无一失。&lt;/p></description></item><item><title>Post: 阿里云 ACK 挂载 NAS 数据卷</title><link>https://guoxudong.io/post/nas-k8s/</link><pubDate>Mon, 08 Jul 2019 15:09:56 +0800</pubDate><guid>https://guoxudong.io/post/nas-k8s/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>今天接到一个将 NAS 数据卷挂载到 Kubernetes 集群的需求，需要将一个 NAS 数据卷挂载到集群中。这一很简单的操作由于好久没有操作了，去翻看了一下官方文档，发现官方文档还在停留在去年7月份&amp;hellip;为了防止之后还有相似情况的发生，这里将所有操作做一个简单记录。&lt;/p>
&lt;h2 id="购买存储包创建文件系统">购买存储包（创建文件系统）&lt;/h2>
&lt;p>在挂载 NAS 之前，首先要先购买 NAS 文件存储，这里推荐购买存储包，100G 的 SSD 急速型一年只需1400多，而容量型只要279，对于我这种只有少量 NAS 存储需求的人来说是是靠谱的，因为我只需要5G的左右的存储空间，SSD 急速型 NAS 一年只要18块，完美。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sglwrx0gj22wa09gae4.jpg" alt="image">&lt;/p>
&lt;p>选择想要创建 NAS 所在 VPC 和 区域&lt;/p>
&lt;h2 id="添加挂载点">添加挂载点&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>点击添加挂载点
&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sgp0dos2j22ky0iowkr.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 VPC 网络、交换机和权限组
&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g4sgpwqrgoj20xu0vowib.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="linux-挂载-nas-数据卷">Linux 挂载 NAS 数据卷&lt;/h2>
&lt;p>在挂载点创建成功后，就可以将 NAS 数据卷挂载到 Linux 系统，这里以 CentOS 为例：&lt;/p>
&lt;h3 id="安装-nfs-客户端">安装 NFS 客户端&lt;/h3>
&lt;p>如果 Linux 系统要挂载 NAS ，首先需要安装 NFS 客户端&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo yum install nfs-utils
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="挂载-nfs-文件系统">挂载 NFS 文件系统&lt;/h3>
&lt;p>这里阿里云早就进行了优化，点击创建的文件系统，页面上就可以 copy 挂载命令。页面提供了挂载地址的 copy 和挂载命令的 copy 功能。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g4sh2i33wnj22w40yyn55.jpg" alt="image">&lt;/p>
&lt;p>挂载命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo mount -t nfs -o &lt;span style="color:#40ffff">vers&lt;/span>=4,minorversion=0,noresvport xxxxx.cn-shanghai.nas.aliyuncs.com:/ /mnt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看挂载结果">查看挂载结果&lt;/h3>
&lt;p>直接在挂载数据卷所在服务上执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">df -h
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就可以看到结果：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4sh6xwyt8j20lj0850tq.jpg" alt="image">&lt;/p>
&lt;h2 id="kubernetes-集群挂载-nas-数据卷">Kubernetes 集群挂载 NAS 数据卷&lt;/h2>
&lt;p>K8S 的持久数据卷挂载大同小异，流程都是：&lt;strong>创建PV&lt;/strong> -&amp;gt; &lt;strong>创建PVC&lt;/strong> -&amp;gt; &lt;strong>使用PVC&lt;/strong>&lt;/p>
&lt;p>下面就简单介绍在阿里云上的操作：&lt;/p>
&lt;h3 id="创建存储卷pv">创建存储卷（PV）&lt;/h3>
&lt;p>首先要创建存储卷，选择 &lt;strong>容器服务&lt;/strong> -&amp;gt; &lt;strong>存储卷&lt;/strong> -&amp;gt; &lt;strong>创建&lt;/strong>&lt;/p>
&lt;p>这里要注意的是：&lt;strong>挂载点域名使用上面面的挂载地址&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g4shuiiyyqj20hc0hp0tz.jpg" alt="image">&lt;/p>
&lt;h3 id="创建存储声明pvc">创建存储声明（PVC）&lt;/h3>
&lt;p>&lt;strong>选择 NAS&lt;/strong> -&amp;gt; &lt;strong>已有存储卷&lt;/strong>&lt;/p>
&lt;p>选择刚才创建的存储卷&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g4shv5vs1kj20hx0bvt9g.jpg" alt="image">&lt;/p>
&lt;h3 id="使用pvc">使用PVC&lt;/h3>
&lt;p>使用的方法这里就不做详细介绍了，相关文章也比较多，这里就只记录 Deployment 中使用的 yaml 片段：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/data &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 挂载路径&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>volume-nas-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>volume-nas-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">persistentVolumeClaim&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">claimName&lt;/span>:&lt;span style="color:#666"> &lt;/span>nas-test &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># PVC 名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="结语">结语&lt;/h2>
&lt;p>这里只是做一个简单的记录，仅适用于阿里云 ACK 容器服务，同时也是 ACK 的一个简单应用。由于不经常对数据卷进行操作，这里做简单的记录，防止以后使用还要再看一遍文档。&lt;/p></description></item><item><title>Post: 阿里云容器服务新建集群优化方案(更新版)</title><link>https://guoxudong.io/post/aliyun-k8s-perfect/</link><pubDate>Thu, 25 Apr 2019 22:26:06 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-k8s-perfect/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>选择阿里云的&lt;code>容器服务&lt;/code>，主要原因是公司主要业务基本都在运行在阿里云上。相较自建 kubernetes 集群，容器服务的优势在于部署相对简单，与阿里云 VPC 完美兼容，网络的配置相对简单，而如果使用 &lt;code>kubeadm&lt;/code> 安装部署 kubernetes 集群，除了众所周知的科学上网的问题，还有一系列的问题，包括 &lt;code>etcd&lt;/code> 、 &lt;code>Scheduler&lt;/code> 和 &lt;code>Controller-Manager&lt;/code> 的高可用问题等。并且如果使用托管版的阿里云 kubernetes 容器服务，还会省掉3台 master 节点的钱，并且可能将 master 节点的运维问题丢给阿里云解决，并且其提供的 master 节点性能肯定会比自购的配置好，这点是阿里云容器服务的研发小哥在来我司交流时专门强调的。&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>前面吹了阿里云容器服务的优势，那这里就说说在实践中遇到的容器服务的问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在新建集群的时候需要选择相应的 VPC 并选择 &lt;code>Pod&lt;/code> 和 &lt;code>Service&lt;/code> 所在的网段，这两个网段不能和 Node 节点存在于同一网段，但是如果您在阿里云中存在不止一个 VPC （VPC的网段可以是 10.0.0.0/8，172.16-31.0.0/12-16，192.168.0.0/16 ），如果网段设置不对的话，就可能会使原本存在该网段的 ECS 失联，需要删除集群重新创建。如果删除失败的话，还需要手动删除路由表中的记录（&lt;strong>别问我是怎么知道的&lt;/strong>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在使用容器服务创建集群后，会创建2个 SLB （之前是3个），一个是 SLB 是在 VPC 上并且绑定一个弹性IP（需要在创建的时候手动勾选创建弹性IP）用于 API Server，一个是经典网络的 SLB 使用提供给 Ingress 使用。但是这两个外网IP创建后的规格都是默认最大带宽、按流量收费，这个并不符合我们的要求，需要手动修改，&lt;del>然而这个修改都会在第二天才能生效&lt;/del>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>容器服务创建集群后，Node 节点的名称会使&lt;code>{region-id}.{ECS-id}&lt;/code>的形式，这个命名方式在集群监控，使用 &lt;code>kubectl&lt;/code> 操作集群方面就显得比较反人类了，每次都要去查 &lt;code>ECS id&lt;/code> 才能确定是哪个节点，而这个 Node 节点名称是不能修改的！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="网段问题解决">网段问题解决&lt;/h2>
&lt;p>这个比较好解决，甚至可以说不用解决，只要把网段规划好，不要出现网段冲突就好&lt;/p>
&lt;h2 id="node-节点名称无法修改问题解决">Node 节点名称无法修改问题解决&lt;/h2>
&lt;p>这个功能之前已有人在阿里聆听平台提出这个问题了，咨询了容器服务的研发小哥，得到的反馈是该功能已经在灰度测试了，相信很快就可以上线了。&lt;/p>
&lt;h2 id="创建-slb-规格问题解决">创建 SLB 规格问题解决&lt;/h2>
&lt;p>相较之前自动创建3个 SLB 的方式，目前的版本只会自动创建2个并且有一个是 VPC 内网+弹性IP的方式，已经进行了优化，但是 ingress 绑定的 SLB 还是经典网络类型，无法接入云防火墙并且规格也是不合适的。这里给出解决方案：&lt;/p>
&lt;h3 id="方法一使用-kubectl-配置">方法一：使用 &lt;code>kubectl&lt;/code> 配置&lt;/h3>
&lt;h4 id="1-创建新的-slb">1. 创建新的 SLB&lt;/h4>
&lt;ul>
&lt;li>这里需要创建一个新的 SLB 用来代替自动创建的不符合要求的 SLB。这里可以先私网 SLB 先不绑定弹性IP。&lt;em>&lt;strong>这里要注意的事，新建的 SLB 需要与 k8s集群处于同一 VPC 内，否则在后续会绑定失败&lt;/strong>&lt;/em>。
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1ma5lxgvdj21ws0s6qa5.jpg" alt="image">&lt;/li>
&lt;li>查看新购买 SLB 的 ID
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1ma8zuq1gj20sa0hoq4b.jpg" alt="image">&lt;/li>
&lt;/ul>
&lt;h4 id="2-在创建集群后重新绑定-ingress-controller-的-service">2. 在创建集群后重新绑定 &lt;code>ingress-controller&lt;/code> 的 &lt;code>Service&lt;/code>&lt;/h4>
&lt;p>首先需要使用 &lt;code>kubectl&lt;/code> 或者直接在阿里云控制台操作，创建新的 &lt;code>nginx-ingress-svc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#999;font-style:italic"># nginx ingress service&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-lb-{new-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx-ingress-lb-{new-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># set loadbalancer to the specified slb id&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-id&lt;/span>:&lt;span style="color:#666"> &lt;/span>{SLB-ID}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># set loadbalancer address type to intranet if using private slb instance&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#39;true&amp;#39;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic">#service.beta.kubernetes.io/alicloud-loadbalancer-backend-label: node-role.kubernetes.io/ingress=true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>LoadBalancer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># do not route traffic to other nodes&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># and reserve client ip for upstream&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">externalTrafficPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Local&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>http&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">443&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>https&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">443&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># select app=ingress-nginx pods&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>ingress-nginx&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建成功后，可以进到 SLB 页面查看，可以看到 &lt;code>80&lt;/code> 和 &lt;code>443&lt;/code> 端口的监听已经被添加了
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1maej57c1j21ru0rwq8b.jpg" alt="image">&lt;/p>
&lt;h4 id="3-绑定符合要求的弹性ip">3. 绑定符合要求的弹性IP&lt;/h4>
&lt;p>确定 SLB 创建成功并且已经成功监听后，这里就可以为 SLB 绑定符合您需求的弹性IP了，这里我们绑定一个按宽带计费2M的弹性IP&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mak2r0p3j207k07mq33.jpg" alt="image">&lt;/p>
&lt;h4 id="4-验证连通性">4. 验证连通性&lt;/h4>
&lt;p>到上面这步，我们的 ingress 入口 SLB 已经创建完成，这里我们验证一下是否联通。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在k8s集群中部署一个 &lt;code>nginx&lt;/code> ，直接在阿里云容器服务控制台操作即可
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mant7ec6j21s40qegpr.jpg" alt="image">
这里创建 ingress 路由，&lt;strong>注意：这里的域名需要解析到刚才创建的 SLB 绑定的弹性IP&lt;/strong>
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1maqf7gdjj21ns0kymz8.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>访问该域名，显示 &lt;code>nginx&lt;/code> 欢迎页，则证明修改成功
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g1mat8srhnj21ak0hmact.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法二-使用阿里云容器服务控制台配置">方法二： 使用阿里云容器服务控制台配置&lt;/h3>
&lt;h4 id="1-阿里云容器控制台创建新-service">1. 阿里云容器控制台创建新 &lt;code>service&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>在阿里云容器服务控制台：&lt;code>路由与负载均衡&lt;/code> &amp;ndash;&amp;gt; &lt;code>服务&lt;/code> 点击&lt;code>创建&lt;/code>&lt;/li>
&lt;li>选择 &lt;code>kube-system&lt;/code> 命名空间&lt;/li>
&lt;li>类型选中&lt;code>负载均衡&lt;/code> - &lt;code>内网访问&lt;/code>&lt;/li>
&lt;li>关联 &lt;code>nginx-ingress-controller&lt;/code>&lt;/li>
&lt;li>并添加端口映射&lt;/li>
&lt;li>点击创建&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2g4fwfgevj20i50hsgmp.jpg" alt="image">&lt;/p>
&lt;h4 id="2-进入负载均衡查看-slb-是否创建">2. 进入负载均衡查看 SLB 是否创建&lt;/h4>
&lt;p>可见 SLB 已经成功创建&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2g4pb1d45j215303c74r.jpg" alt="image">&lt;/p>
&lt;h4 id="3-绑定符合要求的弹性ip-1">3. 绑定符合要求的弹性IP&lt;/h4>
&lt;p>同方法一&lt;/p>
&lt;h4 id="4验证连通性">4.验证连通性&lt;/h4>
&lt;p>同方法一&lt;/p>
&lt;h3 id="后续操作">后续操作&lt;/h3>
&lt;ul>
&lt;li>在确定新的 SLB 创建成功后，就可以将容器服务自动创建的 SLB 释放了&lt;/li>
&lt;li>删除 &lt;code>kube-system&lt;/code> 中原本绑定的 &lt;code>Service&lt;/code> &lt;strong>（目前版本已经可以关联删除绑定的 SLB 了，不用分开操作）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>这里别忘了，自动创建给API Server 的SLB还是按流量付费的，记得降配&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>上面的这些问题和解决方案都属于临时方案，已在阿里的聆听平台提出了上面的问题，相信很快就会有所改进。总的来说，阿里云容器服务在提供优质的 kubernetes 功能，并且只收 ECS 的钱，对于想学习 kubernetes 又没有太多资金的同学也比较友好，直接买按量付费实例，测试完释放即可，不用购买 master 节点，十分良心！&lt;/p></description></item><item><title>Post: 什么的容器？Docker 工作原理及容器化简易指南</title><link>https://guoxudong.io/post/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/</link><pubDate>Sat, 20 Apr 2019 19:54:50 +0800</pubDate><guid>https://guoxudong.io/post/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/</guid><description>
&lt;p>&lt;strong>Docker 非常棒！&lt;/strong> 它使软件开发者无需担心配置和依赖性，在任何地方打包，发送和运行他们的应用程序。而在与 kubernetes 相结合后，它使应用集群部署和管理变得更方便。这使得 Docker 深受软件开发者的喜爱，越来越多的开发者开始使用 Docker。&lt;/p>
&lt;p>那么 Docker 到底是什么？&lt;/p>
&lt;p>它是构建、测试、部署和发布&lt;strong>容器化&lt;/strong>应用的&lt;strong>平台&lt;/strong>。称其为平台是因为 Docker 其实是一套用于管理与容器相关的所有事物的工具。作为 Docker 的核心，接下来我们将深入探讨容器。&lt;/p>
&lt;h2 id="什么是容器">什么是容器？&lt;/h2>
&lt;p>容器提供了在计算机上的隔离环境中安装和运行应用程序的方法。在容器内运行的应用程序仅可使用于为该容器分配的资源，例如：CPU，内存，磁盘，进程空间，用户，网络，卷等。在使用有限的容器资源的同时，并不与其他容器冲突。您可以将容器视为简易计算机上运行应用程序的隔离沙箱。&lt;/p>
&lt;p>这个概念听起来很熟悉，有些类似于虚拟机。但它们有一个关键的区别：容器使用的一种非常不同的，轻量的技术来实现资源隔离。容器利用了底层 Linux 内核的功能，而不是虚拟机采用的 &lt;a href="https://en.wikipedia.org/wiki/Hypervisor">hypervisor&lt;/a> 的方法。换句话说，容器调用 Linux 命令来分配和隔离出一组资源，然后在此空间中运行您的应用程序。我们快速来看下两个这样的功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>namespaces&lt;/strong>&lt;/p>
&lt;p>简单的讲就是，&lt;a href="http://man7.org/linux/man-pages/man7/namespaces.7.html">Linux namespace&lt;/a> 允许用户在独立进程之间隔离 CPU 等资源。进程的访问权限及可见性仅限于其所在的 namespaces 。因此，用户无需担心在一个 namespace 内运行的进程与在另一个 namespace 内运行的进程冲突。甚至可以同一台机器上的不同容器中运行具有相同 PID 的进程。同样的，两个不同容器中的应用程序可以使用相同的端口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cgroups&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://man7.org/linux/man-pages/man7/cgroups.7.html">cgroups&lt;/a> 允许对可用资源设置限制和约束。例如，您可以在一台拥有 16G 内存的计算机上创建一个 namespace ，限制其内部进程可用内存为 1GB。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>到这，您可能已经猜到 Docker 的工作原理了。当您请求 Docker 运行容器时，Docker 会在您的计算机上设置一个资源隔离的环境。然后 Docker 会将打包的应用程序和关联的文件复制到 namespace 内的文件系统中，此时环境的配置就完成了。之后 Docker 会执行您指定的命令运行应用程序。&lt;/p>
&lt;p>简而言之，Docker 通过使用 Linux namespace 和 cgroup（以及其他一些命令）来协调配置容器，将应用程序文件复制到为容器分配的磁盘，然后运行启动命令。Docker 还附带了许多其他用于管理容器的工具，例如：列出正在运行的容器，停止容器，发布容器镜像等许多其他工具。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2a8h1rc6lj211a0rcjsu.jpg" alt="image">&lt;/p>
&lt;p>与虚拟机相比，容器更轻量且速度更快，因为它利用了 Linux 底层操作系统在隔离的环境中运行。虚拟机的 hypervisor 创建了一个非常牢固的边界，以防止应用程序突破它，而&lt;a href="https://sysdig.com/blog/container-isolation-gone-wrong/">容器的边界不那么强大&lt;/a>。另一个区别是，由于 namespace 和 cgroups 功能仅在 Linux 上可用，因此容器无法在其他操作系统上运行。此时您可能想知道 Docker 如何在 macOS 或 Windows 上运行？ Docker 实际上使用了一个技巧，并在非 Linux 操作系统上安装 Linux 虚拟机，然后在虚拟机内运行容器。&lt;/p>
&lt;p>让我们利用目前为止学到的所有内容，从头开始创建和运行 Docker 容器。如果你还没有将 Docker 安装在你的机器上，可以参考&lt;a href="https://docs.docker.com/install/">这里&lt;/a>安装 Docker 。在这个示例中，我们将创建一个 Docker 容器，下载一个用 C语言 写的 Web 服务，编译并运行它，然后使用浏览器访问这个 Web 服务。&lt;/p>
&lt;p>我们将从所有 Docker 项目开始的地方：创建一个 &lt;code>Dockerfile&lt;/code> 开始。此文件描述了如何创建用于运行容器的 docker 镜像。既然我们还没有聊到镜像，那么让我们看一下&lt;a href="https://docs.docker.com/get-started/#images-and-containers">镜像的官方定义&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>镜像是一个可执行包，其包含运行应用程序所需的代码、运行时、库、环境变量和配置文件，容器是镜像的运行时实例。&lt;/p>
&lt;/blockquote>
&lt;p>简单的讲，当你要求 Docker 运行一个容器时，你必须给它一个包含如下内容的镜像：&lt;/p>
&lt;ol>
&lt;li>包含应用程序及其所有依赖的&lt;strong>文件系统快照&lt;/strong>。&lt;/li>
&lt;li>容器启动时的运行命令。&lt;/li>
&lt;/ol>
&lt;p>在 Docker 的世界，使用别人的镜像作为基础镜像来创建自己的镜像是十分普遍的。例如，官方 reds Docker 镜像就是基于 Debian 文件系统快照（&lt;a href="http://www.ethernetresearch.com/geekzone/building-linux-rootfs-from-scratch/">rootfs tarball&lt;/a>），并安装在其上配置 Redis。&lt;/p>
&lt;p>在我们的示例中，我们选择 &lt;a href="https://hub.docker.com/_/alpine">Alpine Linux&lt;/a> 为基础镜像。当您在 Docker 中看到 “alpine” 时，它通常意味着一个精简的基本镜像。 Alpine Linux 镜像大小只有约为5 MB！&lt;/p>
&lt;p>在您的计算机创建一个新目录（例如 &lt;code>dockerprj&lt;/code> ），然后新建一个 &lt;code>Dockerfile&lt;/code> 文件。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ touch Dockerfile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将如下内容粘贴到 &lt;code>Dockerfile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#999;font-style:italic"># Use Alpine Linux rootfs tarball to base our image on&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine:3.9 &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Set the working directory to be &amp;#39;/home&amp;#39;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;/home&amp;#39;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Setup our application on container&amp;#39;s file system&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> wget http://www.cs.cmu.edu/afs/cs/academic/class/15213-s00/www/class28/tiny.c &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add build-base &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; gcc tiny.c -o tiny &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;Hello World&amp;#39;&lt;/span> &amp;gt;&amp;gt; index.html&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Start the web server. This is container&amp;#39;s entry point&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;./tiny&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;8082&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Expose port 8082&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#ed9d13"> 8082 &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 &lt;code>Dockerfile&lt;/code> 包含创建镜像的内容说明。我们创建镜像基于 Alpine Linux（&lt;a href="http://www.ethernetresearch.com/geekzone/building-linux-rootfs-from-scratch/">rootfs tarball&lt;/a>），并将工作目录设置为 &lt;code>/home&lt;/code> 。接下来下载，编译并创建了一个用C编写的简单 Web 服务器的可执行文件，然后指定在运行容器时要执行的命令，并将容器端口8082暴露给主机。&lt;/p>
&lt;p>现在，我们就可以构建镜像了。在 &lt;code>Dockerfile&lt;/code> 的同级目录运行 &lt;code>docker build&lt;/code> 命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ docker build -t codeahoydocker .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果这个命令成功了，您将看到：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">Successfully tagged codeahoydocker:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们的镜像就创建成功了，该镜像主要包括：&lt;/p>
&lt;ol>
&lt;li>文件系统快照（Alpine Linux 和 我们安装的 Web 服务）&lt;/li>
&lt;li>启动命令（&lt;code>./tiny 8092&lt;/code>）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2aakgpe16j20zo0bqjt5.jpg" alt="image">&lt;/p>
&lt;p>既然成功构建了镜像，那么我们可以使用如下命令运行容器。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ docker run -p 8082:8082 codeahoydocker:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们了解下这里发生了什么。&lt;/p>
&lt;p>通过 &lt;code>docker run&lt;/code> 命令，我们请求 Docker 基于 &lt;code>codeahoydocker:latest&lt;/code> 镜像创建和启动一个容器。&lt;code>-p 8082:8082&lt;/code> 将本地的8082端口映射到容器的8082端口（容器内的 Web 服务器正在监听8082端口上的连接）。打开你的浏览器并访问 localhost:8082/index.html 。你将可以看到 &lt;em>&lt;strong>Hello World&lt;/strong>&lt;/em> 信息。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2aazadeamj20yo0rcq5e.jpg" alt="image">&lt;/p>
&lt;p>最后我想补充一点，虽然 Docker 非常棒，而且对于大多数项目来说它是一个不错的选择，但我们并非处处都要使用它。在我的工作中，Docker 与 Kubernetes 结合使用，可以非常轻松地部署和管理后端微服务，我们不必为每个服务配置新的运行环境。另一方面，对于性能密集型应用程序，Docker 可能不是最佳选择。我经手的其中一个项目必须处理来自移动游戏客户端的 TCP 长连接（每台机器1000个），这时 Docker 网络出现了很多问题，导致无法将它用于该项目。&lt;/p>
&lt;p>希望上面这些内容有用。&lt;/p>
&lt;blockquote>
&lt;p>这篇文章由 &lt;a href="https://www.linkedin.com/in/umansoor">Umer Mansoor&lt;/a> 撰写，可以在 &lt;a href="https://www.facebook.com/codeahoy">Facebook&lt;/a> 或 &lt;a href="https://twitter.com/codeahoy">Twitter&lt;/a> 上关注并留下评论。&lt;/p>
&lt;/blockquote>
&lt;p>原文地址： &lt;a href="https://codeahoy.com/2019/04/12/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/">https://codeahoy.com/2019/04/12/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/&lt;/a>&lt;/p></description></item><item><title>Post: 单节点版rancher升级指南</title><link>https://guoxudong.io/post/rancher-update-2.2.1/</link><pubDate>Sun, 31 Mar 2019 11:15:35 +0800</pubDate><guid>https://guoxudong.io/post/rancher-update-2.2.1/</guid><description>
&lt;blockquote>
&lt;p>Rancher 不仅可以在任何云提供商的任何地方部署 Kubernetes 集群，而且还将它们集中在集中式的身份验证和访问控制之下。由于它与资源的运行位置无关，因此您可以轻松地在不同的环境部署你的 kubernetes 集群并操作他们。 Rancher 不是将部署几个独立的 Kubernetes 集群，而是将它们统一为一个单独的托管Kubernetes Cloud。&lt;/p>
&lt;/blockquote>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目前我们使用的是 rancher 2.1.1版本，在去年 rancher 发布 &lt;code>v2.1.*&lt;/code> 版本的时候做过一次升级，当时遇到了很多问题，虽然都一一解决，但是并没有有效的记录下来，这里在升级 &lt;code>v2.2.*&lt;/code> 版本的时候做一个记录以便在今后升级的时候的提供参考作用。&lt;/p>
&lt;h2 id="升级前的准备">升级前的准备&lt;/h2>
&lt;ul>
&lt;li>首先查看当前 rancher 版本，记下这个版本号后面需要使用。查看方式就是登陆 rancher 在左下角就可以看到当前版本号，我们这里使用的&lt;code>v2.1.1&lt;/code>版本。&lt;/li>
&lt;li>打开官方文档，这里推荐对照官方文档进行升级，一般官方文档都会及时更新并提供最佳升级方法，而一般的博客会因为其写作时间、使用版本、部署环境的不同有所偏差。官方文档： &lt;a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/upgrades/single-node-upgrade/">https://www.cnrancher.com/docs/rancher/v2.x/cn/upgrades/single-node-upgrade/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="升级">升级&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先获取正在运行的 rancher 容器 ID,由以下命令可知 &lt;code>RANCHER_CONTAINER_ID&lt;/code> 为 &lt;code>83167cb60134&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS
PORTS NAMES
83167cb60134 rancher/rancher:latest &lt;span style="color:#ed9d13">&amp;#34;entrypoint.sh&amp;#34;&lt;/span> &lt;span style="color:#3677a9">4&lt;/span> months ago Up &lt;span style="color:#3677a9">4&lt;/span> months 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp priceless_newton
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>停止该容器&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker stop {RANCHER_CONTAINER_ID}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建正在运行的 Rancher Server 容器的数据卷容器，将在升级中使用，这里命名为 &lt;code>rancher-data&lt;/code> 容器。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_ID}为上一步中的容器ID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_TAG}为你当前正在运行的Rancher版本，如上面的先决条件中所述。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker create --volumes-from {RANCHER_CONTAINER_ID} --name rancher-data rancher/rancher:{RANCHER_CONTAINER_TAG}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>备份 &lt;code>rancher-data&lt;/code> 数据卷容器&lt;/p>
&lt;p>如果升级失败，可以通过此备份还原Rancher Server，容器命名:rancher-data-snapshot-&amp;lt;CURRENT_VERSION&amp;gt;.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_ID}为上一步中的容器ID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{CURRENT_VERSION}为当前安装的Rancher版本的标记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_TAG}为当前正在运行的Rancher版本，如先决条件中所述 。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker create --volumes-from {RANCHER_CONTAINER_ID} --name rancher-data-snapshot-{CURRENT_VERSION} rancher/rancher:{RANCHER_CONTAINER_TAG}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>拉取Rancher的最新镜像,这里确保有外网，可能拉取到新的镜像，如果没有外网，这里就需要将镜像上传到私有镜像仓库，将拉取地址设置为私有镜像仓库即可&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker pull rancher/rancher:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过 &lt;code>rancher-data&lt;/code> 数据卷容器启动新的 Rancher Server 容器。&lt;/p>
&lt;p>&lt;strong>这里要注意到，我们这是使用的是独立容器+外部七层负载均衡，是通过阿里云SLB进行SSL证书认证，需要在启动的时候增加&lt;code>--no-cacerts&lt;/code>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run -d --volumes-from rancher-data --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest --no-cacerts
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>升级过程会需要一定时间，不要在升级过程中终止升级，强制终止可能会导致数据库迁移错误。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>升级 Rancher Server后， server 容器中的数据会保存到 &lt;code>rancher-data&lt;/code> 容器中，以便将来升级。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>删除旧版本 Rancher Server 容器&lt;/p>
&lt;p>如果你只是停止以前的Rancher Server容器(并且不删除它),则旧版本容器可能随着主机重启后自动运行，导致容器端口冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>升级成功&lt;/p>
&lt;p>访问 rancher 可以看到右下角版本已经完成更新。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g1lzcmucn6j20ck03qt8p.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Post: Alpine Linux详解</title><link>https://guoxudong.io/post/alpine-linux/</link><pubDate>Fri, 15 Mar 2019 09:53:02 +0800</pubDate><guid>https://guoxudong.io/post/alpine-linux/</guid><description>
&lt;h3 id="简介">简介&lt;/h3>
&lt;blockquote>
&lt;p>Small. Simple. Secure.Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Alpine Linux 是一个社区开发的面向安全应用的轻量级Linux发行版。 Alpine 的意思是“高山的”，它采用了musl libc和busybox以减小系统的体积和运行时资源消耗，同时还提供了自己的包管理工具apk。&lt;/p>
&lt;/blockquote>
&lt;h3 id="适用环境">适用环境&lt;/h3>
&lt;p>由于其小巧、安全、简单以及功能完备的特点，被广泛应用于众多Docker容器中。我司目前使用的基础镜像均是基于该系统，&lt;a href="https://hub.docker.com/_/alpine">dockerhub&lt;/a>上有提供各种语言的基础镜像.如：&lt;code>node:8-alpine&lt;/code>、&lt;code>python:3.6-alpine&lt;/code>，同时也可以基于alpine镜像制作符合自己需求的基础镜像。&lt;/p>
&lt;h3 id="简单的镜像构建示例">简单的镜像构建示例&lt;/h3>
&lt;p>这里提供一个python3的基础镜像的&lt;code>Dockerfile&lt;/code>，&lt;a href="https://pip.pypa.io/en/latest/installing/">get-pip.py&lt;/a>可在 &lt;a href="https://pip.pypa.io/en/latest/installing/">https://pip.pypa.io/en/latest/installing/&lt;/a> 下载。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">MAINTAINER&lt;/span>&lt;span style="color:#ed9d13"> guoxudong@keking.cn&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># 拷贝安装pip的脚本&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> get-pip.py /get-pip.py&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># 设置alpine的镜像地址为阿里云的地址&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;https://mirrors.aliyun.com/alpine/v3.6/main/&amp;#34;&lt;/span> &amp;gt; /etc/apk/repositories &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 安装依赖包&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; apk update &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add --no-cache bash &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># libevent-dev libxml2-dev libffi libxml2 libxslt libxslt-dev \&lt;/span>
python3 gcc g++ python3-dev python-dev linux-headers libffi-dev openssl-dev &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 由于通过apk安装的pip总是基于python2.7的版本，不符合项目要求，此处使用get-pip.py的方式&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999;font-style:italic">#安装基于python3.6的pip&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; python3 /get-pip.py &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 删除不必要的脚本&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#24909d">cd&lt;/span> .. &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; rm -f /get-pip.py &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 此环境专用做运行django项目，因此移除不必要的工具，减少空间&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999;font-style:italic"># &amp;amp;&amp;amp; pip uninstall -y pip setuptools wheel \&lt;/span>
&lt;span style="color:#999;font-style:italic"># 最后清空apk安装时产生的无用文件&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; rm -rf /var/cache/apk/*&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>对比&lt;/strong>：同样版本的python，对比镜像大小，可见使用alpine的优势&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ docker images | grep python
python 3.4 ccbffa0d70d9 &lt;span style="color:#3677a9">2&lt;/span> months ago 922MB
alpine-python3 latest 69e41b673a50 &lt;span style="color:#3677a9">2&lt;/span> months ago 297MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="apk包管理">apk包管理&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>镜像源配置&lt;/p>
&lt;p>官方镜像源列表：http://dl-cdn.alpinelinux.org/alpine/MIRRORS.txt&lt;/p>
&lt;blockquote>
&lt;p>MIRRORS.txt中是当前Alpine官方提供的镜像源（Alpine安装的时候系统自动选择最佳镜像源）&lt;/p>
&lt;/blockquote>
&lt;p>国内镜像源&lt;/p>
&lt;ul>
&lt;li>清华TUNA镜像源：https://mirror.tuna.tsinghua.edu.cn/alpine/&lt;/li>
&lt;li>中科大镜像源：http://mirrors.ustc.edu.cn/alpine/&lt;/li>
&lt;li>阿里云镜像源：http://mirrors.aliyun.com/alpine/&lt;/li>
&lt;/ul>
&lt;p>镜像源配置&lt;/p>
&lt;p>这里推荐使用阿里云镜像源，由于公司应用都是部署在阿里云上，使用阿里云镜像源会快很多&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ vi /etc/apk/repositories
&lt;span style="color:#999;font-style:italic"># 将这两行插入到repositories文件开头&lt;/span>
http://mirrors.aliyun.com/alpine/v3.9/main
http://mirrors.aliyun.com/alpine/v3.9/community
&lt;span style="color:#999;font-style:italic"># 后面是原有的默认配置&lt;/span>
http://dl-cdn.alpinelinux.org/alpine/v3.8/main
http://dl-cdn.alpinelinux.org/alpine/v3.8/community
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>apk包管理命令&lt;/p>
&lt;p>这里介绍一些常用的操作apk包管理命令&lt;/p>
&lt;ul>
&lt;li>&lt;code>apk --help&lt;/code>可以查看完整的包管理命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk --help
apk-tools 2.10.0, compiled &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> x86_64.
Installing and removing packages:
add Add PACKAGEs to &lt;span style="color:#ed9d13">&amp;#39;world&amp;#39;&lt;/span> and install (or upgrade) them, &lt;span style="color:#6ab825;font-weight:bold">while&lt;/span> ensuring that all dependencies are met
del Remove PACKAGEs from &lt;span style="color:#ed9d13">&amp;#39;world&amp;#39;&lt;/span> and uninstall them
System maintenance:
fix Repair package or upgrade it without modifying main dependencies
update Update repository indexes from all remote repositories
upgrade Upgrade currently installed packages to match repositories
cache Download missing PACKAGEs to cache and/or delete unneeded files from cache
Querying information about packages:
info Give detailed information about PACKAGEs or repositories
list List packages by PATTERN and other criteria
dot Generate graphviz graphs
policy Show repository policy &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> packages
Repository maintenance:
index Create repository index file from FILEs
fetch Download PACKAGEs from global repositories to a &lt;span style="color:#24909d">local&lt;/span> directory
verify Verify package integrity and signature
manifest Show checksums of package contents
Use apk &amp;lt;command&amp;gt; --help &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> command-specific help.
Use apk --help --verbose &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> a full &lt;span style="color:#24909d">command&lt;/span> listing.
This apk has coffee making abilities.
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>apk info&lt;/code> 列出所有已安装的软件包&lt;/li>
&lt;li>&lt;code>apk apk update&lt;/code> 更新最新本地镜像源&lt;/li>
&lt;li>&lt;code>apk upgrade&lt;/code> 升级软件&lt;/li>
&lt;li>&lt;code>apk search&lt;/code> 搜索可用软件包，&lt;strong>搜索之前最好先更新镜像源&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apk search &lt;span style="color:#999;font-style:italic">#查找所以可用软件包&lt;/span>
$ apk search -v &lt;span style="color:#999;font-style:italic">#查找所以可用软件包及其描述内容&lt;/span>
$ apk search -v &lt;span style="color:#ed9d13">&amp;#39;acf*&amp;#39;&lt;/span> &lt;span style="color:#999;font-style:italic">#通过软件包名称查找软件包&lt;/span>
$ apk search -v -d &lt;span style="color:#ed9d13">&amp;#39;docker&amp;#39;&lt;/span> &lt;span style="color:#999;font-style:italic">#通过描述文件查找特定的软件包&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>apk add&lt;/code> 从仓库中安装最新软件包，并自动安装必须的依赖包,也可以从第三方仓库添加软件包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apk add curl busybox-extras &lt;span style="color:#999;font-style:italic">#软件以空格分开这里，这里列举我们用的最多的curl和telnet&lt;/span>
bash-4.3# apk add --no-cache curl
bash-4.3# apk add mongodb --update-cache --repository http://mirrors.ustc.edu.cn/alpine/v3.6/main/ --allow-untrusted &lt;span style="color:#999;font-style:italic">#从指定镜像源拉取&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装指定版本软件包&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk add &lt;span style="color:#40ffff">mongodb&lt;/span>=4.0.5-r0
bash-4.3# apk add &lt;span style="color:#ed9d13">&amp;#39;mongodb&amp;lt;4.0.5&amp;#39;&lt;/span>
bash-4.3# apk add &lt;span style="color:#ed9d13">&amp;#39;mongodb&amp;gt;4.0.5&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>升级指定软件包&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk add --upgrade busybox &lt;span style="color:#999;font-style:italic">#升级指定软件包&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注&lt;/strong>：安装之前最好修改本地镜像源，更新镜像源，搜索软件包是否存在，选择合适岸本在进行安装。&lt;/p>
&lt;ul>
&lt;li>&lt;code>apk del&lt;/code> 卸载并删除指定软件包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="结语">结语&lt;/h3>
&lt;p>Alpine以其小巧、简单在docker容器中得到了广泛的应用。但是Alpine Linux使用了musl，可能和其他Linux发行版使用的glibc实现会有些不同。这里主要介绍了它的基础用法，但是足以满足日常运维需要。毕竟在kubernetes集群中操作容器内环境较直接在虚拟机或者物理机上操作更为复杂，由于缩减的容器的大小，导致和CentOS或Ubuntu相比缺少许多功能。而缺少的这些功能又不想在基础镜像中安装导致容器变大，这个时候就可以在容器运行后，根据实际需要安装即可。&lt;/p>
&lt;h3 id="参考文档">参考文档&lt;/h3>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management">https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management&lt;/a>&lt;/p></description></item><item><title>Post: 解决kubernetes中ingress-nginx配置问题</title><link>https://guoxudong.io/post/k8s-ingress-config/</link><pubDate>Wed, 06 Mar 2019 14:42:05 +0800</pubDate><guid>https://guoxudong.io/post/k8s-ingress-config/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>随着公司容器化的深入，越来越多的服务陆续迁移到kubernetes集群中，有些问题在测试环境并未凸显，但是在生产环境中这些问题就显得格外的扎眼。这里就对实践中kubernetes集群中的7层负载均衡器ingress遇到的问题进行总结。&lt;/p>
&lt;h2 id="https负载均衡器-ingress">HTTP(S)负载均衡器-ingress&lt;/h2>
&lt;p>Ingress是kubernetes API的标准资源类型之一，其本质就是一组基于DNS名称(host)或URL路径把请求转发至指定的Service资源的规则，&lt;strong>用于将集群外的请求流量转发至集群内部完成服务发布&lt;/strong>。&lt;/p>
&lt;p>Ingress控制器(Ingress Controller)可以由任何具有反向代理(HTTP/HTTPS)功能的服务程序实现，如Nginx、Envoy、HAProxy、Vulcand和Traefik等。Ingress控制器本身也作为Pod对象与被代理的运行为Pod资源的应用运行于同一网络中。我们在这里选择了NGINX Ingress Controller，由于对NGINX的配置较为熟悉，同时我们使用的kubernetes是阿里云的容器服务，构建集群的时候，容器服务会自带NGINX Ingress Controller。&lt;/p>
&lt;p>&lt;img src="http://wx2.sinaimg.cn/large/ad5fbf65ly1g0t3yj7wecj20w50doab9.jpg" alt="image">&lt;/p>
&lt;h2 id="根据实际情况ingress调优">根据实际情况Ingress调优&lt;/h2>
&lt;h3 id="1-解决400-request-header-or-cookie-too-large问题">1. 解决400 Request Header Or Cookie Too Large问题&lt;/h3>
&lt;h2 id="preview_only-false">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;h4 id="现象">现象&lt;/h4>
&lt;p>微信小程序需要调用后端接口，需要在header中传一段很长的token参数，直接使用浏览器访问该端口可以访问通，但是在加上token访问之后，会报“400 Request Header Or Cookie Too Large”&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">title&lt;/span>&amp;gt;400 Request Header Or Cookie Too Large&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">h1&lt;/span>&amp;gt;400 Bad Request&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">h1&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;Request Header Or Cookie Too Large&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">hr&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;nginx/1.15.6&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">center&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#6ab825;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="问题定位">问题定位&lt;/h4>
&lt;p>直接修改Service使用nodeport的形式访问，则没有报错，初步定位需要在ingress中nginx配置客户端的请求头，进入Ingress Controller的Pod查询配置，果然是请求头空间不足。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat nginx.conf | grep client_header_buffer_size
client_header_buffer_size 1k;
$ cat nginx.conf | grep large_client_header_buffers
large_client_header_buffers &lt;span style="color:#3677a9">4&lt;/span> 8k;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="解决方法">解决方法&lt;/h4>
&lt;p>在ingress中添加注释&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#6ab825;font-weight:bold">nginx.ingress.kubernetes.io/server-snippet:&lt;/span> &lt;span style="color:#ed9d13">client_header_buffer_size&lt;/span> &lt;span style="color:#3677a9">2046k&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="preview_only-false-1">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;p>&lt;strong>Server snippet&lt;/strong>&lt;br>Using the annotation &lt;code>nginx.ingress.kubernetes.io/server-snippet&lt;/code> it is possible to add custom configuration in the server configuration block.
&lt;br>该注释是将自定义配置加入nginx的server配置中&lt;/p>
&lt;h2 id="preview_only-false-2">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;h3 id="2-解决请求超时问题">2. 解决请求超时问题&lt;/h3>
&lt;h4 id="现象-1">现象&lt;/h4>
&lt;p>有一个数据导出功能，需要将大量数据进行处理，然后以Excel格式返回，在导出一个大约3W条数据的时候，出现访问超时情况。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/mw690/ad5fbf65ly1g0ubdwwzo5j21b30bjaat.jpg" alt="image">&lt;/p>
&lt;h4 id="解决方法-1">解决方法&lt;/h4>
&lt;p>调整proxy_read_timeout，连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理
在ingress中添加注释&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#6ab825;font-weight:bold">nginx.ingress.kubernetes.io/proxy-read-timeout:&lt;/span> &lt;span style="color:#3677a9">600&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这里需要注意的事该注释的value需要时number类型，不能加s，否则将不生效&lt;/p>
&lt;/blockquote>
&lt;h3 id="3-增加白名单">3. 增加白名单&lt;/h3>
&lt;h4 id="现象-2">现象&lt;/h4>
&lt;p>在实际的使用中，会有一部分应用需要设置只可以在办公场地的网络使用，之前使用阿里云 SLB 的时候可以针对端口进行访问控制，但是现在走 ingress ，都是从80 or 443端口进，所以需要在 ingress 设置&lt;/p>
&lt;h4 id="解决方法-2">解决方法&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>Whitelist source range&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You can specify allowed client IP source ranges through the nginx.ingress.kubernetes.io/whitelist-source-range annotation. The value is a comma separated list of CIDRs, e.g. 10.0.0.0/24,172.10.0.1.&lt;/p>
&lt;/blockquote>
&lt;p>在 ingress 里配置 &lt;code>nginx.ingress.kubernetes.io/whitelist-source-range&lt;/code> ，如有多个ip段，用逗号分隔即可&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#6ab825;font-weight:bold">nginx.ingress.kubernetes.io/whitelist-source-range:&lt;/span> &lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#ed9d13">.0.0.0/24&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想全局适用，可以在阿里云 SLB 里操作，也可以将该配置加入到 &lt;code>NGINX ConfigMap&lt;/code> 中。&lt;/p>
&lt;h2 id="preview_only-false-3">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;p>根据工作中遇到的实际问题，持续更新中&amp;hellip;&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>使用NGINX ingress controller的好处就是对于nginx配置相对比较熟悉，性能也不差。相关nginx配置的对应的ingress可以在 &lt;a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/&lt;/a> 上查到。&lt;/p></description></item><item><title>Post: 阿里云部署rancher2.1采坑记</title><link>https://guoxudong.io/post/install-rancher/</link><pubDate>Thu, 29 Nov 2018 18:28:13 +0800</pubDate><guid>https://guoxudong.io/post/install-rancher/</guid><description>
&lt;blockquote>
&lt;p>近期由于公司需要将部署在ucloud上的rancher迁移到阿里云上，所以将部署到阿里云的图中遇到的问题和踩到的坑在这里进行记录。&lt;/p>
&lt;/blockquote>
&lt;h1 id="无法删除namespace">无法删除namespace&lt;/h1>
&lt;p>在安装新环境的rancher之前，需要将kubernetes集群中cattle-system ns下面的cluster-agent和node-agent干掉，这里我选择直接删除cattle-system这个命名空间&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete ns cattle-system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而问题来了，在删除命名空间之后，这个命名空间并没有立刻被删除，而是一直处于Terminating状态，这里我专门写了一篇文章解决这个问题，这里就不再赘述&lt;/p>
&lt;h1 id="阿里云证书配置">阿里云证书配置&lt;/h1>
&lt;p>由于之前使用的ucloud的机器进行测试，使用默认自签名证书并没有使用SSL证书，所以在配置证书这里遇到的许多的问题&lt;/p>
&lt;p>首先根据官方文档使用权威CA机构颁发的证书，这里使用的是本公司自己的证书&lt;/p>
&lt;p>获取证书方法：
&lt;img src="https://guoxudong.io/images/source/jinrussl.png" alt="image">&lt;/p>
&lt;p>点击下载证书，选择nginx证书下载
&lt;img src="https://guoxudong.io/images/source/zhengshu.png" alt="image">&lt;/p>
&lt;p>之后将下载的证书上传到rancher所在服务器，并配置好数据卷挂载&lt;/p>
&lt;p>将下面代码的挂载地址指向证书文件，运行代码&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run -d --restart=unless-stopped &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-p 80:80 -p 443:443 &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /root/var/log/auditlog:/var/log/auditlog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-e &lt;span style="color:#40ffff">AUDIT_LEVEL&lt;/span>=&lt;span style="color:#3677a9">3&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /etc/your_certificate_directory/fullchain.pem:/etc/rancher/ssl/cert.pem &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>-v /etc/your_certificate_directory/privkey.pem:/etc/rancher/ssl/key.pem &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>rancher/rancher:latest --no-cacerts
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后会自动冲dockerhub上拉取最新的rancher进行进行安装，之后使用命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker ps
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看容器是否在运行，如果运行正常，则后端的配置就完成了&lt;/p>
&lt;p>划重点：这是是在后端配置了证书，所以在阿里云的配置上要使用四层TCP监听&lt;/p>
&lt;p>这个地方可是坑了我许久，我一直在前端配置https七层监听，导致一直无法正常访问，一度已经到了怀疑人生的地步=。=&lt;/p>
&lt;p>之后就是简单的阿里云SLB配置四层TCP监听，这里也就不再赘述了&lt;/p>
&lt;h1 id="k8s集群导入rancher">k8s集群导入rancher&lt;/h1>
&lt;p>前后端都准备就绪，现在就可以访问rancher了，访问rancher根据页面提示进行基本配置，登录后选择添加集群&lt;/p>
&lt;p>选择导入现有集群
&lt;img src="https://guoxudong.io/images/source/add.png" alt="image">&lt;/p>
&lt;p>为集群创建一个rancher中的名称，然后根据提示将命令拷贝到k8s集群所在宿主机执行即可，注意：这里由于配置了证书，所以选择有证书，不绕过证书的那个命令执行，之后就可看到集群数据导入中
&lt;img src="https://guoxudong.io/images/source/wating.png" alt="image">&lt;/p>
&lt;p>等待几秒即可开心的使用rancher了！&lt;/p>
&lt;h1 id="关于rancher部署后访问集群api超时问题">关于rancher部署后访问集群api超时问题&lt;/h1>
&lt;p>经过排查，原因是阿里云在容器服务对外连接处设置了TLS双向认证，导致rancher的外网ip经常性的被拦截，导致超时&lt;/p>
&lt;p>解决办法：&lt;/p>
&lt;p>对k8s集群中rancher的cattle-cluster-agent传递内网参数，将其配置为内网连接，就可以正常访问了&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n cattle-system patch deployments cattle-cluster-agent --patch &lt;span style="color:#ed9d13">&amp;#39;{
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;spec&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;template&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;spec&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;hostAliases&amp;#34;: [{
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;hostnames&amp;#34;:[&amp;#34;rancher.keking.cn&amp;#34;], #rancher的域名
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;ip&amp;#34;: &amp;#34;10.0.0.219&amp;#34; #rancher部署地址
&lt;/span>&lt;span style="color:#ed9d13"> }]
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13">}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Post: 精简docker镜像</title><link>https://guoxudong.io/post/image-size/</link><pubDate>Thu, 27 Sep 2018 20:28:13 +0800</pubDate><guid>https://guoxudong.io/post/image-size/</guid><description>
&lt;blockquote>
&lt;p>精简Docker镜像的好处很多，不仅可以节省存储空间和带宽，还能减少安全隐患。优化镜像大小的手段多种多样，因服务所使用的基础开发语言不同而有差异。本文将介绍精简Docker镜像的几种通用方法。&lt;/p>
&lt;/blockquote>
&lt;h1 id="精简docker镜像大小的必要性">精简Docker镜像大小的必要性&lt;/h1>
&lt;p>Docker镜像由很多镜像层（Layers）组成（最多127层），镜像层依赖于一系列的底层技术，比如文件系统(filesystems)、写时复制(copy-on-write)、联合挂载(union mounts)等技术，你可以查看Docker社区文档以了解更多有关Docker存储驱动的内容，这里就不再赘述技术细节。总的来说，Dockerfile中的每条指令都会创建一个镜像层，继而会增加整体镜像的尺寸。&lt;/p>
&lt;p>下面是精简Docker镜像尺寸的好处：&lt;/p>
&lt;ol>
&lt;li>减少构建时间&lt;/li>
&lt;li>减少磁盘使用量&lt;/li>
&lt;li>减少下载时间&lt;/li>
&lt;li>因为包含文件少，攻击面减小，提高了安全性&lt;/li>
&lt;li>提高部署速度&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>五点建议减小Docker镜像尺寸&lt;/strong>&lt;/p>
&lt;h1 id="一优化基础镜像">一、优化基础镜像&lt;/h1>
&lt;p>优化基础镜像的方法就是选用合适的更小的基础镜像，常用的 Linux 系统镜像一般有 Ubuntu、CentOs、Alpine，其中Alpine更推荐使用。大小对比如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">guoxudong@ubuntu ~/s&amp;gt; docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
ubuntu latest 74f8760a2a8b &lt;span style="color:#3677a9">8&lt;/span> days ago 82.4MB
alpine latest 11cd0b38bc3c &lt;span style="color:#3677a9">2&lt;/span> weeks ago 4.41MB
centos &lt;span style="color:#3677a9">7&lt;/span> 49f7960eb7e4 &lt;span style="color:#3677a9">7&lt;/span> weeks ago 200MB
debian latest 3bbb526d2608 &lt;span style="color:#3677a9">8&lt;/span> days ago 101MB
guoxudong@ubuntu ~/s&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alpine是一个高度精简又包含了基本工具的轻量级Linux发行版，基础镜像只有4.41M，各开发语言和框架都有基于Alpine制作的基础镜像，强烈推荐使用它。Alpine镜像各个语言和框架支持情况，可以参考《优化Docker镜像、加速应用部署》。
查看上面的镜像尺寸对比结果，你会发现最小的镜像也有4.41M，那么有办法构建更小的镜像吗？答案是肯定的，例如 gcr.io/google_containers/pause-amd64:3.1 镜像仅有742KB。为什么这个镜像能这么小？在为大家解密之前，再推荐两个基础镜像：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>scratch镜像&lt;/p>
&lt;p>scratch是一个空镜像，只能用于构建其他镜像，比如你要运行一个包含所有依赖的二进制文件，如Golang程序，可以直接使用scratch作为基础镜像。现在给大家展示一下上文提到的Google pause镜像Dockerfile：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> scratch&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ARG&lt;/span> ARCH&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ADD&lt;/span> bin/pause-&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">ARCH&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span> /pause&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;/pause&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Google pause镜像使用了scratch作为基础镜像，这个镜像本身是不占空间的，使用它构建的镜像大小几乎和二进制文件本身一样大，所以镜像非常小。当然在我们的Golang程序中也会使用。对于一些Golang/C程序，可能会依赖一些动态库，你可以使用自动提取动态库工具，比如ldd、linuxdeployqt等提取所有动态库，然后将二进制文件和依赖动态库一起打包到镜像中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>busybox镜像&lt;/p>
&lt;p>scratch是个空镜像，如果希望镜像里可以包含一些常用的Linux工具，busybox镜像是个不错选择，镜像本身只有1.16M，非常便于构建小镜像。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="二串联-dockerfile-指令">二、串联 Dockerfile 指令&lt;/h1>
&lt;p>大家在定义Dockerfile时，如果太多的使用RUN指令，经常会导致镜像有特别多的层，镜像很臃肿，而且甚至会碰到超出最大层数（127层）限制的问题，遵循 Dockerfile 最佳实践，我们应该把多个命令串联合并为一个 RUN（通过运算符&amp;amp;&amp;amp;和/ 来实现），每一个 RUN 要精心设计，确保安装构建最后进行清理，这样才可以降低镜像体积，以及最大化的利用构建缓存。&lt;/p>
&lt;p>下面是一个优化前Dockerfile：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> ubuntu&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> VER 3.0.0 &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> TARBALL http://download.redis.io/releases/redis-&lt;span style="color:#40ffff">$VER&lt;/span>.tar.gz &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># ==&amp;gt; Install curl and helper tools...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apt-get update &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apt-get install -y curl make gcc &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># ==&amp;gt; Download, compile, and install...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> curl -L &lt;span style="color:#40ffff">$TARBALL&lt;/span> | tar zxv &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> redis-$VER &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> make &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> make install &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic">#...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># ==&amp;gt; Clean up...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> / &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apt-get remove -y --auto-remove curl make gcc &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apt-get clean &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> rm -rf /var/lib/apt/lists/* /redis-&lt;span style="color:#40ffff">$VER&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic">#...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像，名称叫 &lt;code>test/test:0.1&lt;/code>。&lt;/p>
&lt;p>我们对Dockerfile做优化，优化后Dockerfile：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> ubuntu&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> VER 3.0.0 &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> TARBALL http://download.redis.io/releases/redis-&lt;span style="color:#40ffff">$VER&lt;/span>.tar.gz&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;==&amp;gt; Install curl and helper tools...&amp;#34;&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\ &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>apt-get update &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>apt-get install -y curl make gcc &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;==&amp;gt; Download, compile, and install...&amp;#34;&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>curl -L &lt;span style="color:#40ffff">$TARBALL&lt;/span> | tar zxv &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>&lt;span style="color:#24909d">cd&lt;/span> redis-&lt;span style="color:#40ffff">$VER&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>make &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>make install &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;==&amp;gt; Clean up...&amp;#34;&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>apt-get remove -y --auto-remove curl make gcc &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>apt-get clean &amp;amp;&amp;amp; &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>rm -rf /var/lib/apt/lists/* /redis-&lt;span style="color:#40ffff">$VER&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic">#...&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;redis-server&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像，名称叫 &lt;code>test/test:0.2&lt;/code>。&lt;/p>
&lt;p>对比两个镜像大小：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">root@k8s-master:/tmp/iops# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
test/test 0.2 58468c0222ed &lt;span style="color:#3677a9">2&lt;/span> minutes ago 98.1MB
test/test 0.1 e496cf7243f2 &lt;span style="color:#3677a9">6&lt;/span> minutes ago 307MB
root@k8s-master:/tmp/iops#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，将多条RUN命令串联起来构建的镜像大小是每条命令分别RUN的三分之一。&lt;/p>
&lt;p>**提示：**为了应对镜像中存在太多镜像层，Docker 1.13版本以后，提供了一个压扁镜像功能，即将 Dockerfile 中所有的操作压缩为一层。这个特性还处于实验阶段，Docker默认没有开启，如果要开启，需要在启动Docker时添加-experimental 选项，并在Docker build 构建镜像时候添加 &amp;ndash;squash 。我们不推荐使用这个办法，请在撰写 Dockerfile 时遵循最佳实践编写，不要试图用这种办法去压缩镜像。&lt;/p>
&lt;h1 id="三使用多阶段构建">三、使用多阶段构建&lt;/h1>
&lt;p>Dockerfile中每条指令都会为镜像增加一个镜像层，并且你需要在移动到下一个镜像层之前清理不需要的组件。实际上，有一个Dockerfile用于开发（其中包含构建应用程序所需的所有内容）以及一个用于生产的瘦客户端，它只包含你的应用程序以及运行它所需的内容。这被称为“建造者模式”。Docker 17.05.0-ce版本以后支持多阶段构建。使用多阶段构建，你可以在Dockerfile中使用多个FROM语句，每条FROM指令可以使用不同的基础镜像，这样您可以选择性地将服务组件从一个阶段COPY到另一个阶段，在最终镜像中只保留需要的内容。&lt;/p>
&lt;p>下面是一个使用 &lt;code>COPY --from&lt;/code> 和 &lt;code>FROM ... AS ...&lt;/code> 的Dockerfile：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#999;font-style:italic"># Compile&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> golang:1.9.0 AS builder&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /go/src/v9.git...com/.../k8s-monitor&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> . .&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /go/src/v9.git...com/.../k8s-monitor&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> make build&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> mv k8s-monitor /root&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Package&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Use scratch image&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> scratch&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /root/&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> --from=builder /root .&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#ed9d13"> 8080&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;/root/k8s-monitor&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像，你会发现生成的镜像只有上面COPY 指令指定的内容，镜像大小只有2M。这样在以前使用两个Dockerfile（一个Dockerfile用于开发和一个用于生产的瘦客户端），现在使用多阶段构建就可以搞定。&lt;/p>
&lt;h1 id="四构建业务服务镜像技巧">四、构建业务服务镜像技巧&lt;/h1>
&lt;p>Docker在build镜像的时候，如果某个命令相关的内容没有变化，会使用上一次缓存（cache）的文件层，在构建业务镜像的时候可以注意下面两点：&lt;/p>
&lt;ul>
&lt;li>不变或者变化很少的体积较大的依赖库和经常修改的自有代码分开；&lt;/li>
&lt;li>因为cache缓存在运行Docker build命令的本地机器上，建议固定使用某台机器来进行Docker build，以便利用cache。&lt;/li>
&lt;/ul>
&lt;p>下面是构建Spring Boot应用镜像的例子，用来说明如何分层。其他类型的应用，比如Java WAR包，Nodejs的npm 模块等，可以采取类似的方式。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在Dockerfile所在目录，解压缩maven生成的jar包&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ unzip &amp;lt;path-to-app-jar&amp;gt;.jar -d app
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Dockerfile 我们把应用的内容分成4个部分COPY到镜像里面：其中前面3个基本不变，第4个是经常变化的自有代码。最后一行是解压缩后，启动spring boot应用的方式。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> openjdk:8-jre-alpine&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">LABEL&lt;/span> maintainer &lt;span style="color:#ed9d13">&amp;#34;opl-xws@xiaomi.com&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> app/BOOT-INF/lib/ /app/BOOT-INF/lib/&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> app/org /app/org&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> app/META-INF /app/META-INF&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> app/BOOT-INF/classes /app/BOOT-INF/classes&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#ed9d13"> 8080&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;/usr/bin/java&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;-cp&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;/app&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;org.springframework.boot.loader.JarLauncher&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>这样在构建镜像时候可大大提高构建速度。&lt;/p>
&lt;h1 id="五其他优化办法">五、其他优化办法&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>RUN命令中执行apt、apk或者yum类工具技巧，如果在RUN命令中执行apt、apk或者yum类工具，可以借助这些工具提供的一些小技巧来减少镜像层数量及镜像大小。举几个例子：&lt;/p>
&lt;ol>
&lt;li>在执行apt-get install -y 时增加选项— no-install-recommends ，可以不用安装建议性（非必须）的依赖，也可以在执行apk add 时添加选项&amp;ndash;no-cache 达到同样效果；&lt;/li>
&lt;li>执行yum install -y 时候， 可以同时安装多个工具，比如yum install -y gcc gcc-c++ make &amp;hellip;。将所有yum install 任务放在一条RUN命令上执行，从而减少镜像层的数量；&lt;/li>
&lt;li>组件的安装和清理要串联在一条指令里面，如 apk &amp;ndash;update add php7 &amp;amp;&amp;amp; rm -rf /var/cache/apk/* ，因为Dockerfile的每条指令都会产生一个文件层，如果将apk add &amp;hellip;和 rm -rf &amp;hellip; 命令分开，清理无法减小apk命令产生的文件层的大小。 Ubuntu或Debian可以使用 rm -rf /**var**/lib/apt/lists/* 清理镜像中缓存文件；CentOS等系统使用yum clean all 命令清理。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>压缩镜像&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Docker 自带的一些命令还能协助压缩镜像，比如 export 和 import&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -d test/test:0.2
$ docker &lt;span style="color:#24909d">export&lt;/span> 747dc0e72d13 | docker import - test/test:0.3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用这种方式需要先将容器运行起来，而且这个过程中会丢失镜像原有的一些信息，比如：导出端口，环境变量，默认指令。&lt;/p>
&lt;p>查看这两个镜像history信息，如下，可以看到test/test:0.3 丢失了所有的镜像层信息：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">root@k8s-master:/tmp/iops# docker &lt;span style="color:#24909d">history&lt;/span> test/test:0.3
IMAGE CREATED CREATED BY SIZE COMMENT
6fb3f00b7a72 &lt;span style="color:#3677a9">15&lt;/span> seconds ago 84.7MB Imported from -
root@k8s-master:/tmp/iops# docker &lt;span style="color:#24909d">history&lt;/span> test/test:0.2
IMAGE CREATED CREATED BY SIZE COMMENT
58468c0222ed &lt;span style="color:#3677a9">2&lt;/span> hours ago /bin/sh -c &lt;span style="color:#999;font-style:italic">#(nop) CMD [&amp;#34;redis-server&amp;#34;] 0B &lt;/span>
1af7ffe3d163 &lt;span style="color:#3677a9">2&lt;/span> hours ago /bin/sh -c &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;==&amp;gt; Install curl and helper... 15.7MB
&lt;/span>&lt;span style="color:#ed9d13">8bac6e733d54 2 hours ago /bin/sh -c #(nop) ENV TARBALL=http://downlo... 0B
&lt;/span>&lt;span style="color:#ed9d13">793282f3ef7a 2 hours ago /bin/sh -c #(nop) ENV VER=3.0.0 0B
&lt;/span>&lt;span style="color:#ed9d13">74f8760a2a8b 8 days ago /bin/sh -c #(nop) CMD [&amp;#34;&lt;/span>/bin/bash&lt;span style="color:#ed9d13">&amp;#34;] 0B
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;missing&amp;gt; 8 days ago /bin/sh -c mkdir -p /run/systemd &amp;amp;&amp;amp; echo &amp;#39;do... 7B
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;missing&amp;gt; 8 days ago /bin/sh -c sed -i &amp;#39;s/^#\s*\(deb.*universe\)&lt;/span>$&lt;span style="color:#ed9d13">... 2.76kB
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;missing&amp;gt; 8 days ago /bin/sh -c rm -rf /var/lib/apt/lists/* 0B
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;missing&amp;gt; 8 days ago /bin/sh -c set -xe &amp;amp;&amp;amp; echo &amp;#39;#!/bin/sh&amp;#39; &amp;gt; /... 745B
&lt;/span>&lt;span style="color:#ed9d13">&amp;lt;missing&amp;gt; 8 days ago /bin/sh -c #(nop) ADD file:5fabb77ea8d61e02d... 82.4MB
&lt;/span>&lt;span style="color:#ed9d13">root@k8s-master:/tmp/iops#
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>社区里还有很多压缩工具，比如Docker-squash ，用起来更简单方便，并且不会丢失原有镜像的自带信息，大家有兴趣可以试试。&lt;/p></description></item><item><title>Post: Docker容器启动退出解决方案</title><link>https://guoxudong.io/post/docker-quit/</link><pubDate>Thu, 27 Sep 2018 19:27:03 +0800</pubDate><guid>https://guoxudong.io/post/docker-quit/</guid><description>
&lt;h1 id="现象">现象&lt;/h1>
&lt;p>启动docker容器&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run –name [CONTAINER_NAME] [CONTAINER_ID]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看容器运行状态&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker ps -a
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现刚刚启动的mydocker容器已经退出&lt;/p>
&lt;h1 id="原因">原因&lt;/h1>
&lt;p>docker容器的主线程（dockfile中CMD执行的命令）结束，容器会退出&lt;/p>
&lt;h1 id="解决办法">解决办法&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>可以使用交互式启动&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -i [CONTAINER_NAME or CONTAINER_ID]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上面的不太友好，建议使用后台模式和tty选项&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run -dit [CONTAINER_NAME or CONTAINER_ID]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker 容器在后台以守护态（Daemonized）形式运行，可以通过添加 -d 参数来实现&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo docker run -d ubuntu:14.04 /bin/sh -c &lt;span style="color:#ed9d13">&amp;#34;while true; do echo hello world; sleep 1; done&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在脚本最后一行添加&lt;strong>tail -f /dev/null&lt;/strong>，这个命令永远完成不了，所以该脚本一直不会执行完，所以该容器永远不会退出。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>TIPs&lt;/strong>:退出时，使用&lt;code>[ctrl + D]&lt;/code>，这样会结束docker当前线程，容器结束，可以使用 &lt;code>[ctrl + P]&lt;/code> &lt;code>[ctrl + Q]&lt;/code> 退出而不终止容器运行&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如下命令，会在指定容器中执行指定命令， &lt;code>[ctrl+D]&lt;/code> 退出后不会终止容器运行&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>docker默认会把容器内部pid=1的作为默认的程序&lt;/p>
&lt;/blockquote></description></item><item><title>Post: 容器技术概述</title><link>https://guoxudong.io/post/con-in/</link><pubDate>Thu, 30 Aug 2018 18:45:22 +0800</pubDate><guid>https://guoxudong.io/post/con-in/</guid><description>
&lt;h1 id="背景">背景&lt;/h1>
&lt;blockquote>
&lt;p>自从微服务（Microservice）的出现，出于业务的需要，IT应用模型不断的变革。开发模式从瀑布式到敏捷开发；开发、运维和测试互相配合的devops思想；应用程序架构从单体模型到分层模型再到微服务；部署方式也从面向物理机到虚拟键再到容器；应用程序的基础架构从自建机房到托管再到云计算，等等。这些变革使得IT技术应用的效率大大提升，同时却以&lt;strong>更低的成本交付更高质量的产品&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>尤其是以Docker为代表的容器技术的出现，终结了devops中交付和部署环节因环节、配置及程序本身的不同而造成的动辄几种甚至十几种部署配置的困境，将它们统一在容器镜像（image）之上。这就是我在工作中遇到最先遇到的困境，同时也是我开始研究容器技术的契机。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如今，越来越多的企业或组织开始开始选择以镜像文件为交付载体。容器镜像之内直接包含了应用程序及其依赖的系统环境、库、基础程序等，从而能够在容器引擎上直接运行。&lt;/p>
&lt;/blockquote>
&lt;h1 id="容器技术概述">容器技术概述&lt;/h1>
&lt;p>容器是一种轻量级、可移植、自包含的软件打包技术，它使得应用程序可以在几乎任何地方以相同的方式运行。&lt;/p>
&lt;p>容器有应用程序本身和它的环境依赖（库和其他应用程序）两部分组成，并在宿主机（Host）操作系统的用户空间中运行，但与操作系统的其他进程互相隔离，他们的实现机制有别于VMWare、KVM、Xen等实现方案的虚拟化技术。容器与虚拟机的对比关系如下图
&lt;img src="https://guoxudong.io/images/source/vs.png" alt="image">
由于同一个宿主机上的所有容器都共享其底层操作系统（内核空间），这就使得容器在体积上要比传统的虚拟机小很多。另外，启动容器无须启动整个操作系统，所以容器部署和启动的速度更快，开销更小，也更容易迁移。事实上，容器赋予了应用程序超强的可移植能力。&lt;/p>
&lt;h1 id="容器技术的优势">容器技术的优势&lt;/h1>
&lt;ul>
&lt;li>开发方面：“一次构建、到处运行”（Build Once, Run Anywhere）。容器意味着环境隔离和可重复性，开发人员只需为应用创建一个运行环境，并将其打包成容器便可在各种部署环境上运行，并与它所在的宿主机环境隔离。&lt;/li>
&lt;li>运维方面：“一次配置，运行所以”（Configure Once, Run Anything）。一旦配置好标准的容器运行时环境，服务器就可以运行任何容器，这使得运维人员的工作变得更高效、一致和可重复。容器消除了开发、测试、生产环境的不一致性。&lt;/li>
&lt;/ul></description></item><item><title>Post: centos7.2 安装k8s v1.11.0</title><link>https://guoxudong.io/post/install-k8s/</link><pubDate>Tue, 14 Aug 2018 20:07:03 +0800</pubDate><guid>https://guoxudong.io/post/install-k8s/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>最近由于公司业务发展到了瓶颈，原有的技术架构已经逐渐无法满足业务开发和测试的需求，出现了应用测试环境搭建复杂，有许多套（真的很多很多）应用环境，应用在持续集成/持续交付也遇到了很大的困难，经过讨论研究决定对应用和微服务进行容器化，这就是我首次直面docker和k8s的契机.&lt;/p>
&lt;/blockquote>
&lt;h1 id="kubernetes-介绍">Kubernetes 介绍&lt;/h1>
&lt;p>Kubernetes 是 Google 团队发起的开源项目，它的目标是管理跨多个主机的容器，提供基本的部署，维护以及运用伸缩，主要实现语言为
Go 语言。
Kubernetes的特点：&lt;/p>
&lt;ul>
&lt;li>易学：轻量级，简单，容易理解&lt;/li>
&lt;li>便携：支持公有云，私有云，混合云，以及多种云平台&lt;/li>
&lt;li>可拓展：模块化，可插拔，支持钩子，可任意组合&lt;/li>
&lt;li>自修复：自动重调度，自动重启，自动复制&lt;/li>
&lt;/ul>
&lt;h1 id="准备工作">准备工作&lt;/h1>
&lt;p>&lt;strong>注：以下操作都是在root权限下执行的&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装docker-ce，这里使用docker-ce-17.09.0.c版本，安装方法见&lt;a href="https://guoxudong.io/2018/install-docker">之前的教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装Kubeadm&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic">#安装 Kubeadm 首先我们要配置好阿里云的国内源，执行如下命令：&lt;/span>
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;span style="color:#ed9d13">[kubernetes]
&lt;/span>&lt;span style="color:#ed9d13">name=Kubernetes
&lt;/span>&lt;span style="color:#ed9d13">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span>&lt;span style="color:#ed9d13">enabled=1
&lt;/span>&lt;span style="color:#ed9d13">gpgcheck=0
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;span style="color:#999;font-style:italic">#之后，执行以下命令来重建yum缓存：&lt;/span>
yum -y install epel-releaseyum
clean all
yum makecache
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来需要安装指定版本的Kubeadm（这里要安装指定版本，因为后续依赖的镜像由于有墙无法拉取，这里我们只有指定版本的镜像），注意：&lt;strong>这里是安装指定版本的Kubeadm，k8s的版本更新之快完全超出你的想象！&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum -y install kubelet-1.11.0-0
yum -y install kubeadm-1.11.0-0
yum -y install kubectl-1.11.0-0
yum -y install kubernetes-cni
&lt;span style="color:#999;font-style:italic">#执行命令启动Kubeadm服务：&lt;/span>
systemctl &lt;span style="color:#24909d">enable&lt;/span> kubelet &amp;amp;&amp;amp; systemctl start kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置 Kubeadm 所用到的镜像
这里是重中之重，因为在国内的原因，无法访问到 Google 的镜像库，所以我们需要执行以下脚本来从 Docker Hub 仓库中获取相同的镜像，并且更改 TAG 让其变成与 Google 拉去镜像一致。&lt;/p>
&lt;p>&lt;strong>新建一个 Shell 脚本，填入以下代码之后保存&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-vim" data-lang="vim">#docker.sh&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>#!&lt;span style="color:#ed9d13">/bin/&lt;/span>bash&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>images=(kube-proxy-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-scheduler-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-controller-manager-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-apiserver-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> etcd-amd64:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">2&lt;/span>.&lt;span style="color:#3677a9">18&lt;/span> coredns:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">3&lt;/span> pause-amd64:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span> kubernetes-dashboard-amd64:v1.&lt;span style="color:#3677a9">8&lt;/span>.&lt;span style="color:#3677a9">3&lt;/span> k8s-dns-sidecar-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> k8s-dns-kube-dns-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> k8s-dns-dnsmasq-nanny-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> )&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>for imageName in ${images[@]} ; do&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker pull keveon/$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker tag keveon&lt;span style="color:#ed9d13">/$imageName k8s.gcr.io/&lt;/span>$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker rmi keveon/$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>done&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span># 个人新加的一句，V &lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> 必加&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker tag da86e6ba6ca1 k8s.gcr.io/pause:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>保存后使用chmod命令赋予脚本执行权限&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chmod -R &lt;span style="color:#3677a9">777&lt;/span> ./docker.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行脚本拉取镜像&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sh docker.sh
&lt;span style="color:#999;font-style:italic">#这里就开始了漫长的拉取镜像之路&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭掉swap&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo swapoff -a
&lt;span style="color:#999;font-style:italic">#要永久禁掉swap分区，打开如下文件注释掉swap那一行&lt;/span>
&lt;span style="color:#999;font-style:italic"># sudo vi /etc/stab&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭SELinux的&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 临时禁用selinux&lt;/span>
&lt;span style="color:#999;font-style:italic"># 永久关闭 修改/etc/sysconfig/selinux文件设置&lt;/span>
sed -i &lt;span style="color:#ed9d13">&amp;#39;s/SELINUX=permissive/SELINUX=disabled/&amp;#39;&lt;/span> /etc/sysconfig/selinux
&lt;span style="color:#999;font-style:italic"># 这里按回车，下面是第二条命令&lt;/span>
setenforce &lt;span style="color:#3677a9">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭防火墙&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">systemctl disable firewalld.service &amp;amp;&amp;amp; systemctl stop firewalld.service
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>配置转发参数&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 配置转发相关参数，否则可能会出错&lt;/span>
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf
&lt;/span>&lt;span style="color:#ed9d13">net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span>&lt;span style="color:#ed9d13">net.bridge.bridge-nf-call-iptables = 1
&lt;/span>&lt;span style="color:#ed9d13">vm.swappiness=0
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;span style="color:#999;font-style:italic"># 这里按回车，下面是第二条命令&lt;/span>
sysctl --system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里就完成了k8s集群搭建的准备工作，集群搭建的话以上操作结束后将操作完的系统制作成系统镜像，方便集群搭建&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="正式安装">正式安装&lt;/h1>
&lt;p>&lt;strong>以下的操作都只在主节点上进行：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>初始化镜像&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubeadm init --kubernetes-version=v1.11.0 --pod-network-cidr=10.10.0.0/16 &lt;span style="color:#999;font-style:italic">#这里填写集群所在网段&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>之后的输出会是这样：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.938979&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> feature_gate.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">230&lt;/span>] feature gates: &amp;amp;{&lt;span style="color:#6ab825;font-weight:bold">map&lt;/span>[]}
[init] using Kubernetes version: v1&lt;span style="color:#3677a9">.11.0&lt;/span>
[preflight] running pre-flight checks
I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.961005&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">81&lt;/span>] Validating kernel version
I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.961061&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">96&lt;/span>] Validating kernel config
[WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: &lt;span style="color:#3677a9">18.03.1&lt;/span>-ce. Max validated version: &lt;span style="color:#3677a9">17.03&lt;/span>
[WARNING Hostname]: hostname &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> could not be reached
[WARNING Hostname]: hostname &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> lookup g2-apigateway on &lt;span style="color:#3677a9">100.100.2.138&lt;/span>:&lt;span style="color:#3677a9">53&lt;/span>: no such host
[preflight/images] Pulling images required &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> setting up a Kubernetes cluster
[preflight/images] This might take a minute or two, depending on the speed of your internet connection
[preflight/images] You can also perform this action in beforehand using &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>kubeadm config images pull&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>
[kubelet] Writing kubelet environment file with flags to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
[kubelet] Writing kubelet configuration to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
[preflight] Activating the kubelet service
[certificates] Generated ca certificate and key.
[certificates] Generated apiserver certificate and key.
[certificates] apiserver serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway kubernetes kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span> kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span>.svc kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span>.svc.cluster.local] and IPs [&lt;span style="color:#3677a9">10.96.0.1&lt;/span> &lt;span style="color:#3677a9">172.16.8.62&lt;/span>]
[certificates] Generated apiserver-kubelet-client certificate and key.
[certificates] Generated sa key and public key.
[certificates] Generated front-proxy-ca certificate and key.
[certificates] Generated front-proxy-client certificate and key.
[certificates] Generated etcd/ca certificate and key.
[certificates] Generated etcd/server certificate and key.
[certificates] etcd/server serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway localhost] and IPs [&lt;span style="color:#3677a9">127.0.0.1&lt;/span> ::&lt;span style="color:#3677a9">1&lt;/span>]
[certificates] Generated etcd/peer certificate and key.
[certificates] etcd/peer serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway localhost] and IPs [&lt;span style="color:#3677a9">172.16.8.62&lt;/span> &lt;span style="color:#3677a9">127.0.0.1&lt;/span> ::&lt;span style="color:#3677a9">1&lt;/span>]
[certificates] Generated etcd/healthcheck-client certificate and key.
[certificates] Generated apiserver-etcd-client certificate and key.
[certificates] valid certificates and keys now exist in &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/pki&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/admin.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/kubelet.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/controller-manager.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/scheduler.conf&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-apiserver to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-apiserver.yaml&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-controller-manager to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-controller-manager.yaml&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-scheduler to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-scheduler.yaml&amp;#34;&lt;/span>
[etcd] Wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> a local etcd instance to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/etcd.yaml&amp;#34;&lt;/span>
[init] waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet to boot up the control plane as Static Pods from directory &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
[init] this might take a minute or longer &lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> the control plane images have to be pulled
[apiclient] All control plane components are healthy after &lt;span style="color:#3677a9">41.001672&lt;/span> seconds
[uploadconfig] storing the configuration used in ConfigMap &lt;span style="color:#ed9d13">&amp;#34;kubeadm-config&amp;#34;&lt;/span> in the &lt;span style="color:#ed9d13">&amp;#34;kube-system&amp;#34;&lt;/span> Namespace
[kubelet] Creating a ConfigMap &lt;span style="color:#ed9d13">&amp;#34;kubelet-config-1.11&amp;#34;&lt;/span> in namespace kube-system with the configuration &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelets in the cluster
[markmaster] Marking the node g2-apigateway as master by adding the label &lt;span style="color:#ed9d13">&amp;#34;node-role.kubernetes.io/master=&amp;#39;&amp;#39;&amp;#34;&lt;/span>
[markmaster] Marking the node g2-apigateway as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[patchnode] Uploading the CRI Socket information &lt;span style="color:#ed9d13">&amp;#34;/var/run/dockershim.sock&amp;#34;&lt;/span> to the Node API object &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> as an annotation
[bootstraptoken] using token: o337m9.ceq32wg9g2gro7gx
[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> nodes to get long term certificate credentials
[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstraptoken] configured RBAC rules to allow certificate rotation &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> all node client certificates in the cluster
[bootstraptoken] creating the &lt;span style="color:#ed9d13">&amp;#34;cluster-info&amp;#34;&lt;/span> ConfigMap in the &lt;span style="color:#ed9d13">&amp;#34;kube-public&amp;#34;&lt;/span> namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy
Your Kubernetes master has initialized successfully!
To start using your cluster, you need to run the following as a regular user:
mkdir -p &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube/config
sudo chown &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>(id -u):&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>(id -g) &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube/config
You should now deploy a pod network to the cluster.
Run &lt;span style="color:#ed9d13">&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span> with one of the options listed at:
https:&lt;span style="color:#999;font-style:italic">//kubernetes.io/docs/concepts/cluster-administration/addons/
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>
You can now join any number of machines by running the following on each node
as root:
kubeadm join &lt;span style="color:#3677a9">10.10.207.253&lt;/span>:&lt;span style="color:#3677a9">6443&lt;/span> --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:&lt;span style="color:#3677a9">90e3&lt;/span>a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里注意最后一行：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">kubeadm join &lt;span style="color:#3677a9">10.10.207.253&lt;/span>:&lt;span style="color:#3677a9">6443&lt;/span> --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:&lt;span style="color:#3677a9">90e3&lt;/span>a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>证明集群主节点安装成功，这里要记得保存这条命令，以便之后各个节点加入集群&lt;/p>
&lt;p>&lt;strong>配置kubetl认证信息&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">export&lt;/span> &lt;span style="color:#40ffff">KUBECONFIG&lt;/span>=/etc/kubernetes/admin.conf
&lt;span style="color:#999;font-style:italic"># 如果你想持久化的话，直接执行以下命令【推荐】&lt;/span>
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;export KUBECONFIG=/etc/kubernetes/admin.conf&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>安装flanel网络&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p /etc/cni/net.d/
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF&amp;gt; /etc/cni/net.d/10-flannel.conf
&lt;/span>&lt;span style="color:#ed9d13">{
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delegate&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span>&lt;span style="color:#ed9d13">}
&lt;/span>&lt;span style="color:#ed9d13">}
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
mkdir /usr/share/oci-umount/oci-umount.d -p
mkdir /run/flannel/
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF&amp;gt; /run/flannel/subnet.env
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_NETWORK=10.244.0.0/16
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_SUBNET=10.244.1.0/24
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_MTU=1450
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_IPMASQ=true
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>最后需要新建一个flannel.yml文件：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRole&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">rules&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- pods&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- get&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- nodes&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- list&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- watch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- nodes/status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- patch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRoleBinding&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">roleRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiGroup&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRole&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">subjects&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ServiceAccount&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ServiceAccount&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ConfigMap&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">data&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cni-conf.json&lt;/span>:&lt;span style="color:#666"> &lt;/span>|&lt;span style="color:#ed9d13">
&lt;/span>&lt;span style="color:#ed9d13"> {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;delegate&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">net-conf.json&lt;/span>:&lt;span style="color:#666"> &lt;/span>|&lt;span style="color:#ed9d13">
&lt;/span>&lt;span style="color:#ed9d13"> {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Network&amp;#34;: &amp;#34;10.10.0.0/16&amp;#34;, #这里换成集群所在的网段
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Backend&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Type&amp;#34;: &amp;#34;vxlan&amp;#34;
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>DaemonSet&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-ds&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostNetwork&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">nodeSelector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">beta.kubernetes.io/arch&lt;/span>:&lt;span style="color:#666"> &lt;/span>amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tolerations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>node-role.kubernetes.io/master&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">operator&lt;/span>:&lt;span style="color:#666"> &lt;/span>Exists&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">effect&lt;/span>:&lt;span style="color:#666"> &lt;/span>NoSchedule&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceAccountName&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initContainers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>install-cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>quay.io/coreos/flannel:v0.9.1-amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- cp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">args&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- -f&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /etc/kube-flannel/cni-conf.json&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /etc/cni/net.d/10-flannel.conf&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/cni/net.d&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/kube-flannel/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>quay.io/coreos/flannel:v0.9.1-amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;/opt/bin/flanneld&amp;#34;&lt;/span>,&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;--ip-masq&amp;#34;&lt;/span>,&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;--kube-subnet-mgr&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">securityContext&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">privileged&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>POD_NAME&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>metadata.name&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>POD_NAMESPACE&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>metadata.namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/kube-flannel/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/cni/net.d&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMap&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f ./flannel.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，master节点不参与工作负载，但如果希望安装出一个all-in-one的k8s环境，则可以执行以下命令：&lt;/p>
&lt;p>&lt;strong>让master节点成为一个node节点：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl taint nodes --all node-role.kubernetes.io/master-
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看节点信息：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>会看到如下的输出：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME STATUS ROLES AGE VERSION
k8s-master Ready master 18h v1.11.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>以下是节点配置&lt;/strong>&lt;/p>
&lt;p>在配置好主节点之后，就可以配置集群的其他节点了，这里建议直接安装之前做好准备工作的系统镜像
进入节点机器之后，直接执行之前保存好的命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubeadm join 10.10.207.253:6443 --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:90e3a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完后会看到：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">[preflight] running pre-flight checks
[WARNING RequiredIPVSKernelModulesAvailable]: the IPVS proxier will not be used, because the following required kernel modules are not loaded: [ip_vs_wrr ip_vs_sh ip_vs ip_vs_rr] or no builtin kernel ipvs support: &lt;span style="color:#6ab825;font-weight:bold">map&lt;/span>[ip_vs_rr:{} ip_vs_wrr:{} ip_vs_sh:{} nf_conntrack_ipv4:{} ip_vs:{}]
you can solve this problem with following methods:
&lt;span style="color:#3677a9">1.&lt;/span> Run &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>modprobe -- &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span> to load missing kernel modules;
&lt;span style="color:#3677a9">2.&lt;/span> Provide the missing builtin kernel ipvs support
I0725 &lt;span style="color:#3677a9">09&lt;/span>:&lt;span style="color:#3677a9">59&lt;/span>:&lt;span style="color:#3677a9">27.929247&lt;/span> &lt;span style="color:#3677a9">10196&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">81&lt;/span>] Validating kernel version
I0725 &lt;span style="color:#3677a9">09&lt;/span>:&lt;span style="color:#3677a9">59&lt;/span>:&lt;span style="color:#3677a9">27.929356&lt;/span> &lt;span style="color:#3677a9">10196&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">96&lt;/span>] Validating kernel config
[discovery] Trying to connect to API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Created cluster-info discovery client, requesting info from &lt;span style="color:#ed9d13">&amp;#34;https://10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Requesting info from &lt;span style="color:#ed9d13">&amp;#34;https://10.10.207.253:6443&amp;#34;&lt;/span> again to validate TLS against the pinned public key
[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Successfully established connection with API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[kubelet] Downloading configuration &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet from the &lt;span style="color:#ed9d13">&amp;#34;kubelet-config-1.11&amp;#34;&lt;/span> ConfigMap in the kube-system namespace
[kubelet] Writing kubelet configuration to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
[kubelet] Writing kubelet environment file with flags to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
[preflight] Activating the kubelet service
[tlsbootstrap] Waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information &lt;span style="color:#ed9d13">&amp;#34;/var/run/dockershim.sock&amp;#34;&lt;/span> to the Node API object &lt;span style="color:#ed9d13">&amp;#34;k8s-node1&amp;#34;&lt;/span> as an annotation
This node has joined the cluster:
* Certificate signing request was sent to master and a response
was received.
* The Kubelet was informed of the new secure connection details.
Run &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>kubectl get nodes&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span> on the master to see this node join the cluster.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里就表示执行完毕了，可以去主节点执行命令：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>可以看到节点已加入集群：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME STATUS ROLES AGE VERSION
k8s-master Ready master 20h v1.11.0
k8s-node1 Ready &amp;lt;none&amp;gt; 20h v1.11.0
k8s-node2 Ready &amp;lt;none&amp;gt; 20h v1.11.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这期间可能需要等待一段时间，状态才会全部变为ready&lt;/p>
&lt;h1 id="kubernetes-dashboard安装">kubernetes-dashboard安装&lt;/h1>
&lt;p>详见：&lt;a href="https://guoxudong.io/2018/dashboard-k8s">kubernetes安装dashboard&lt;/a>&lt;/p>
&lt;h1 id="采坑指南">采坑指南&lt;/h1>
&lt;p>有时会出现master节点一直处于notready的状态，这里可能是没有启动flannel，只需要按照上面的教程配置好flannel，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f ./flannel.yml
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Post: centos7安装指定版本的docker</title><link>https://guoxudong.io/post/install-docker/</link><pubDate>Tue, 14 Aug 2018 20:05:21 +0800</pubDate><guid>https://guoxudong.io/post/install-docker/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>在使用&lt;strong>centos7&lt;/strong>，并使用荫安装搬运工的时候，往往不希望安装最新版本的搬运工，而是希望安装与自己熟悉或者当前业务环境需要的版本，例如目前Kubernetes支持的最新搬运工版本为v17.03，所以就产生了安装指定版本码头工人的需求。&lt;/p>
&lt;/blockquote>
&lt;h1 id="安装步骤">安装步骤&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 安装依赖包&lt;/span>
yum install -y yum-utils device-mapper-persistent-data lvm2
&lt;span style="color:#999;font-style:italic"># 添加Docker软件包源&lt;/span>
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
&lt;span style="color:#999;font-style:italic">#关闭测试版本list（只显示稳定版）&lt;/span>
sudo yum-config-manager --enable docker-ce-edge
sudo yum-config-manager --enable docker-ce-test
&lt;span style="color:#999;font-style:italic"># 更新yum包索引&lt;/span>
yum makecache fast
&lt;span style="color:#999;font-style:italic">#NO.1 直接安装Docker CE （will always install the highest possible version，可能不符合你的需求）&lt;/span>
yum install docker-ce
&lt;span style="color:#999;font-style:italic">#NO.2 指定版本安装&lt;/span>
yum list docker-ce --showduplicates|sort -r
&lt;span style="color:#999;font-style:italic">#找到需要安装的&lt;/span>
yum install docker-ce-17.09.0.ce -y
&lt;span style="color:#999;font-style:italic">#启动docker&lt;/span>
systemctl start docker &amp;amp; systemctl &lt;span style="color:#24909d">enable&lt;/span> docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="采坑指南">采坑指南&lt;/h1>
&lt;blockquote>
&lt;p>当然本着万事皆有坑的原则，这里也是有坑的，在安装中也是会遇到如下的问题&lt;/p>
&lt;/blockquote>
&lt;p>在执行一下命令的时候：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum install docker-ce-17.03.0.ce -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>会出现如下的报错：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">--&amp;gt; Finished Dependency Resolution
Error: Package: docker-ce-17.03.0.ce-1.el7.centos.x86_64 (docker-ce-stable)
Requires: docker-ce-selinux &amp;gt;= 17.03.0.ce-1.el7.centos
Available: docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.0.ce-1.el7.centos
Available: docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.1.ce-1.el7.centos
Available: docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.2.ce-1.el7.centos
You could try using --skip-broken to work around the problem
You could try running: rpm -Va --nofiles --nodigest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在出现这个问题之后，需要执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic">#要先安装docker-ce-selinux-17.03.2.ce，否则安装docker-ce会报错&lt;/span>
yum install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
&lt;span style="color:#999;font-style:italic">#然后再安装 docker-ce-17.03.2.ce，就能正常安装&lt;/span>
yum install docker-ce-17.03.2.ce-1.el7.centos
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>