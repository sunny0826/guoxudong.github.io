<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – Docker</title><link>https://guoxudong.io/tags/docker/</link><description>Recent content in Docker on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 20 Apr 2019 19:54:50 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 什么的容器？Docker 工作原理及容器化简易指南</title><link>https://guoxudong.io/post/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/</link><pubDate>Sat, 20 Apr 2019 19:54:50 +0800</pubDate><guid>https://guoxudong.io/post/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/</guid><description>
&lt;p>&lt;strong>Docker 非常棒！&lt;/strong> 它使软件开发者无需担心配置和依赖性，在任何地方打包，发送和运行他们的应用程序。而在与 kubernetes 相结合后，它使应用集群部署和管理变得更方便。这使得 Docker 深受软件开发者的喜爱，越来越多的开发者开始使用 Docker。&lt;/p>
&lt;p>那么 Docker 到底是什么？&lt;/p>
&lt;p>它是构建、测试、部署和发布&lt;strong>容器化&lt;/strong>应用的&lt;strong>平台&lt;/strong>。称其为平台是因为 Docker 其实是一套用于管理与容器相关的所有事物的工具。作为 Docker 的核心，接下来我们将深入探讨容器。&lt;/p>
&lt;h2 id="什么是容器">什么是容器？&lt;/h2>
&lt;p>容器提供了在计算机上的隔离环境中安装和运行应用程序的方法。在容器内运行的应用程序仅可使用于为该容器分配的资源，例如：CPU，内存，磁盘，进程空间，用户，网络，卷等。在使用有限的容器资源的同时，并不与其他容器冲突。您可以将容器视为简易计算机上运行应用程序的隔离沙箱。&lt;/p>
&lt;p>这个概念听起来很熟悉，有些类似于虚拟机。但它们有一个关键的区别：容器使用的一种非常不同的，轻量的技术来实现资源隔离。容器利用了底层 Linux 内核的功能，而不是虚拟机采用的 &lt;a href="https://en.wikipedia.org/wiki/Hypervisor">hypervisor&lt;/a> 的方法。换句话说，容器调用 Linux 命令来分配和隔离出一组资源，然后在此空间中运行您的应用程序。我们快速来看下两个这样的功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>namespaces&lt;/strong>&lt;/p>
&lt;p>简单的讲就是，&lt;a href="http://man7.org/linux/man-pages/man7/namespaces.7.html">Linux namespace&lt;/a> 允许用户在独立进程之间隔离 CPU 等资源。进程的访问权限及可见性仅限于其所在的 namespaces 。因此，用户无需担心在一个 namespace 内运行的进程与在另一个 namespace 内运行的进程冲突。甚至可以同一台机器上的不同容器中运行具有相同 PID 的进程。同样的，两个不同容器中的应用程序可以使用相同的端口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cgroups&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://man7.org/linux/man-pages/man7/cgroups.7.html">cgroups&lt;/a> 允许对可用资源设置限制和约束。例如，您可以在一台拥有 16G 内存的计算机上创建一个 namespace ，限制其内部进程可用内存为 1GB。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>到这，您可能已经猜到 Docker 的工作原理了。当您请求 Docker 运行容器时，Docker 会在您的计算机上设置一个资源隔离的环境。然后 Docker 会将打包的应用程序和关联的文件复制到 namespace 内的文件系统中，此时环境的配置就完成了。之后 Docker 会执行您指定的命令运行应用程序。&lt;/p>
&lt;p>简而言之，Docker 通过使用 Linux namespace 和 cgroup（以及其他一些命令）来协调配置容器，将应用程序文件复制到为容器分配的磁盘，然后运行启动命令。Docker 还附带了许多其他用于管理容器的工具，例如：列出正在运行的容器，停止容器，发布容器镜像等许多其他工具。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2a8h1rc6lj211a0rcjsu.jpg" alt="image">&lt;/p>
&lt;p>与虚拟机相比，容器更轻量且速度更快，因为它利用了 Linux 底层操作系统在隔离的环境中运行。虚拟机的 hypervisor 创建了一个非常牢固的边界，以防止应用程序突破它，而&lt;a href="https://sysdig.com/blog/container-isolation-gone-wrong/">容器的边界不那么强大&lt;/a>。另一个区别是，由于 namespace 和 cgroups 功能仅在 Linux 上可用，因此容器无法在其他操作系统上运行。此时您可能想知道 Docker 如何在 macOS 或 Windows 上运行？ Docker 实际上使用了一个技巧，并在非 Linux 操作系统上安装 Linux 虚拟机，然后在虚拟机内运行容器。&lt;/p>
&lt;p>让我们利用目前为止学到的所有内容，从头开始创建和运行 Docker 容器。如果你还没有将 Docker 安装在你的机器上，可以参考&lt;a href="https://docs.docker.com/install/">这里&lt;/a>安装 Docker 。在这个示例中，我们将创建一个 Docker 容器，下载一个用 C语言 写的 Web 服务，编译并运行它，然后使用浏览器访问这个 Web 服务。&lt;/p>
&lt;p>我们将从所有 Docker 项目开始的地方：创建一个 &lt;code>Dockerfile&lt;/code> 开始。此文件描述了如何创建用于运行容器的 docker 镜像。既然我们还没有聊到镜像，那么让我们看一下&lt;a href="https://docs.docker.com/get-started/#images-and-containers">镜像的官方定义&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>镜像是一个可执行包，其包含运行应用程序所需的代码、运行时、库、环境变量和配置文件，容器是镜像的运行时实例。&lt;/p>
&lt;/blockquote>
&lt;p>简单的讲，当你要求 Docker 运行一个容器时，你必须给它一个包含如下内容的镜像：&lt;/p>
&lt;ol>
&lt;li>包含应用程序及其所有依赖的&lt;strong>文件系统快照&lt;/strong>。&lt;/li>
&lt;li>容器启动时的运行命令。&lt;/li>
&lt;/ol>
&lt;p>在 Docker 的世界，使用别人的镜像作为基础镜像来创建自己的镜像是十分普遍的。例如，官方 reds Docker 镜像就是基于 Debian 文件系统快照（&lt;a href="http://www.ethernetresearch.com/geekzone/building-linux-rootfs-from-scratch/">rootfs tarball&lt;/a>），并安装在其上配置 Redis。&lt;/p>
&lt;p>在我们的示例中，我们选择 &lt;a href="https://hub.docker.com/_/alpine">Alpine Linux&lt;/a> 为基础镜像。当您在 Docker 中看到 “alpine” 时，它通常意味着一个精简的基本镜像。 Alpine Linux 镜像大小只有约为5 MB！&lt;/p>
&lt;p>在您的计算机创建一个新目录（例如 &lt;code>dockerprj&lt;/code> ），然后新建一个 &lt;code>Dockerfile&lt;/code> 文件。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ touch Dockerfile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将如下内容粘贴到 &lt;code>Dockerfile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#999;font-style:italic"># Use Alpine Linux rootfs tarball to base our image on&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine:3.9 &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Set the working directory to be &amp;#39;/home&amp;#39;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;/home&amp;#39;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Setup our application on container&amp;#39;s file system&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> wget http://www.cs.cmu.edu/afs/cs/academic/class/15213-s00/www/class28/tiny.c &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add build-base &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; gcc tiny.c -o tiny &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;Hello World&amp;#39;&lt;/span> &amp;gt;&amp;gt; index.html&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Start the web server. This is container&amp;#39;s entry point&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;./tiny&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;8082&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># Expose port 8082&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#ed9d13"> 8082 &lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 &lt;code>Dockerfile&lt;/code> 包含创建镜像的内容说明。我们创建镜像基于 Alpine Linux（&lt;a href="http://www.ethernetresearch.com/geekzone/building-linux-rootfs-from-scratch/">rootfs tarball&lt;/a>），并将工作目录设置为 &lt;code>/home&lt;/code> 。接下来下载，编译并创建了一个用C编写的简单 Web 服务器的可执行文件，然后指定在运行容器时要执行的命令，并将容器端口8082暴露给主机。&lt;/p>
&lt;p>现在，我们就可以构建镜像了。在 &lt;code>Dockerfile&lt;/code> 的同级目录运行 &lt;code>docker build&lt;/code> 命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ docker build -t codeahoydocker .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果这个命令成功了，您将看到：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">Successfully tagged codeahoydocker:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们的镜像就创建成功了，该镜像主要包括：&lt;/p>
&lt;ol>
&lt;li>文件系统快照（Alpine Linux 和 我们安装的 Web 服务）&lt;/li>
&lt;li>启动命令（&lt;code>./tiny 8092&lt;/code>）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2aakgpe16j20zo0bqjt5.jpg" alt="image">&lt;/p>
&lt;p>既然成功构建了镜像，那么我们可以使用如下命令运行容器。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">umermansoor:dockerprj$ docker run -p 8082:8082 codeahoydocker:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们了解下这里发生了什么。&lt;/p>
&lt;p>通过 &lt;code>docker run&lt;/code> 命令，我们请求 Docker 基于 &lt;code>codeahoydocker:latest&lt;/code> 镜像创建和启动一个容器。&lt;code>-p 8082:8082&lt;/code> 将本地的8082端口映射到容器的8082端口（容器内的 Web 服务器正在监听8082端口上的连接）。打开你的浏览器并访问 localhost:8082/index.html 。你将可以看到 &lt;em>&lt;strong>Hello World&lt;/strong>&lt;/em> 信息。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2aazadeamj20yo0rcq5e.jpg" alt="image">&lt;/p>
&lt;p>最后我想补充一点，虽然 Docker 非常棒，而且对于大多数项目来说它是一个不错的选择，但我们并非处处都要使用它。在我的工作中，Docker 与 Kubernetes 结合使用，可以非常轻松地部署和管理后端微服务，我们不必为每个服务配置新的运行环境。另一方面，对于性能密集型应用程序，Docker 可能不是最佳选择。我经手的其中一个项目必须处理来自移动游戏客户端的 TCP 长连接（每台机器1000个），这时 Docker 网络出现了很多问题，导致无法将它用于该项目。&lt;/p>
&lt;p>希望上面这些内容有用。&lt;/p>
&lt;blockquote>
&lt;p>这篇文章由 &lt;a href="https://www.linkedin.com/in/umansoor">Umer Mansoor&lt;/a> 撰写，可以在 &lt;a href="https://www.facebook.com/codeahoy">Facebook&lt;/a> 或 &lt;a href="https://twitter.com/codeahoy">Twitter&lt;/a> 上关注并留下评论。&lt;/p>
&lt;/blockquote>
&lt;p>原文地址： &lt;a href="https://codeahoy.com/2019/04/12/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/">https://codeahoy.com/2019/04/12/what-are-containers-a-simple-guide-to-containerization-and-how-docker-works/&lt;/a>&lt;/p></description></item><item><title>Post: Alpine Linux详解</title><link>https://guoxudong.io/post/alpine-linux/</link><pubDate>Fri, 15 Mar 2019 09:53:02 +0800</pubDate><guid>https://guoxudong.io/post/alpine-linux/</guid><description>
&lt;h3 id="简介">简介&lt;/h3>
&lt;blockquote>
&lt;p>Small. Simple. Secure.Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Alpine Linux 是一个社区开发的面向安全应用的轻量级Linux发行版。 Alpine 的意思是“高山的”，它采用了musl libc和busybox以减小系统的体积和运行时资源消耗，同时还提供了自己的包管理工具apk。&lt;/p>
&lt;/blockquote>
&lt;h3 id="适用环境">适用环境&lt;/h3>
&lt;p>由于其小巧、安全、简单以及功能完备的特点，被广泛应用于众多Docker容器中。我司目前使用的基础镜像均是基于该系统，&lt;a href="https://hub.docker.com/_/alpine">dockerhub&lt;/a>上有提供各种语言的基础镜像.如：&lt;code>node:8-alpine&lt;/code>、&lt;code>python:3.6-alpine&lt;/code>，同时也可以基于alpine镜像制作符合自己需求的基础镜像。&lt;/p>
&lt;h3 id="简单的镜像构建示例">简单的镜像构建示例&lt;/h3>
&lt;p>这里提供一个python3的基础镜像的&lt;code>Dockerfile&lt;/code>，&lt;a href="https://pip.pypa.io/en/latest/installing/">get-pip.py&lt;/a>可在 &lt;a href="https://pip.pypa.io/en/latest/installing/">https://pip.pypa.io/en/latest/installing/&lt;/a> 下载。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">MAINTAINER&lt;/span>&lt;span style="color:#ed9d13"> guoxudong@keking.cn&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># 拷贝安装pip的脚本&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> get-pip.py /get-pip.py&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#999;font-style:italic"># 设置alpine的镜像地址为阿里云的地址&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;https://mirrors.aliyun.com/alpine/v3.6/main/&amp;#34;&lt;/span> &amp;gt; /etc/apk/repositories &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 安装依赖包&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; apk update &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add --no-cache bash &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># libevent-dev libxml2-dev libffi libxml2 libxslt libxslt-dev \&lt;/span>
python3 gcc g++ python3-dev python-dev linux-headers libffi-dev openssl-dev &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 由于通过apk安装的pip总是基于python2.7的版本，不符合项目要求，此处使用get-pip.py的方式&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999;font-style:italic">#安装基于python3.6的pip&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; python3 /get-pip.py &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 删除不必要的脚本&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#24909d">cd&lt;/span> .. &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; rm -f /get-pip.py &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &lt;span style="color:#999;font-style:italic"># 此环境专用做运行django项目，因此移除不必要的工具，减少空间&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#999;font-style:italic"># &amp;amp;&amp;amp; pip uninstall -y pip setuptools wheel \&lt;/span>
&lt;span style="color:#999;font-style:italic"># 最后清空apk安装时产生的无用文件&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &amp;amp;&amp;amp; rm -rf /var/cache/apk/*&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>对比&lt;/strong>：同样版本的python，对比镜像大小，可见使用alpine的优势&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ docker images | grep python
python 3.4 ccbffa0d70d9 &lt;span style="color:#3677a9">2&lt;/span> months ago 922MB
alpine-python3 latest 69e41b673a50 &lt;span style="color:#3677a9">2&lt;/span> months ago 297MB
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="apk包管理">apk包管理&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>镜像源配置&lt;/p>
&lt;p>官方镜像源列表：http://dl-cdn.alpinelinux.org/alpine/MIRRORS.txt&lt;/p>
&lt;blockquote>
&lt;p>MIRRORS.txt中是当前Alpine官方提供的镜像源（Alpine安装的时候系统自动选择最佳镜像源）&lt;/p>
&lt;/blockquote>
&lt;p>国内镜像源&lt;/p>
&lt;ul>
&lt;li>清华TUNA镜像源：https://mirror.tuna.tsinghua.edu.cn/alpine/&lt;/li>
&lt;li>中科大镜像源：http://mirrors.ustc.edu.cn/alpine/&lt;/li>
&lt;li>阿里云镜像源：http://mirrors.aliyun.com/alpine/&lt;/li>
&lt;/ul>
&lt;p>镜像源配置&lt;/p>
&lt;p>这里推荐使用阿里云镜像源，由于公司应用都是部署在阿里云上，使用阿里云镜像源会快很多&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ vi /etc/apk/repositories
&lt;span style="color:#999;font-style:italic"># 将这两行插入到repositories文件开头&lt;/span>
http://mirrors.aliyun.com/alpine/v3.9/main
http://mirrors.aliyun.com/alpine/v3.9/community
&lt;span style="color:#999;font-style:italic"># 后面是原有的默认配置&lt;/span>
http://dl-cdn.alpinelinux.org/alpine/v3.8/main
http://dl-cdn.alpinelinux.org/alpine/v3.8/community
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>apk包管理命令&lt;/p>
&lt;p>这里介绍一些常用的操作apk包管理命令&lt;/p>
&lt;ul>
&lt;li>&lt;code>apk --help&lt;/code>可以查看完整的包管理命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk --help
apk-tools 2.10.0, compiled &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> x86_64.
Installing and removing packages:
add Add PACKAGEs to &lt;span style="color:#ed9d13">&amp;#39;world&amp;#39;&lt;/span> and install (or upgrade) them, &lt;span style="color:#6ab825;font-weight:bold">while&lt;/span> ensuring that all dependencies are met
del Remove PACKAGEs from &lt;span style="color:#ed9d13">&amp;#39;world&amp;#39;&lt;/span> and uninstall them
System maintenance:
fix Repair package or upgrade it without modifying main dependencies
update Update repository indexes from all remote repositories
upgrade Upgrade currently installed packages to match repositories
cache Download missing PACKAGEs to cache and/or delete unneeded files from cache
Querying information about packages:
info Give detailed information about PACKAGEs or repositories
list List packages by PATTERN and other criteria
dot Generate graphviz graphs
policy Show repository policy &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> packages
Repository maintenance:
index Create repository index file from FILEs
fetch Download PACKAGEs from global repositories to a &lt;span style="color:#24909d">local&lt;/span> directory
verify Verify package integrity and signature
manifest Show checksums of package contents
Use apk &amp;lt;command&amp;gt; --help &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> command-specific help.
Use apk --help --verbose &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> a full &lt;span style="color:#24909d">command&lt;/span> listing.
This apk has coffee making abilities.
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>apk info&lt;/code> 列出所有已安装的软件包&lt;/li>
&lt;li>&lt;code>apk apk update&lt;/code> 更新最新本地镜像源&lt;/li>
&lt;li>&lt;code>apk upgrade&lt;/code> 升级软件&lt;/li>
&lt;li>&lt;code>apk search&lt;/code> 搜索可用软件包，&lt;strong>搜索之前最好先更新镜像源&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apk search &lt;span style="color:#999;font-style:italic">#查找所以可用软件包&lt;/span>
$ apk search -v &lt;span style="color:#999;font-style:italic">#查找所以可用软件包及其描述内容&lt;/span>
$ apk search -v &lt;span style="color:#ed9d13">&amp;#39;acf*&amp;#39;&lt;/span> &lt;span style="color:#999;font-style:italic">#通过软件包名称查找软件包&lt;/span>
$ apk search -v -d &lt;span style="color:#ed9d13">&amp;#39;docker&amp;#39;&lt;/span> &lt;span style="color:#999;font-style:italic">#通过描述文件查找特定的软件包&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>apk add&lt;/code> 从仓库中安装最新软件包，并自动安装必须的依赖包,也可以从第三方仓库添加软件包&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ apk add curl busybox-extras &lt;span style="color:#999;font-style:italic">#软件以空格分开这里，这里列举我们用的最多的curl和telnet&lt;/span>
bash-4.3# apk add --no-cache curl
bash-4.3# apk add mongodb --update-cache --repository http://mirrors.ustc.edu.cn/alpine/v3.6/main/ --allow-untrusted &lt;span style="color:#999;font-style:italic">#从指定镜像源拉取&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装指定版本软件包&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk add &lt;span style="color:#40ffff">mongodb&lt;/span>=4.0.5-r0
bash-4.3# apk add &lt;span style="color:#ed9d13">&amp;#39;mongodb&amp;lt;4.0.5&amp;#39;&lt;/span>
bash-4.3# apk add &lt;span style="color:#ed9d13">&amp;#39;mongodb&amp;gt;4.0.5&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>升级指定软件包&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">bash-4.3# apk add --upgrade busybox &lt;span style="color:#999;font-style:italic">#升级指定软件包&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注&lt;/strong>：安装之前最好修改本地镜像源，更新镜像源，搜索软件包是否存在，选择合适岸本在进行安装。&lt;/p>
&lt;ul>
&lt;li>&lt;code>apk del&lt;/code> 卸载并删除指定软件包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="结语">结语&lt;/h3>
&lt;p>Alpine以其小巧、简单在docker容器中得到了广泛的应用。但是Alpine Linux使用了musl，可能和其他Linux发行版使用的glibc实现会有些不同。这里主要介绍了它的基础用法，但是足以满足日常运维需要。毕竟在kubernetes集群中操作容器内环境较直接在虚拟机或者物理机上操作更为复杂，由于缩减的容器的大小，导致和CentOS或Ubuntu相比缺少许多功能。而缺少的这些功能又不想在基础镜像中安装导致容器变大，这个时候就可以在容器运行后，根据实际需要安装即可。&lt;/p>
&lt;h3 id="参考文档">参考文档&lt;/h3>
&lt;p>&lt;a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management">https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management&lt;/a>&lt;/p></description></item></channel></rss>