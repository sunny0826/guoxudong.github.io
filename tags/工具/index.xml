<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 工具</title><link>https://guoxudong.io/tags/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 04 Jan 2021 14:14:02 +0800</lastBuildDate><atom:link href="https://guoxudong.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 使用 iTerm2 打造美观高效的 Mac 终端</title><link>https://guoxudong.io/post/iterm2/</link><pubDate>Mon, 04 Jan 2021 14:14:02 +0800</pubDate><guid>https://guoxudong.io/post/iterm2/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近换了一台新电脑，开发环境和软件都需要重新安装和配置，正好借着这个机会，介绍一下 macOS 终端神器 iTerm2 的安装配置，并推荐一些插件和好用的工具。&lt;/p>
&lt;h2 id="iterm2">iTerm2&lt;/h2>
&lt;p>iTerm2 是默认终端的替代品，也是目前 macOS 下最好用的终端工具，集颜值和效率于一身。&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>直接前往 &lt;a href="http://www.iterm2.com/">iTerm2 官网&lt;/a> 下载即可，下载完成后解压并双击安装。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gmbncotndlj21km1gu7hm.jpg" alt="iTerm2 官网">&lt;/p>
&lt;h3 id="设置热键">设置热键&lt;/h3>
&lt;p>为了快速唤出 iterm2 终端，这里推荐使用热键进行唤出。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gmbnhmj7w8j21k20y87el.jpg" alt="设置热键">&lt;/p>
&lt;h3 id="设置-status-bar">设置 Status bar&lt;/h3>
&lt;p>iterm2 提供了很多 Status bar，可在在终端页面显示更多关于本机的信息，如：CPU、内存、电池电量等。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gmbnkvtjloj21ey0tojwj.jpg" alt="配置 Status bar">&lt;/p>
&lt;p>点击 &lt;code>Configure Status bar&lt;/code> 进入配置页面，这里将想要的 Status bar 拖入下面的方框即可。这里还推荐选择 &lt;code>Auto-Rainbow&lt;/code>，这样 Status bar 就是以彩色的形式展示了。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gmbnn70borj21eu0skdjz.jpg" alt="选择 Status bar">&lt;/p>
&lt;h3 id="配色">配色&lt;/h3>
&lt;p>选择一个自己喜欢的配色方案。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gmbnqt1lhej21fg0qqn26.jpg" alt="选择配色方案">&lt;/p>
&lt;h3 id="光标选择">光标选择&lt;/h3>
&lt;p>这里提供了三种光标可供选择：&lt;code>_&lt;/code>、&lt;code>|&lt;/code>、&lt;code>[]&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65gy1gmbnsyh5rqj21g00qu79h.jpg" alt="光标选择">&lt;/p>
&lt;h3 id="窗口设置">窗口设置&lt;/h3>
&lt;p>这里可以设置窗口透明度、背景图片、行列数以及风格等。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gmbnw0mzfej21fi0wmagb.jpg" alt="窗口设置">&lt;/p>
&lt;h3 id="迁移配置">迁移配置&lt;/h3>
&lt;p>如果你已经有配置好的 iterm2，可以将配置导出，迁移到新 Mac 上。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gmboqetam4j21fi17gkjl.jpg" alt="导出配置">&lt;/p>
&lt;p>之后在新 Mac 上导入即可。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gmborddsylj21es176e81.jpg" alt="导入配置">&lt;/p>
&lt;h2 id="oh-my-zsh">oh my zsh&lt;/h2>
&lt;p>在设置好 iterm2 之后，就需要安装 &lt;a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh&lt;/a>。Oh My Zsh 是一款社区驱动的命令行工具，它基于 zsh 命令行，提供了主题配置，插件机制，大大提高了可玩性及使用效率。&lt;/p>
&lt;h3 id="安装-1">安装&lt;/h3>
&lt;p>可以使用 &lt;code>curl&lt;/code> 和 &lt;code>wget&lt;/code> 安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># curl&lt;/span>
sh -c &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>
&lt;span style="color:#999;font-style:italic"># wget&lt;/span>
sh -c &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="powerlevel10k">powerlevel10k&lt;/h3>
&lt;p>&lt;a href="https://github.com/romkatv/powerlevel10k">powerlevel10k&lt;/a> 是一款 zsh 主题，是 &lt;a href="https://github.com/Powerlevel9k/powerlevel9k">powerlevel9k&lt;/a> 的升级版，强调快速、高效和开箱即用。powerlevel10k 免去了之前 powerlevel9k 比较繁琐的安装方式，如安装字体，配置样式、修改主题等一系列繁琐的操作，开箱即用，非常简单。&lt;/p>
&lt;h4 id="安装-2">安装&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git clone --depth=&lt;span style="color:#3677a9">1&lt;/span> https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;source ~/powerlevel10k/powerlevel10k.zsh-theme&amp;#39;&lt;/span> &amp;gt;&amp;gt;~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="配置">配置&lt;/h4>
&lt;p>在代码拉取成功后，执行命令 &lt;code>source ~/.zshrc&lt;/code> 会自动安装字体文件，无需任何其他操作。&lt;/p>
&lt;p>之后执行命令，即可开始配置：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">p10k configure
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里会进行交互式的配置，只需根据提示进行选择即可。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gmap0z93zdg20ok0l60xf.gif" alt="交互式的配置">&lt;/p>
&lt;h3 id="插件">插件&lt;/h3>
&lt;p>oh my zsh 还提供了多种好用的插件，这里介绍两款好用的插件。&lt;/p>
&lt;h4 id="语法高亮">语法高亮&lt;/h4>
&lt;p>可以在命令行高亮显示语法，效果如下：&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1gmbodvj2sej20lu0isdj6.jpg" alt="语法高亮">&lt;/p>
&lt;p>安装方式：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># zsh-syntax-highlighting&lt;/span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="命令自动补全">命令自动补全&lt;/h4>
&lt;p>可以根据您的历史记录和完成情况给输入的命令提供建议，效果如下：&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gmbojbb38wj20sy044wel.jpg" alt="命令自动补全">&lt;/p>
&lt;p>安装方式&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># zsh-autosuggestion&lt;/span>
git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="插件配置">插件配置&lt;/h4>
&lt;p>安装好之后，需要修改 &lt;code>.zshrc&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># .zshrc&lt;/span>
...
&lt;span style="color:#40ffff">plugins&lt;/span>=(git zsh-autosuggestions zsh-syntax-highlighting)
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完成后，执行命令，完成设置：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">source&lt;/span> ~/.zshrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多插件，详见：https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>iTerm2 其实还有很多好玩的配置，由于篇幅有限这里就不过多介绍了，感兴趣的朋友可以登录官网查看官方文档。&lt;/p></description></item><item><title>Post: 手把手教你免费获取正版 Jetbrains 全家桶 License</title><link>https://guoxudong.io/post/jetbrains-opensource-free-license/</link><pubDate>Tue, 15 Dec 2020 14:50:50 +0800</pubDate><guid>https://guoxudong.io/post/jetbrains-opensource-free-license/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>最近 Goland 发布了最新的 2020.3 版本，新增时间包的支持，通过自动补全快捷键(Ctrl+Space)就可以快速补全时间占位符 &lt;code>2006-01-02 02-15-05&lt;/code> 了，再也不用每次都点进源码里去找了。&lt;/p>
&lt;/div>
&lt;p>Jetbrains 推出的一些列 IDE 被称为 Jetbrains 全家桶，以其极好的用户体验，帅气的 UI 界面和离谱的价格在程序员中拥有极高的知名度。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/mw690/ad5fbf65gy1glokceqqkbj21zs0ue0y8.jpg" alt="全家桶价格">&lt;/p>
&lt;p>本篇文章就手把手的教大家免费获得正版的 Jetbrains 全家桶 License。&lt;/p>
&lt;h2 id="初次申请">初次申请&lt;/h2>
&lt;p>JetBrains 通过为开源项目核心项目贡献者免费提供一套一流的开发者工具来支持非商业开源项目。&lt;/p>
&lt;h3 id="申请要求">申请要求&lt;/h3>
&lt;p>开源项目需要满足：&lt;/p>
&lt;ul>
&lt;li>了解&lt;a href="https://opensource.org/docs/osd">开源&lt;/a>定义。&lt;/li>
&lt;li>正在积极开发，例如，在过去 3 个月内定期提交新代码。&lt;/li>
&lt;li>不提供开源软件的付费版本，也不提供与开源项目相关的任何商业服务（例如付费支持、咨询等）。&lt;/li>
&lt;li>未获得商业公司或组织（NGO、教育、研究或政府组织）的资助。&lt;/li>
&lt;li>不为他们的核心项目开发者支付工资。&lt;/li>
&lt;/ul>
&lt;p>开发者需要满足：&lt;/p>
&lt;ul>
&lt;li>许可证仅提供给项目负责人和核心项目提交者。&lt;/li>
&lt;li>许可证有效期为一年，之后如果您的项目仍符合支持计划要求，也可以续订。&lt;/li>
&lt;li>您只能将免费许可证用于开发非商业开源项目。&lt;/li>
&lt;li>您不能与任何第三方共享免费许可证。&lt;/li>
&lt;/ul>
&lt;p>同时 JetBrains 还为 &lt;a href="http://www.apache.org/foundation/how-it-works.html#committers">The Apache Software Foundation&lt;/a>、&lt;a href="http://numfocus.org/sponsored-projects">NumFOCUS 项目&lt;/a>和 Drupal 核心贡献者提供免费的 License。&lt;/p>
&lt;h3 id="选择项目">选择项目&lt;/h3>
&lt;p>你需要选择一个自己的开源项目，并且持续开发 3 个月以上，这个项目没有 star、commit 数量的要求，同时需要包含开源 &lt;code>License&lt;/code>，比如我使用的就是 &lt;code>Apache-2.0 License&lt;/code>。&lt;/p>
&lt;p>之后就可以提交申请了。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>申请链接：&lt;a href="https://www.jetbrains.com/shop/eform/opensource">https://www.jetbrains.com/shop/eform/opensource&lt;/a>&lt;/p>
&lt;/div>
&lt;h3 id="填写申请">填写申请&lt;/h3>
&lt;p>这里需要填写的内容都比较简单，按照要求填写即可，包括：&lt;/p>
&lt;ul>
&lt;li>项目页面：如果没有直接填写项目 github URL&lt;/li>
&lt;li>repo 仓库地址&lt;/li>
&lt;li>License 地址：直接贴上 repo 中 License 的链接即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/mw690/ad5fbf65gy1glol6tl35qj20vg1x210m.jpg" alt="申请">&lt;/p>
&lt;p>填写完点击提交。&lt;/p>
&lt;h3 id="接收邮件">接收邮件&lt;/h3>
&lt;p>在提交申请后，会收到一封来自 &lt;code>JetBrains Community Support&lt;/code> 的邮件，表示会有几天来评估你的项目。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/mw690/ad5fbf65gy1glolfekw0mj20ym0f6wk4.jpg" alt="收到申请">&lt;/p>
&lt;p>一般会在 2 个工作日内收到批准邮件。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/mw690/ad5fbf65gy1glolgt0ot7j215c0wsqlb.jpg" alt="批准申请">&lt;/p>
&lt;p>邮件内容除了为你颁发免费的 License，还会希望你将 JetBrains 的 logo 加入到你项目介绍中。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/mw690/ad5fbf65gy1glolkyl3c6j21ck0fc0ty.jpg" alt="加入鸣谢">&lt;/p>
&lt;h3 id="license-激活">License 激活&lt;/h3>
&lt;p>之后点击邮件中的链接，登录你的 JetBrains 账号（如果没有请先注册一个），按照引导完成激活即可。&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>由于我已经激活，所以这里看不到邀请页面。&lt;/p>
&lt;/div>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gloltcob80j22hw17m7bh.jpg" alt="All Products Pack">&lt;/p>
&lt;h2 id="申请续期">申请续期&lt;/h2>
&lt;p>在旧的 License 即将到期的 2 周前，&lt;code>JetBrains Community Support&lt;/code> 会再次发来邮件，提醒 License 即将到期。如果你的项目还在积极开发中，可以申请续期，并附上续期链接。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/mw690/ad5fbf65gy1glom2dv7a7j21520l0guq.jpg" alt="提醒邮件">&lt;/p>
&lt;p>申请续期只需在申请页面 &lt;code>Do we know you?&lt;/code> 中选择 &lt;code>Yes&lt;/code>，然后填入去年颁发给你的 License ID，其余内容与之前一样。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/mw690/ad5fbf65gy1glolwsbn6ij21ma0uc78c.jpg" alt="申请续期">&lt;/p>
&lt;p>在申请续期后，同样会收到评估邮件，不过这回时间变成了一到两周。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/mw690/ad5fbf65gy1glom4k0ttvj215g0haah7.jpg" alt="续期评估邮件">&lt;/p>
&lt;p>说是两周，但两天后我就收到了续期通过的邮件，内容与初次申请一样，这里就不做展示了。&lt;/p>
&lt;h2 id="toolbox">Toolbox&lt;/h2>
&lt;p>最后再推荐一下 JetBrains 的 Toolbox App，Toolbox 保持了 JetBrains 一贯优秀的用户体验。可以轻松管理本机所有 JetBrains 的应用，只需登录一次即可完成所有产品的激活，无需再输入 License，同时安装和更新也十分方便，通过 Toolbox 快速打开 IDE，体验极佳。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/bmiddle/ad5fbf65gy1glomepqas8j20og12wdkb.jpg" alt="Toolbox">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>到这里 Jetbrains License 的申请和激活已经完成了，感谢 JetBrains 对开源的支持。如果你还没有申请，那么就快去申请属于你的 JetBrains License 吧！&lt;/p></description></item><item><title>Post: 玩转 Drone CI</title><link>https://guoxudong.io/post/drone-optimize/</link><pubDate>Wed, 11 Sep 2019 13:53:09 +0800</pubDate><guid>https://guoxudong.io/post/drone-optimize/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>使用 drone CI 已有小半年，在将原有项目的 CI 系统从 jenkins 向 drone 迁移的时候，也陆陆续续遇到了一些问题。在这段时间，也完成了使用官方插件到插件定制的转变，使得 drone CI 流程更贴合我们 devops 开发流程。通过这篇文章总结一下目前我们对 drone 进行的一些定制化开发以及使用技巧，由于 drone 官方的文档不是很详细，所以也希望通过这种方法来和其他使用 drone 的用户分享和交流使用经验。&lt;/p>
&lt;h2 id="并行构建">并行构建&lt;/h2>
&lt;p>在默认情况下，drone 会按照步骤执行，但是有时会遇到前后端在同一个 repo 的情况，这时使用并行构建就可以省去很多的构建时间。&lt;/p>
&lt;h3 id="构建流程">构建流程&lt;/h3>
&lt;p>在下面的示例里会展示一个如下流程：repo 中包含一个由 Java 写的服务以及一个 vue 前端项目，maven 构建和 npm 构建同时进行，maven 构建成功后会镜像 docker 镜像构建并上传镜像仓库，docker 构建成功后会镜像 k8s 部署，部署成功后会进行 vue 项目前端发布，在 k8s 部署成功并且前端发布成功后，进行钉钉构建成功同时，否则进行钉钉构建失败通知。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">前端构建 ———————————— 前端发布
\ / \
\ / 钉钉通知
\ / /
后端构建 —— 镜像构建 —— k8s部署 ——————
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="droneyml-配置">.drone.yml 配置&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;pipeline&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;default&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Maven编译&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/drone-maven&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;mvn clean install&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;clone&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;构建镜像&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/drone-docker&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">username&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;docker_user&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">password&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;docker_pass&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">dockerfile&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Dockerfile&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">repo&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;registry-vpc.cn-shanghai.aliyuncs.com/guoxudong/test&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">registry&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;registry-vpc.cn-shanghai.aliyuncs.com&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tags&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;${DRONE_BUILD_NUMBER}&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Maven编译&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Kubernetes 部署&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/kubectl&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">config&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;deploy/overlays/uat&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">300&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">check&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;构建镜像&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;前端构建&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/node-drone&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;npm install&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;npm run build&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;clone&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;前端上传&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/node-drone&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;do something&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;前端构建&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;Kubernetes 部署&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;钉钉通知&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;guoxudongdocker/drone-dingtalk&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">token&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;dingding&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;markdown&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">message_color&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">message_pic&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">sha_link&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;前端上传&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;Kubernetes 部署&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">when&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">status&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;failure&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;success&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多子项目构建">多子项目构建&lt;/h2>
&lt;p>在使用 drone 中遇到的最大问题就是，我们有很多项目都是在一个 repo 中有很多子项目，而每个子项目都是 k8s 中的一个服务，这时一个 &lt;code>.drone.yml&lt;/code> 文件很难把所有的服务都囊括。而又不想每个子项目拉一个分支管理，当前的模式就很不合适。&lt;/p>
&lt;h3 id="插件开发">插件开发&lt;/h3>
&lt;p>针对这个问题，我们对 drone 进行了定制化开发，会在每次提交代码后，对新提交的代码和老代码进行比较，筛选出做了修改的子项目，然后对有修改的子项目尽心 CI ，其余的子项目则不进行发布。&lt;/p>
&lt;p>而以上的方式仅适用于测试环境的快速迭代，生产环境则采用 tag 的模式，针对不同的子项目，打不同前缀的 tag ，比如子项目为 test1 ，则打 &lt;code>test1-v0.0.1&lt;/code> 的 tag，就会对该子项目进行生产发布。&lt;/p>
&lt;h3 id="构建效果">构建效果&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>有修改的子项目&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gkr5icm3onj21o016e4ij.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无修改的子项目&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gkr5j5olenj21o014inf9.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-发布状态检查">Kubernetes 发布状态检查&lt;/h2>
&lt;p>之前的 Kubernetes 发布只是将服务发布到 Kubernetes 集群，并不管服务是否正常启动。针对这个问题以及我们的 Kubernetes 应用管理模式，我们开发了 drone 的 Kubernetes 发布插件，该插件包括 &lt;code>kubectl&lt;/code> 、&lt;code>kustomize&lt;/code>、&lt;code>kubedog&lt;/code> ，来完善我们的 Kubernetes 发布 step 。&lt;/p>
&lt;blockquote>
&lt;p>.drone.yml&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Kubernetes 部署&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/kubectl&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/root/.kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">check&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 该参数为是否开启子模块检查&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">config&lt;/span>:&lt;span style="color:#666"> &lt;/span>deploy/overlays/uat &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 这里使用 kustomize ,详细使用方法请见 https://github.com/kubernetes-sigs/kustomize&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">300&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># kubedog 的检测超时&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>{your-deployment-name}&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 如果开启子模块检查则需要填入子模块名称&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/tmp/cache/.kube &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># kubeconfig 挂载位置&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">trigger&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">branch&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- master &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 触发 CI 的分支&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用该插件会如果为测试构建，则会自动设置 docker 镜像 tag 为 &lt;code>DRONE_BUILD_NUMBER&lt;/code> ；如果为生产构建（git tag），则叫自动设置 docker 镜像 tag 为 &lt;code>DRONE_TAG&lt;/code> ，然后通过 &lt;code>kubectl apply -k .&lt;/code> 进行部署，同时使用 &lt;code>kubedog&lt;/code> 进行部署状态检查，如果服务正常启动则该 step 通过，如果超时或者部署报错则该 step 失败。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>根据我们目前的开发模式，对 drone 插件进行了全方位的开发。由于 dockerhub 的镜像拉取经常超时，则将镜像推送到了我们自己的镜像仓库；对钉钉通知也进行了优化；同时也根据我们目前的开发语言进行了插件的开发，提供了基于 Java 、Python 以及 Node.js 的 drone 插件，基本可以满足我们现在的 CI 需求，但随着 drone 的深入使用，越来越多的问题将会暴露出来。后续将会不断解决遇到的问题，持续优化。&lt;/p></description></item><item><title>Post: 由一封邮件看 Mailing List 在开源项目中的重要性</title><link>https://guoxudong.io/post/kubernetes-client-python/</link><pubDate>Thu, 04 Jul 2019 09:16:41 +0800</pubDate><guid>https://guoxudong.io/post/kubernetes-client-python/</guid><description>
&lt;blockquote>
&lt;p>只要仔细找，想要的轮子总会有的。
&amp;mdash; 某不知名 DevOps 工程师&lt;/p>
&lt;/blockquote>
&lt;p>感谢 &lt;code>kubernetes-dev&lt;/code> 的 Mailing List ！早上在浏览邮件时发现了下面这封有趣的邮件：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4nkmrb8scj21780q0afv.jpg" alt="image">&lt;/p>
&lt;p>接触 Kubernetes 也有不短的时间了，也见证了 Kubernetes 干掉 Swarm 和 Mesos 成为容器编排领域的事实标准的过程。在享受 Kubernetes 及其生态圈带来的便利的同时也在为 Kubernetes 及 CNCF 项目进行贡献。而使用 &lt;a href="https://github.com/kubernetes/kubectl">&lt;code>kubectl&lt;/code>&lt;/a>、&lt;a href="https://github.com/rancher/rancher">&lt;code>rancher&lt;/code>&lt;/a> 甚至是 &lt;a href="https://github.com/IBM/kui">&lt;code>kui&lt;/code>&lt;/a> 这些 CLI 和 UI 工具对 Kubernetes 集群进行操作和观察。&lt;/p>
&lt;p>虽然上面这些工具为操作 Kubernetes 集群带来了极大的便利，但是归根到底还是一些开源项目，并不能满足我们的全部需求。所以我们只能根据我们自己的需求和 Kubernetes 的 api-server 进行定制，但是由于 Kubernetes 的 api-server 比较复杂，短时间内并不是那么好梳理的。&lt;/p>
&lt;h2 id="kubernetes-clientpython">kubernetes-client/python&lt;/h2>
&lt;p>由于我们自研的 DevOps 平台是使用 python 开发的，所以我也基于 python 语言开发了一套 Kubernetes Client ，但总的来说由于 Kubernetes 的功能实在太多，而我的开发实践并不是很多，开发出来的功能只是差强人意。&lt;/p>
&lt;p>而 &lt;a href="https://github.com/kubernetes-client/python">&lt;code>kubernetes-client/python&lt;/code>&lt;/a> 这个官方给出的轮子是真的香！&lt;/p>
&lt;h3 id="安装方便">安装方便&lt;/h3>
&lt;p>这个安装方式简单的令人发指，支持的 python 版本为 &lt;code>2.7 | 3.4 | 3.5 | 3.6 | 3.7&lt;/code> 并且和所有 python 依赖包一样，只需要使用 &lt;code>pip&lt;/code> 安装即可：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install kubernetes
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="简单示例">简单示例&lt;/h3>
&lt;p>查看所有的 pod ：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#999;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;span style="color:#999;font-style:italic">#encoding: utf-8&lt;/span>
&lt;span style="color:#999;font-style:italic">#Author: guoxudong&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">from&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">kubernetes&lt;/span> &lt;span style="color:#6ab825;font-weight:bold">import&lt;/span> client, config
&lt;span style="color:#999;font-style:italic"># Configs can be set in Configuration class directly or using helper utility&lt;/span>
config.load_kube_config()
v1 = client.CoreV1Api()
&lt;span style="color:#6ab825;font-weight:bold">print&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;Listing pods with their IPs:&amp;#34;&lt;/span>)
ret = v1.list_pod_for_all_namespaces(watch=False)
&lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> i &lt;span style="color:#6ab825;font-weight:bold">in&lt;/span> ret.items:
&lt;span style="color:#6ab825;font-weight:bold">print&lt;/span>(&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">%s&lt;/span>&lt;span style="color:#ed9d13">\t&lt;/span>&lt;span style="color:#ed9d13">%s&lt;/span>&lt;span style="color:#ed9d13">\t&lt;/span>&lt;span style="color:#ed9d13">%s&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span> % (i.status.pod_ip, i.metadata.namespace, i.metadata.name))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行查看结果：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">Listing pods &lt;span style="color:#6ab825;font-weight:bold">with&lt;/span> their IPs:
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">1.126&lt;/span> kube-system coredns-&lt;span style="color:#3677a9">5975&lt;/span>fdf55b-bqgkx
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">0.2&lt;/span> kube-system coredns-&lt;span style="color:#3677a9">5975&lt;/span>fdf55b-vxbb4
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.13&lt;/span> kube-system flexvolume-&lt;span style="color:#3677a9">9&lt;/span>ccf7
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.15&lt;/span> kube-system flexvolume-h5xn2
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.14&lt;/span> kube-system flexvolume-kvn5x
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.17&lt;/span> kube-system flexvolume-mf4zv
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.14&lt;/span> kube-system kube-proxy-worker-&lt;span style="color:#3677a9">7&lt;/span>lpfz
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.15&lt;/span> kube-system kube-proxy-worker-&lt;span style="color:#3677a9">9&lt;/span>wd9s
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.17&lt;/span> kube-system kube-proxy-worker-phbbj
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.13&lt;/span> kube-system kube-proxy-worker-pst5d
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">1.9&lt;/span> kube-system metrics-server-&lt;span style="color:#3677a9">78&lt;/span>b597d5bf-wdvqh
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">1.12&lt;/span> kube-system nginx-ingress-controller-&lt;span style="color:#3677a9">796&lt;/span>ccc5d76-&lt;span style="color:#3677a9">9j&lt;/span>h5s
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">1.125&lt;/span> kube-system nginx-ingress-controller-&lt;span style="color:#3677a9">796&lt;/span>ccc5d76-jwwwz
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.17&lt;/span> kube-system terway-&lt;span style="color:#3677a9">6&lt;/span>mfs8
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.14&lt;/span> kube-system terway-fz9ck
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.13&lt;/span> kube-system terway-t9777
&lt;span style="color:#3677a9">10.16&lt;/span>.&lt;span style="color:#3677a9">16.15&lt;/span> kube-system terway-xbxlp
&lt;span style="color:#3677a9">172.22&lt;/span>.&lt;span style="color:#3677a9">1.8&lt;/span> kube-system tiller-deploy-&lt;span style="color:#3677a9">5&lt;/span>b5d8dd754-wpcrc
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>果然是一个好轮子，引入 kubeconfig 的方式及展示所有 namespace 的 pod 的方法封装的也十分简洁，是个非常漂亮的范例。建议可以看一下&lt;a href="https://github.com/kubernetes-client/python">源码&lt;/a>，肯定会有收获的！&lt;/p>
&lt;h3 id="支持版本">支持版本&lt;/h3>
&lt;p>&lt;code>client-python&lt;/code> 遵循 &lt;a href="https://semver.org/lang/zh-CN/">semver&lt;/a> 规范，所以在 &lt;code>client-python&lt;/code> 的主要版本增加之前，代码将继续使用明确支持的 Kubernetes 集群版本。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Kubernetes 1.5&lt;/th>
&lt;th>Kubernetes 1.6&lt;/th>
&lt;th>Kubernetes 1.7&lt;/th>
&lt;th>Kubernetes 1.8&lt;/th>
&lt;th>Kubernetes 1.9&lt;/th>
&lt;th>Kubernetes 1.10&lt;/th>
&lt;th>Kubernetes 1.11&lt;/th>
&lt;th>Kubernetes 1.12&lt;/th>
&lt;th>Kubernetes 1.13&lt;/th>
&lt;th>Kubernetes 1.14&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>client-python 1.0&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 2.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 3.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 4.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 5.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 6.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 7.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 8.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 9.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python 10.0&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client-python HEAD&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>+&lt;/td>
&lt;td>✓&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mailing-list-的重要性">Mailing List 的重要性&lt;/h2>
&lt;p>这次的收获很大程度得益于 &lt;code>kubernetes-dev&lt;/code> 的 Mailing List 也就是邮件列表。这种沟通方式在国内不是很流行，大家更喜欢使用 QQ 和微信这样的即时通讯软件进行交流，但是大多数著名开源项目都是主要使用 &lt;strong>Mailing List&lt;/strong> 进行交流，交流的数量甚至比在 GitHub issue 中还多，在与 Apache 、 CNCF 项目开源的贡献者和维护者交流中得知了使用 &lt;strong>Mailing List&lt;/strong> 主要考虑是一下几点：&lt;/p>
&lt;ul>
&lt;li>这种异步的交流方式可以让更多关心该话题的开发人员一起加入到讨论中。&lt;/li>
&lt;li>mailing list 是永久保留的，如果你对某个话题感兴趣，可以随时回复邮件，关注这个话题的开发者都会收到邮件，无论这个话题是昨天提出的，还是去年提出的，有助于解决一些陈年老 BUG （俗称技术债）。&lt;/li>
&lt;li>即时通讯软件虽然很便利，但是问题很快会被评论顶掉，虽然诸如 slack 这样的工具解决了部分这方面的问题，但是还是不如 mailing list 好用。&lt;/li>
&lt;li>并不是所有地区的开发者都有高速的宽带，性能优秀的PC，在地球上很多地区还是只能使用拨号上网，网速只有几kb/s，他们甚至 GitHub issue 都无法使用。但是你不能剥夺他们参与开源项目的权利，而 mailing list 是一种很好的交流方式。&lt;/li>
&lt;li>通过 mailing list 可以很好掌握社区动态，效果明显好于 GitHub watch ，因为并不是项目的所有 commit 都是你关心的。&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>如果你有志于参与到开源运动，在享受开源软件带来便利的同事，还想为开源软件做出自己的贡献，那么 mailing list 是你进入社区最好的选择。在 mailing list 中和来自世界各地志同道合的开发者交流中提升自己的能力，创造更大的价值，迈出你参与开源运动的第一步。&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（五）：配合 kubedog 完善 CI/CD 的最后一步</title><link>https://guoxudong.io/post/kustomize-5/</link><pubDate>Wed, 03 Jul 2019 15:20:31 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-5/</guid><description>
&lt;blockquote>
&lt;p>在以往的 pipeline 中，使用 kubectl 进行部署 Deployment 后无法检查 Deployment 是否部署成功，只能通过使用命令/脚本来手动检查 Deployment 状态，而 kubedog 这个小工具完美解决了这个问题，完善了 CI/CD 流水线的最后一步。&lt;/p>
&lt;/blockquote>
&lt;h2 id="kubedog">KubeDog&lt;/h2>
&lt;p>kubedog 是一个 lib 库和 CLI 小工具，允许在 CI/CD 部署 pipeline 中观察和跟踪 Kubernetes 资源。与 kustomize 配合，集成到 pipeline 之后，完美的解决了 CI/CD 的最后一步，完美的替代了之前不够灵活的脚本（好吧，其实我也开发了类似的小工具，但是有这么好用的轮子，拿来直接用何乐而不为呢？）。&lt;/p>
&lt;p>kubedog 提供了 lib 库和 CLI 小工具，这里由于是介绍 CI/CD 中的实践，所以只介绍其中的 &lt;code>rollout track&lt;/code> 功能。 lib 库的使用和 CLI 的 &lt;code>follow&lt;/code> 功能这里就不做介绍了，有兴趣的同学可以去 &lt;a href="https://github.com/flant/kubedog">GitHub&lt;/a> 上查看该项目的各种使用方式。&lt;/p>
&lt;h3 id="集成-kubedog">集成 KubeDog&lt;/h3>
&lt;p>由于我司目前使用的是 &lt;a href="https://drone.io/">drone&lt;/a> 进行 CI ，每个 step 都是由一个 docker 制作的插件组成。我制作了一个包含 &lt;code>kubectl&lt;/code> 、 &lt;code>kustomize&lt;/code> 和 &lt;code>kubedog&lt;/code> 的镜像。该镜像已上传 dockerhub ，需要的可以自行拉取使用 &lt;code>guoxudongdocker/kubectl&lt;/code> ,而该插件的使用也在 &lt;a href="https://github.com/sunny0826/kubectl-kustomize">GitHub&lt;/a> 和 &lt;a href="https://cloud.docker.com/u/guoxudongdocker/repository/docker/guoxudongdocker/kubectl">DockerHub&lt;/a> 上查看。&lt;/p>
&lt;p>而集成方式也比较简单，直接将 &lt;code>kubectl&lt;/code> 、 &lt;code>kustomize&lt;/code> 和 &lt;code>kubedog&lt;/code> 的可执行包下载到 &lt;code>/usr/local/bin&lt;/code> 并赋予执行权限即可，下面就是 &lt;code>Dockerfile&lt;/code> 文件：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> alpine&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">LABEL&lt;/span> &lt;span style="color:#40ffff">maintainer&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;sunnydog0826@gmail.com&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENV&lt;/span> &lt;span style="color:#40ffff">KUBE_LATEST_VERSION&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;v1.14.1&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> apk add --update ca-certificates &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add --update -t deps curl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://storage.googleapis.com/kubernetes-release/release/&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">KUBE_LATEST_VERSION&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubectl &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64 -o /usr/local/bin/kustomize &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kustomize &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; curl -L https://dl.bintray.com/flant/kubedog/v0.2.0/kubedog-linux-amd64-v0.2.0 -o /usr/local/bin/kubedog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; chmod +x /usr/local/bin/kubedog &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk del --purge deps &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; rm /var/cache/apk/*&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /root&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;kubectl&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;help&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kustomize-配合-kubedog-使用">Kustomize 配合 KubeDog 使用&lt;/h2>
&lt;p>在镜像构建好之后就可以直接使用了，这里使用的是 DockerHub 的镜像仓库，这里建议将镜像同步到私有仓库，比如阿里云的容器镜像服务或者 Habor ，因为国内拉取 DockerHub 的镜像不太稳定，经常会拉取镜像失败或者访问超时，在 CI/CD 流水线中推荐使用更稳定镜像。&lt;/p>
&lt;p>以下是 &lt;code>.drone.yml&lt;/code> 示例：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>pipeline&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>{your-pipeline-name}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Kubernetes 部署&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/kubectl&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/root/.kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- cd deploy/overlays/dev &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 这里使用 kustomize ,详细使用方法请见 https://github.com/kubernetes-sigs/kustomize&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- kustomize edit set image {your-docker-registry}:${DRONE_BUILD_NUMBER}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- kubectl apply -k . &amp;amp;&amp;amp; kubedog rollout track deployment {your-deployment-name} -n {your-namespace} -t {your-tomeout}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/tmp/cache/.kube &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># kubeconfig 挂载位置&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">trigger&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">branch&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- master &lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 触发 CI 的分支&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的配置可见，在该 step 中执行了如下几步：&lt;/p>
&lt;ol>
&lt;li>进入 patch 所在路径&lt;/li>
&lt;li>使用了 Kustomize 命令 &lt;code>kustomize edit set image {your-docker-registry}:${DRONE_BUILD_NUMBER}&lt;/code> 方式将前面 step 中构建好的镜像的 tag 插入到 patch 中&lt;/li>
&lt;li>使用 &lt;code>kubectl apply -k .&lt;/code> 进行 k8s 部署，要注意最后的那个 &lt;code>.&lt;/code>&lt;/li>
&lt;li>使用 kubedog 跟踪 Deployment 部署状态&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>命令解析：&lt;code>kubedog rollout track deployment {your-deployment-name} -n {your-namespace} -t {your-tomeout}&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>deployment {your-deployment-name} : Deployment 的名称&lt;/li>
&lt;li>-n {your-namespace} : Deployment 所在的 namespace&lt;/li>
&lt;li>-t {your-tomeout} : 超时时间，单位为秒，超时后会报错，这里请根据实际部署情况进行设置&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>从 Kubernetes release v1.14 版本开始，&lt;code>kustomize&lt;/code> 集成到 &lt;code>kubectl&lt;/code> 中，越来越多 k8S 周边的小工具出现。这些小工具的出现帮助了 Kubernetes 的使用者来拉平 Kubernetes 的使用曲线，同时也标志着 K8S 的成熟，越来越多的开发人员基于使用 K8S 的痛点开发相关工具。套用一句今年 KubeCon 的 Keynote 演讲上，阿里云智能容器平台负责人丁宇的话： &lt;strong>Kubernetes 正当时，云原生未来可期&lt;/strong> 。&lt;/p></description></item><item><title>Post: 记一次使用 Kustomize 时遇到的愚蠢问题</title><link>https://guoxudong.io/post/kustomize-err-1/</link><pubDate>Wed, 03 Jul 2019 13:44:50 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-err-1/</guid><description>
&lt;h2 id="现象">现象&lt;/h2>
&lt;p>在日常 CI/CD 流程中，已经将 Kustomize 集成到 pipeline 中使用，但是在对一个项目进行 Kustomize 改造时，将单个 &lt;code>deploy.yaml&lt;/code> 拆分为了若干个 patch 以达到灵活 Kubernetes 部署的目的。但是在使用 &lt;code>kubectl apply -k .&lt;/code> 命令进行部署的时候遇到了 &lt;code>error: failed to find an object with apps_v1_Deployment|myapp to apply the patch&lt;/code> 的报错。&lt;/p>
&lt;p>&lt;img src="http://tva2.sinaimg.cn/large/ad5fbf65gy1g4mm1m3vx9j21oe10y102.jpg" alt="image">&lt;/p>
&lt;h2 id="解决之路">解决之路&lt;/h2>
&lt;p>由于之前的使用中没有遇到此类报错，看报错信息像是 &lt;code>apiVersion&lt;/code> 的问题，所以先检查了所有 patch 的 &lt;code>apiVersion&lt;/code> ，但是并没有找到有什么问题。&lt;/p>
&lt;h3 id="google-搜索">Google 搜索&lt;/h3>
&lt;p>对该报错进行了搜索，搜索到如下结果：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g4mmee8ctxj21900ns44c.jpg" alt="image">
&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g4mmgrdz0fj21ou1b6wro.jpg" alt="image">&lt;/p>
&lt;p>？？？ 为何这个 issue 没有解决就被提出者关闭了？&lt;/p>
&lt;h3 id="问题解决">问题解决&lt;/h3>
&lt;p>在 Google 了一圈之后还是没有找到什么有营养的回答，问题又回到了原点&amp;hellip;只能对所有的 patch 的每个字符和每个配置逐一进行了检查。结果发现是 &lt;code>name&lt;/code> 的内容 base 与 overlays 不同&amp;hellip; base 中是 &lt;code>name:myapp&lt;/code> ，而 overlays 中是 &lt;code>name:my-app&lt;/code> &amp;hellip;&lt;/p>
&lt;p>好吧，issue 关的是有道理的&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g4mmuqm6n2j2098048a9z.jpg" alt="">&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（四）：简述核心配置 kustomization.yaml</title><link>https://guoxudong.io/post/kustomize-4/</link><pubDate>Thu, 23 May 2019 12:50:12 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-4/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在前面的文章中已经介绍了 kustomize 是什么，以及如何开始使用和如何简单的在 CI/CD 中使用，本篇文章将会介绍 kustomize 的核心文件 &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/zh/kustomization.yaml">kustomization.yaml&lt;/a>。&lt;/p>
&lt;p>另外，博主已经向 kustomize 贡献了中文文档，已被官方采纳，现在在 kustomize 中的 &lt;a href="https://github.com/kubernetes-sigs/kustomize/tree/master/docs/zh">&lt;code>docs/zh&lt;/code>&lt;/a> 目录中就可看到，翻译的不好的地方欢迎指正。同时也在 GitHub 上新建了一个 名为 &lt;a href="https://github.com/sunny0826/kustomize-lab">kustomize-lab&lt;/a> 的 repo 用于演示 kustomize 的各种用法及技巧，本文中介绍的内容也会同步更新到该 repo 中，欢迎 fork、star、PR。&lt;/p>
&lt;h2 id="kustomizationyaml-的作用">&lt;code>kustomization.yaml&lt;/code> 的作用&lt;/h2>
&lt;blockquote>
&lt;p>Kustomize 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。&lt;/p>
&lt;/blockquote>
&lt;p>有前面的文章&lt;a href="../kustomize-2">《使用 Kustomize 帮你管理 kubernetes 应用（二）： Kustomize 的使用方法》&lt;/a>中已经介绍了，每个 &lt;code>base&lt;/code> 或 &lt;code>overlays&lt;/code> 中都必须要有一个 &lt;code>kustomization.yaml&lt;/code>，这里我们看一下官方示例 &lt;code>helloWorld&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- configMap.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到该项目中包含3个 resources ， &lt;code>deployment.yaml&lt;/code>、&lt;code>service.yaml&lt;/code> 、 &lt;code>configMap.yaml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
└── helloWorld
├── configMap.yaml
├── deployment.yaml
├── kustomization.yaml
└── service.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>直接执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build helloWorld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>就可以看到结果了：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">data&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">altGreeting&lt;/span>:&lt;span style="color:#666"> &lt;/span>Good Morning!&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">enableRisky&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ConfigMap&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8666&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">protocol&lt;/span>:&lt;span style="color:#666"> &lt;/span>TCP&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8080&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deployment&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>LoadBalancer&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">3&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deployment&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- --port=8080&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- --enableRiskyFeature=$(ENABLE_RISKY)&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ALT_GREETING&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMapKeyRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>altGreeting&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ENABLE_RISKY&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMapKeyRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>enableRisky&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-map&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>monopole/hello:1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-container&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">8080&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的结果可以看大 kustomize 通过 &lt;code>kustomization.yaml&lt;/code> 将3个 resources 进行了处理，给三个 resources 添加了共同的 labels &lt;code>app: hello&lt;/code> 。这个示例展示了 &lt;code>kustomization.yaml&lt;/code> 的作用：&lt;strong>将不同的 resources 进行整合，同时为他们加上相同的配置&lt;/strong>。&lt;/p>
&lt;h2 id="进阶使用">进阶使用&lt;/h2>
&lt;p>上面只不过是一个简单的示例，下面将结合实际情况分享一些比较实用的用法&lt;/p>
&lt;h3 id="根据环境生成不同配置">根据环境生成不同配置&lt;/h3>
&lt;p>在实际的使用中，使用最多的就是为不同的环境配置不同的 &lt;code>deploy.yaml&lt;/code>，而使用 kustomize 可以把配置拆分为多个小的 patch ，然后通过 kustomize 来进行组合。而根据环境的不同，每个 patch 都可能不同，包括分配的资源、访问的方式、部署的节点都可以自由的定制。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
├── flask-env
│ ├── README.md
│ ├── base
│ │ ├── deployment.yaml
│ │ ├── kustomization.yaml
│ │ └── service.yaml
│ └── overlays
│ ├── dev
│ │ ├── healthcheck_patch.yaml
│ │ ├── kustomization.yaml
│ │ └── memorylimit_patch.yaml
│ └── prod
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里可以看到配置分为了 &lt;code>base&lt;/code> 和 &lt;code>overlays&lt;/code>， &lt;code>overlays&lt;/code> 则是继承了 &lt;code>base&lt;/code> 的配置，同时添加了诸如 healthcheck 和 memorylimit 等不同的配置，那么我们分别看一下 &lt;code>base&lt;/code> 和 &lt;code>overlays&lt;/code> 中 &lt;code>kustomization.yaml&lt;/code> 的内容&lt;/p>
&lt;ul>
&lt;li>base&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>base&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code> 中定义了一些基础配置&lt;/p>
&lt;ul>
&lt;li>overlays&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">bases&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- ../../base&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">patchesStrategicMerge&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- healthcheck_patch.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- memorylimit_patch.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>overlays&lt;/code> 中的 &lt;code>kustomization.yaml&lt;/code> 则是基于 &lt;code>base&lt;/code> 新增了一些个性化的配置，来达到生成不同环境的目的。&lt;/p>
&lt;p>执行命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build flask-env/overlays/dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Service&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ports&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>http&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterIP&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>devops-dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">selector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">version&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">0.0.3&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>ENV&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">value&lt;/span>:&lt;span style="color:#666"> &lt;/span>dev&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/flask-python:latest&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#666"> &lt;/span>Always&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">livenessProbe&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">httpGet&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initialDelaySeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">periodSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">successThreshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeoutSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">20&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>test-cicd&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">readinessProbe&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">httpGet&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initialDelaySeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">periodSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">successThreshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeoutSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">20&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">limits&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#666"> &lt;/span>300m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">memory&lt;/span>:&lt;span style="color:#666"> &lt;/span>500Mi&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">requests&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#666"> &lt;/span>300m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">memory&lt;/span>:&lt;span style="color:#666"> &lt;/span>500Mi&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/localtime&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>host-time&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">imagePullSecrets&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>registry-pull-secret&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/localtime&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>host-time&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到包括 &lt;code>replicas&lt;/code>、&lt;code>limits&lt;/code>、&lt;code>requests&lt;/code>、&lt;code>env&lt;/code> 等 dev 中个性的配置都已经出现在了生成的 yaml 中。由于篇幅有限，这里没有把所有的配置有罗列出来，需要的可以去 &lt;a href="https://github.com/sunny0826/kustomize-lab">GitHub&lt;/a> 上自取。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>上面所有的 &lt;code>kustomize build dir/&lt;/code> 都可以使用 &lt;code>kubectl apply -k dir/&lt;/code> 实现，但是需要 &lt;code>v14.0&lt;/code> 版以上的 &lt;code>kubectl&lt;/code>，也就是说，其实我们在集成到 CI/CD 中的时候，甚至都不需要用来 &lt;code>kustomize&lt;/code> 命令集，有 &lt;code>kubectl&lt;/code> 就够了。&lt;/p>
&lt;p>由于篇幅有限，这里没法吧所有 &lt;code>kustomization.yaml&lt;/code> 的用途都罗列出来，不过可以在官方文档中找到我提交的中文翻译版 &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/zh/kustomization.yaml">&lt;code>kustomization.yaml&lt;/code>&lt;/a>，可以直接去官方 GitHub 查看。同时 &lt;a href="https://github.com/sunny0826/kustomize-lab">kustomize-lab&lt;/a> 会持续更行，敬请关注。&lt;/p></description></item><item><title>Post: 轻量快速的 CI 工具 Drone</title><link>https://guoxudong.io/post/drone-ci/</link><pubDate>Tue, 21 May 2019 08:59:00 +0800</pubDate><guid>https://guoxudong.io/post/drone-ci/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>公司之前一直在使用 Jenkins 作为 CI/CD 工具， Jenkins 非常强大，它完成了几乎所有 CI/CD 的工作，并且应用于整个团队有好长一段时间了。但是随着公司推荐数字化、智慧化，以及服务容器化的推进， Jenkins 的一些弊端也凸显了出来：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>重量级：&lt;/strong> Jenkins 功能十分齐全，几乎可以做所有的事情。但是这也是他的一个弊端，过于重量级，有时候往往一个小的修改需要改动许多地方，升级\下载插件后需要进行重启等。&lt;/li>
&lt;li>&lt;strong>升级不易：&lt;/strong> 在一些安全 Jenkins 相关的安全漏洞被公开后，我们会对 Jenkins 进行升级，但这也不是一件容易的事。之前就出现过升级\重启后，所有 job 丢失，虽然我们所有项目配置都是以 Jenkinsfile 的形式统一存储，但是每个 job 都需要重新重新创建，包括每个 job 的权限&amp;hellip;.._(´ཀ`」 ∠)_&lt;/li>
&lt;li>&lt;strong>权限控制复杂：&lt;/strong> 这其实也是 Jenkins 的一大优势，可以精确控制每个用户的权限，但是需要花费更多时间去配置，时间长了也会出现权限混乱的问题。&lt;/li>
&lt;li>&lt;strong>UI 界面：&lt;/strong> 这个其实是吐槽最多的部分，虽然有诸如：Blue Ocean 这样的插件来展示 pipeline ，但是还是没有从根本改变它简陋的 UI 界面。&lt;/li>
&lt;/ul>
&lt;p>那么为什么选择使用 Drone 呢？&lt;/p>
&lt;p>其实在 GitHub 上提交 PR 后，大部分开源项目都会使用 &lt;a href="http://travis-ci.org/">travis-ci&lt;/a> 对提交的代码进行 CI 及检查，而如果是 Kubernetes 相关的项目，则会使用 &lt;a href="https://github.com/k8s-ci-robot">prow&lt;/a> 进行 CI。但是 &lt;a href="http://travis-ci.org/">travis-ci&lt;/a> 只能用于 GitHub ，在寻找类似项目的时候， Drone 进入了我的视野。&lt;/p>
&lt;p>大道至简。和 Jenkins 相比， Drone 就轻量的多了，从应用本身的安装部署到流水线的构建都简洁的多。由于是和源码管理系统相集成，所以 Drone 天生就省去了各种账户\权限的配置，直接与 gitlab 、 github 、 Bitbucket 这样的源码管理系统操作源代码的权限一致。正如它官网上写的那样：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Any Source Code Manager&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Drone integrates seamlessly with multiple source code management systems, including GitHub, GitHubEnterprise, Bitbucket, and GitLab.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Any Platform&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Drone natively supports multiple operating systems and architectures, including Linux x64, ARM, ARM64 and Windows x64.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Any Language&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Drone works with any language, database or service that runs inside a Docker container. Choose from thousands of public Docker images or provide your own.&lt;/p>
&lt;/blockquote>
&lt;p>Drone 天生支持任何源码管理工具、任何平台和任何语言。&lt;/p>
&lt;p>&lt;strong>而写这篇文章的目的，并不是要吹捧这个工具有多么的好用，而是要总结在搭建 drone 和使用时候需要的各种坑，帮助读者绕过这些坑。&lt;/strong>&lt;/p>
&lt;h2 id="声明">声明&lt;/h2>
&lt;p>鉴于在使用 Drone CI 中，遇到的各种坑都和 Drone 的版本有关，这里首先声明我使用的 Drone 版本为&lt;code>1.1&lt;/code>，使用&lt;code>0.8&lt;/code>版本的同学请绕道。&lt;/p>
&lt;h2 id="搭建-drone">搭建 Drone&lt;/h2>
&lt;p>这里要说的就是在使用 drone 中遇到的第一个坑，在最初正准备搭建 drone 的时候 Google 了很多相关的 blog ，大部分 blog （包括某些 &lt;a href="https://medium.com/">medium.com&lt;/a> 上面近期的英文 blog） 推荐的安装方式都是使用 &lt;code>docker-compose&lt;/code>，而无一例外的都失败了&amp;hellip;走投无路之下，我回到了&lt;a href="https://docs.drone.io/installation/">官网的文档&lt;/a>，发现&lt;code>1.0&lt;/code>之后许多参数都发生了变化，并且官方推荐使用 docker 的方式运行 Drone。&lt;/p>
&lt;p>&lt;strong>所以在使用任何开源软件之前都要去阅读它的文档，不要跟着一篇 blog 就开始了（包括我的），这样会少踩很多坑！！！&lt;/strong>&lt;/p>
&lt;p>这里以 gitlab 为例，展示网上版本启动参数和实际参数的不同：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>作用&lt;/th>
&lt;th>各种blog&lt;/th>
&lt;th>官网文档&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>设置 Drone 的管理员&lt;/td>
&lt;td>DRONE_ADMIN=admin&lt;/td>
&lt;td>DRONE_USER_CREATE=username:admin,admin:true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>设置GitLab的域名&lt;/td>
&lt;td>DRONE_GITLAB_URL&lt;/td>
&lt;td>DRONE_SERVER_HOST&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GitLab的Application中的key&lt;/td>
&lt;td>DRONE_GITLAB_CLIENT&lt;/td>
&lt;td>DRONE_GITLAB_CLIENT_ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GitLab的Application中的secret&lt;/td>
&lt;td>DRONE_GITLAB_SECRET&lt;/td>
&lt;td>DRONE_GITLAB_CLIENT_SECRET&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Drone 域名&lt;/td>
&lt;td>DRONE_HOST&lt;/td>
&lt;td>DRONE_GITLAB_SERVER&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上面只是列举了部分官方文档和网上流产版本的不同，所以在使用之前一定要仔细阅读官方文档。下附运行 drone 的命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker run &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --volume=/var/run/docker.sock:/var/run/docker.sock &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --volume=/var/lib/drone:/data &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --env=&lt;span style="color:#40ffff">DRONE_GIT_ALWAYS_AUTH&lt;/span>=&lt;span style="color:#24909d">false&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --env=&lt;span style="color:#40ffff">DRONE_GITLAB_SERVER&lt;/span>={your-gitlab-url} &lt;span style="color:#ed9d13">\ &lt;/span> &lt;span style="color:#999;font-style:italic"># gitlab 的 URL&lt;/span>
--env=&lt;span style="color:#40ffff">DRONE_GITLAB_CLIENT_ID&lt;/span>={your-gitlab-applications-id} &lt;span style="color:#ed9d13">\ &lt;/span> &lt;span style="color:#999;font-style:italic">#GitLab的Application中的id&lt;/span>
--env=&lt;span style="color:#40ffff">DRONE_GITLAB_CLIENT_SECRET&lt;/span>={your-gitlab-applicati-secret} &lt;span style="color:#ed9d13">\ &lt;/span>&lt;span style="color:#999;font-style:italic">#GitLab的Application中的secret&lt;/span>
--env=&lt;span style="color:#40ffff">DRONE_SERVER_HOST&lt;/span>={your-drone-url} &lt;span style="color:#ed9d13">\ &lt;/span> &lt;span style="color:#999;font-style:italic"># drone 的URl&lt;/span>
--env=&lt;span style="color:#40ffff">DRONE_SERVER_PROTO&lt;/span>=http &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --env=&lt;span style="color:#40ffff">DRONE_TLS_AUTOCERT&lt;/span>=&lt;span style="color:#24909d">false&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --env=&lt;span style="color:#40ffff">DRONE_USER_CREATE&lt;/span>=username:{your-admin-username},admin:true &lt;span style="color:#ed9d13">\ &lt;/span> &lt;span style="color:#999;font-style:italic"># Drone的管理员&lt;/span>
--publish=8000:80 &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --publish=443:443 &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --restart=always &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --detach=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> --name=drone &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> drone/drone:1.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>关于 &lt;code>gitlab Application&lt;/code> 的配置和 Drone 其他参数含义请参考&lt;a href="https://docs.drone.io/installation/gitlab/single-machine/">官方文档&lt;/a>，这里只展示单节点办的运行方式。&lt;/p>
&lt;h2 id="核心文件-droneyml">核心文件 &lt;code>.drone.yml&lt;/code>&lt;/h2>
&lt;p>要使用 Drone 只需在项目根创建一个 &lt;code>.drone.yml&lt;/code> 文件即可，这个是 Drone 构建脚本的配置文件，它随项目一块进行版本管理，开发者不需要额外再去维护一个配置脚本。其实现代 CI 程序都是这么做了，这个主要是相对于 Jekins 来说的。虽然 Jekins 也有插件支持，但毕竟还是需要配置。&lt;/p>
&lt;blockquote>
&lt;p>值得注意的事这个文件时 &lt;code>.drone.yml&lt;/code>，由于 Kubernetes 使用的多了，第一次创建了一个 &lt;code>.drone.yaml&lt;/code> 文件，导致怎么都获取不到配置&amp;hellip;_(´ཀ`」 ∠)_&amp;hellip; YAML 工程师石锤了&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>这里放一个 Java 的 .drone.yml ，这个项目是 fork 别人的项目用作演示，记得要修改 &lt;code>deployment.yaml&lt;/code> 中的镜像仓库地址修改为自己的私有仓库。&lt;/p>
&lt;p>示例项目源码：https://github.com/sunny0826/pipeline-example-maven&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-YAML" data-lang="YAML">&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>pipeline&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>pipeline-example-maven&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Maven编译&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>maven:3-jdk-7&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cache&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/root/.m2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- mvn clean install&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>构建镜像 &lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>plugins/docker&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>docker&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/var/run/docker.sock&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">username&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>docker_user&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">password&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>docker_pass&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">repo&lt;/span>:&lt;span style="color:#666"> &lt;/span>{your-repo}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">registry&lt;/span>:&lt;span style="color:#666"> &lt;/span>{your-registry}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tags&lt;/span>:&lt;span style="color:#666"> &lt;/span>${DRONE_BUILD_NUMBER}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Kubernetes 部署&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/kubectl:v1.14.1 &lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/root/.kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commands&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- sed -i &amp;#34;s/#Tag/${DRONE_BUILD_NUMBER}/g&amp;#34; deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- kubectl apply -f deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>钉钉通知&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>guoxudongdocker/drone-dingtalk &lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">settings&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">token&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">from_secret&lt;/span>:&lt;span style="color:#666"> &lt;/span>dingding&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>markdown&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">message_color&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">message_pic&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">sha_link&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">when&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">status&lt;/span>:&lt;span style="color:#666"> &lt;/span>[failure, success]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cache&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/tmp/cache/.m2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/tmp/cache/.kube/.test_kube&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>docker&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/var/run/docker.sock&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">trigger&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">branch&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- master&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的事：上面的这个 &lt;code>.drone.yml&lt;/code> 文件将本地的&lt;code>.m2&lt;/code>文件、kubeconfig文件、&lt;code>docker.sock&lt;/code> 文件挂载到 pipeline 中以实现 maven 打包缓存，k8s 部署、docker 缓存的作用，以提高 CI 速度。而是用挂载需要管理员在项目 settings 中勾选 &lt;code>Trusted&lt;/code> ，这个操作只能管理员进行，普通用户是看不到这个选项的。而管理员就是在docker运行时候 &lt;code>--env=DRONE_USER_CREATE=username:{your-admin-username},admin:true &lt;/code> 设置的。&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g38qvifxwij21d40tk76s.jpg" alt="WX20190521-104717@2x">&lt;/p>
&lt;p>而上传镜像和钉钉同时需要在 settings 设置中添加 secret&lt;/p>
&lt;ul>
&lt;li>docker_user：docker 仓库用户名&lt;/li>
&lt;li>docker_pass：docker 仓库密码&lt;/li>
&lt;li>dingding： 钉钉机器人 token&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意这里的钉钉 token 是 webhook 中 &lt;code>https://oapi.dingtalk.com/robot/send?access_token=&lt;/code> 后这部分
&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65gy1g38r1mkoztj20iy0ezgmg.jpg" alt="WX20190521-105337">&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g38qxizsg1j21ia0tujtb.jpg" alt="WX20190521-104942@2x">&lt;/p>
&lt;h2 id="构建结果">构建结果&lt;/h2>
&lt;p>添加 &lt;code>.drone.yml&lt;/code> 文件后，向 master 分支提交代码即可出发 CI 构建&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g38r68yb8pj21l40sawit.jpg" alt="WX20190521-105809@2x">&lt;/p>
&lt;p>CI 结束后，会在钉钉机器人所在群收到通知&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g38r8cttcrj20e90bzacr.jpg" alt="WX20190521-110009">&lt;/p>
&lt;h2 id="插件支持">插件支持&lt;/h2>
&lt;p>可以看到，每一步的镜像都是一个镜像，上面 pipeline 中的 Kubernetes 及钉钉通知插件就是我开发的，具体开发方法可以参考&lt;a href="https://docs.drone.io/">官方文档&lt;/a>，而官方也提供了许多&lt;a href="http://plugins.drone.io/">官方插件&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>构建后部署：&lt;a href="http://plugins.drone.io/mactynow/drone-kubernetes/">Kubernetes&lt;/a>、&lt;a href="http://plugins.drone.io/ipedrazas/drone-helm/">helm&lt;/a>、&lt;a href="http://plugins.drone.io/appleboy/drone-scp/">scp&lt;/a>&lt;/li>
&lt;li>构建后通知：&lt;a href="http://plugins.drone.io/lddsb/drone-dingtalk-message/">钉钉&lt;/a> 、&lt;a href="http://plugins.drone.io/drillster/drone-email/">Email&lt;/a>、&lt;a href="http://plugins.drone.io/drone-plugins/drone-slack/">Slack&lt;/a>、&lt;a href="http://plugins.drone.io/lizheming/drone-wechat/">微信&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>Drone 整体用起来还是很方便的，搭建、上手速度都很快，但是官方文档给的不够详实，而网上充斥着各种各样0.8版本的的实例，但是其实官网早就发布了1.0版本，而官方并没有 &lt;code>example&lt;/code> 这样的示例项目，这样就又把本来降下来的学习曲线拉高了。许多坑都需要自己去趟，我在测试 drone 的时候，就构构建了上百次，不停的修改 &lt;code>.drone.yml&lt;/code> ， commit 信息看起来是很恐怖的。后续抽空会向官方贡献 &lt;code>example&lt;/code> 这样的 PR。&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（三）：将 Kustomize 应用于 CI/CD</title><link>https://guoxudong.io/post/kustomize-3/</link><pubDate>Mon, 06 May 2019 16:46:28 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-3/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先明确软件版本，我这里使用的是 &lt;code>Jenkins ver. 2.121.3&lt;/code> ，这个版本比较老，其上安装 Kubernetes 插件所使用 &lt;code>kubectl&lt;/code> 版本也比较老，&lt;strong>无法使用&lt;/strong> Kustomize 的 yaml 文件需要的 &lt;code>apiVersion: apps/v1&lt;/code> ，直接使用生成 &lt;code>deploy.yaml&lt;/code> 文件会报错，所以这里选择了自己构建一个包含 &lt;code>kubectl&lt;/code> 和 &lt;code>kustomize&lt;/code> 的镜像，在镜像中使用 Kustomize 生成所需 yaml 文件并在 Kubernetes 上部署。&lt;/p>
&lt;h2 id="软件版本">软件版本&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>软件&lt;/th>
&lt;th>版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Jenkins&lt;/td>
&lt;td>&lt;a href="https://jenkins.io/">2.121.3&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kubectl&lt;/td>
&lt;td>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">v1.14.1&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kustomize&lt;/td>
&lt;td>&lt;a href="https://github.com/kubernetes-sigs/kustomize/releases">v2.0.3&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="前期准备">前期准备&lt;/h2>
&lt;ul>
&lt;li>Jenkins ：本篇使用 Jenkins 演示 CI/CD ，安装 Jenkins 就不在赘述，可以使用多种方法安装 Jenkins ，详细方法见&lt;a href="https://jenkins.io">官网&lt;/a>。同时。 CI/CD 的工具有很多，这里为了省事使用笔者现有的 Jenkins 进行演示，&lt;strong>不推荐&lt;/strong>使用同笔者一样的版本，请使用较新的版本；同时也可以使用其他 CI/CD 工具，这里推荐使用 &lt;a href="https://drone.io/">drone&lt;/a>。如果有更好的方案，欢迎交流，可以在&lt;a href="https://blog.maoxianplay.com/contact/">关于&lt;/a>中找到我的联系方式。&lt;/li>
&lt;li>&lt;code>kubectl&lt;/code> &amp;amp; &lt;code>kustomize&lt;/code> ：上文中提到了由于 Jenkins 版本比较老，所以这里笔者自己制作了包含二者的 docker 镜像，已上传 dockerhub ，需要自取： &lt;a href="https://hub.docker.com/r/guoxudongdocker/kubectl">&lt;code>guoxudongdocker/kubectl&lt;/code>&lt;/a>&lt;/li>
&lt;li>Web 应用：这里使用 flask 写了一个简单的 web 应用，用于演示，同样以上传 dockerhub &lt;a href="https://hub.docker.com/r/guoxudongdocker/flask-python">&lt;code>guoxudongdocker/flask-python&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;p>首先看一下目录结构，目录中包括 &lt;code>Dockerfile&lt;/code> 、 &lt;code>Jenkinsfile&lt;/code> 、 Kustomize 要使用的 &lt;code>deploy&lt;/code> 目录以及 web 应用目录。&lt;/p>
&lt;pre>&lt;code class="language-bush" data-lang="bush">.
├── Dockerfile
├── Jenkinsfile
├── app
│ ├── main.py
│ └── uwsgi.ini
└── deploy
├── base
│ ├── deployment.yaml
│ ├── kustomization.yaml
│ └── service.yaml
└── overlays
├── dev
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
└── prod
├── healthcheck_patch.yaml
├── kustomization.yaml
└── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;p>这里可以看到 overlays 总共有两个子目录 &lt;code>dev&lt;/code> 和 &lt;code>prod&lt;/code> ，分别代表不同环境，在不同的环境中，应用不同的配置。&lt;/p>
&lt;h2 id="jenkins-配置">Jenkins 配置&lt;/h2>
&lt;p>Jenkins 的配置相对简单，只需要新建一个 pipeline 类型的 job&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2rr57oixbj20tn0ogq6v.jpg" alt="WX20190506-180159">&lt;/p>
&lt;p>增加参数化构建，&lt;strong>注&lt;/strong>：参数化构建需要安装 Jenkins 插件&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g2rrcb5ic9j21470q7mz8.jpg" alt="WX20190506-180918">&lt;/p>
&lt;p>然后配置代码仓库即可&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g2sij1xlb2j214w0nw0uw.jpg" alt="WX20190507-094958">&lt;/p>
&lt;h2 id="pipeline">Pipeline&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">podTemplate(label: &lt;span style="color:#ed9d13">&amp;#39;jnlp-slave&amp;#39;&lt;/span>, cloud: &lt;span style="color:#ed9d13">&amp;#39;kubernetes&amp;#39;&lt;/span>,
containers: [
containerTemplate(
name: &lt;span style="color:#ed9d13">&amp;#39;jnlp&amp;#39;&lt;/span>,
image: &lt;span style="color:#ed9d13">&amp;#39;guoxudongdocker/jenkins-slave&amp;#39;&lt;/span>,
alwaysPullImage: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>
),
containerTemplate(name: &lt;span style="color:#ed9d13">&amp;#39;kubectl&amp;#39;&lt;/span>, image: &lt;span style="color:#ed9d13">&amp;#39;guoxudongdocker/kubectl:v1.14.1&amp;#39;&lt;/span>, command: &lt;span style="color:#ed9d13">&amp;#39;cat&amp;#39;&lt;/span>, ttyEnabled: &lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>),
],
nodeSelector:&lt;span style="color:#ed9d13">&amp;#39;ci=jenkins&amp;#39;&lt;/span>,
volumes: [
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/var/run/docker.sock&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/var/run/docker.sock&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/bin/docker&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/bin/docker&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/jdk&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/jdk&amp;#39;&lt;/span>),
hostPathVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/maven&amp;#39;&lt;/span>, hostPath: &lt;span style="color:#ed9d13">&amp;#39;/usr/local/maven&amp;#39;&lt;/span>),
secretVolume(mountPath: &lt;span style="color:#ed9d13">&amp;#39;/home/jenkins/.kube&amp;#39;&lt;/span>, secretName: &lt;span style="color:#ed9d13">&amp;#39;devops-ctl&amp;#39;&lt;/span>),
],
)
{
node(&lt;span style="color:#ed9d13">&amp;#34;jnlp-slave&amp;#34;&lt;/span>){
stage(&lt;span style="color:#ed9d13">&amp;#39;Git Checkout&amp;#39;&lt;/span>){
git branch: &lt;span style="color:#ed9d13">&amp;#39;${branch}&amp;#39;&lt;/span>, url: &lt;span style="color:#ed9d13">&amp;#39;https://github.com/sunny0826/flask-python.git&amp;#39;&lt;/span>
}
stage(&lt;span style="color:#ed9d13">&amp;#39;Build and Push Image&amp;#39;&lt;/span>){
withCredentials([usernamePassword(credentialsId: &lt;span style="color:#ed9d13">&amp;#39;docker-register&amp;#39;&lt;/span>, passwordVariable: &lt;span style="color:#ed9d13">&amp;#39;dockerPassword&amp;#39;&lt;/span>, usernameVariable: &lt;span style="color:#ed9d13">&amp;#39;dockerUser&amp;#39;&lt;/span>)]) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> docker login -u ${dockerUser} -p ${dockerPassword}
&lt;/span>&lt;span style="color:#ed9d13"> docker build -t guoxudongdocker/flask-python:${Tag} .
&lt;/span>&lt;span style="color:#ed9d13"> docker push guoxudongdocker/flask-python:${Tag}
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}
}
stage(&lt;span style="color:#ed9d13">&amp;#39;Deploy to K8s&amp;#39;&lt;/span>){
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> (&lt;span style="color:#ed9d13">&amp;#39;true&amp;#39;&lt;/span> == &lt;span style="color:#ed9d13">&amp;#34;${deploy}&amp;#34;&lt;/span>) {
container(&lt;span style="color:#ed9d13">&amp;#39;kubectl&amp;#39;&lt;/span>) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> cd deploy/base
&lt;/span>&lt;span style="color:#ed9d13"> kustomize edit set image guoxudongdocker/flask-python:${Tag}
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
echo &lt;span style="color:#ed9d13">&amp;#34;部署到 Kubernetes&amp;#34;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> (&lt;span style="color:#ed9d13">&amp;#39;prod&amp;#39;&lt;/span> == &lt;span style="color:#ed9d13">&amp;#34;${ENV}&amp;#34;&lt;/span>) {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> # kustomize build deploy/overlays/prod | kubectl apply -f -
&lt;/span>&lt;span style="color:#ed9d13"> kubectl applt -k deploy/overlays/prod
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span> {
sh &lt;span style="color:#ed9d13">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#ed9d13"> # kustomize build deploy/overlays/dev | kubectl apply -f -
&lt;/span>&lt;span style="color:#ed9d13"> kubectl applt -k deploy/overlays/dev
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
}
}
}&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span>{
echo &lt;span style="color:#ed9d13">&amp;#34;跳过Deploy to K8s&amp;#34;&lt;/span>
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里要注意几点：&lt;/p>
&lt;ul>
&lt;li>拉取 git 中的代码需要在 jenkins 中配置凭据。&lt;/li>
&lt;li>笔者的 jenkins 部署在 Kubernetes 上，要操作集群的话，需要将 kubeconfig 以 Secret 的形式挂载到 jenkins 所在 namespace。&lt;/li>
&lt;li>&lt;code>jenkins-slave&lt;/code> 需要 Java 环境运行，所以要将宿主机的 &lt;code>jdk&lt;/code> 挂载到 &lt;code>jenkins-slave&lt;/code> 中。&lt;/li>
&lt;li>同样的，宿主机中需要事先安装 &lt;code>docker&lt;/code>。&lt;/li>
&lt;li>&lt;code>docker-register&lt;/code> 为 dockerhub 的登录凭证，需要在 jenkins 中添加相应的凭证。&lt;/li>
&lt;/ul>
&lt;h2 id="演示">演示&lt;/h2>
&lt;h2 id="preview_only-false">image:
caption: &amp;ldquo;Image from: &lt;a href="https://www.pexels.com">&lt;strong>Pexels&lt;/strong>&lt;/a>&amp;rdquo;
focal_point: &amp;quot;&amp;quot;
preview_only: false&lt;/h2>
&lt;h3 id="开始构建">开始构建&lt;/h3>
&lt;p>这里选择环境、分支，填入版本即可开始构建，**注意：**这里的版本将已 tag 的形式标记 docker 镜像。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65gy1g2sikst7tuj20ob0evabw.jpg" alt="WX20190507-095142">&lt;/p>
&lt;p>这里就可以看到构建成功了&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65ly1g2sjw9w22ej20v80km0w3.jpg" alt="WX20190507-103721">&lt;/p>
&lt;h3 id="查看结果">查看结果&lt;/h3>
&lt;p>这里为了方便（其实就是懒），我就不给这个服务添加 ingress 来从外部访问了，这里使用 &lt;a href="https://yq.aliyun.com/articles/690519">KT&lt;/a> 打通本地和 k8s 集群网络来进行调试。&lt;/p>
&lt;blockquote>
&lt;p>为了简化在Kubernetes下进行联调测试的复杂度，云效在SSH隧道网络的基础上并结合Kubernetes特性构建了一款面向开发者的辅助工具kt&lt;/p>
&lt;/blockquote>
&lt;p>这里看到这个服务正常启动了&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65ly1g2sk11dnzxj20av027jrn.jpg" alt="WX20190507-104154">&lt;/p>
&lt;h3 id="发布新版本">发布新版本&lt;/h3>
&lt;p>更新 web 服务并提交&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g2sk94v1c5j209702vwej.jpg" alt="WX20190507-104936">&lt;/p>
&lt;p>按照上面步骤在 jenkins 中重新构建，当然也可以配置钩子，每次代码提交后自动构建&lt;/p>
&lt;h3 id="查看查看新版本">查看查看新版本&lt;/h3>
&lt;p>同上面一样，在构建成功后查看服务是否更新&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g2skfczaz4j20by01smx7.jpg" alt="WX20190507-105539">&lt;/p>
&lt;p>可以看到，版本已经更新了&lt;/p>
&lt;h3 id="发布生产环境">发布生产环境&lt;/h3>
&lt;p>这里模拟一下发布生产环境，假设生产环境是在 &lt;code>devops-prod&lt;/code> 的 namespace 中，这里只做演示之用，真正的生产环境中，可能存在不止一个 k8s 集群，这时需要修改 Jenkinsfile 中的 &lt;code>secretVolume&lt;/code> 来挂载不同 k8s 的 kubeconfig 来达到发布到不同集群的目的。当然，一般发布生产环境只需选择测试通过的镜像来发布即可，不需要在进行构建打包。&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g2skrnbjyuj20fc0bjmxp.jpg" alt="WX20190507-110730">&lt;/p>
&lt;h3 id="查看生产版本">查看生产版本&lt;/h3>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1g2skt3rp4yj20aq010glj.jpg" alt="WX20190507-110850">&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>上面的这些步骤简单的演示了使用 jenkins 进行 CI/CD 的流程，流程十分简单，这里仅供参考&lt;/p>
&lt;h2 id="kustomize-的作用">Kustomize 的作用&lt;/h2>
&lt;p>那么， Kustomize 在整个流程中又扮演了一个什么角色呢？&lt;/p>
&lt;h3 id="更新镜像">更新镜像&lt;/h3>
&lt;p>在 &lt;code>jenkinsfile&lt;/code> 中可以看到， kustomize 更新了基础配置的镜像版本，这里我们之前一直是使用 &lt;code>sed -i &amp;quot;s/#Tag/${Tag}/g&amp;quot; deploy.yaml&lt;/code> 来进行替换了，但是不同环境存在比较多的差异，需要替换的越来越多，导致 Jekninsfile 也越来越臃肿和难以维护。 kustomize 解决了这个问题。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize edit &lt;span style="color:#24909d">set&lt;/span> image guoxudongdocker/flask-python:&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">Tag&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="环境区分">环境区分&lt;/h3>
&lt;p>上面也提到了，不同的环境我们存在这许多差异，虽然看上去大致类似，但是很多细节都需要修改。这时 kustomize 就起到了很大的作用，不同环境相同的配置都放在 &lt;code>base&lt;/code> 中，而差异就可以在 &lt;code>overlays&lt;/code> 中实现。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
├── base
│ ├── deployment.yaml
│ ├── kustomization.yaml
│ └── service.yaml
└── overlays
├── dev
│ ├── healthcheck_patch.yaml
│ ├── kustomization.yaml
│ └── memorylimit_patch.yaml
└── prod
├── healthcheck_patch.yaml
├── kustomization.yaml
└── memorylimit_patch.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到， &lt;code>base&lt;/code> 中维护了项目共同的基础配置，如果有镜像版本等基础配置需要修改，可以使用 &lt;code>kustomize edit set image ...&lt;/code> 来直接修改基础配置，而真正不同环境，或者不同使用情况的配置则在 &lt;code>overlays&lt;/code> 中 以 patch 的形式添加配置。这里我的配置是 prod 环境部署的副本为2，同时给到的资源也更多，详情可以在 &lt;a href="https://github.com/sunny0826/flask-python">Github&lt;/a> 上查看。&lt;/p>
&lt;h3 id="与-kubectl-的集成">与 kubectl 的集成&lt;/h3>
&lt;p>在 jenkinsfile 中可以看到&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># kustomize build deploy/overlays/dev | kubectl apply -f -&lt;/span>
kubectl apply -k deploy/overlays/dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这两条命令的执行效果是一样的，在 &lt;code>kubectl v1.14.0&lt;/code> 以上的版本中，已经集成了 kustomize ，可以直接使用 &lt;code>kubectl&lt;/code> 进行部署。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>这里只是对 kustomize 在 CI/CD 中简单应用的展示，只是一种比较简单和基础的使用，真正的 CI 流程要比这个复杂的多，这里只是为了演示 kustomize 的使用而临时搭建的。而 kustomize 还有很多黑科技的用法，将会在后续的文章中介绍。&lt;/p></description></item><item><title>Post: 炫酷的终端软件 eDEX-UI</title><link>https://guoxudong.io/post/edex-ui/</link><pubDate>Mon, 29 Apr 2019 11:55:47 +0800</pubDate><guid>https://guoxudong.io/post/edex-ui/</guid><description>
&lt;p>马上就是五一假期了，而且今年的五一假期有4天！想必大家已经安排好是在家写代码还是出门去冒险了。不过在五一假期之前，我这里推荐一个好玩的又好用的软件给大家。&lt;/p>
&lt;p>想必大部分朋友和我一样在上周去看了复联4，其中钢铁侠战衣及设备各种炫酷又极具科技感的操作界面一定让你记忆犹新。很多朋友可能和我一样，都希望拥有一套这样的操作界面，这样不管是工作还是学习都会变得有趣而高效（主要是炫酷）。其实很早以前我就尝试写过，但是由于技术有限，写出来的工具都不是很符合我的要求，渐渐的也就都废弃了。而今天要介绍的这个软件，完全符合我的要求，高端大气上档次，并且还是开源的。&lt;/p>
&lt;h2 id="edex-ui">eDEX-UI&lt;/h2>
&lt;p>&lt;a href="https://github.com/GitSquared/edex-ui">eDEX-UI&lt;/a> 是一个全屏且跨平台、可定制的终端模拟器，具有先进的监控和触摸屏支持。它的外观类似科幻的计算机界面。在保持未来感的外观和感觉的同时，它努力保持一定的功能水平并可用于现实场景，其更大的目标是将科幻用户体验纳入主流。&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;ul>
&lt;li>功能齐全的终端仿真器，带有选项卡、颜色、模拟鼠标，并支持 curses 和类似 curses的应用程序。&lt;/li>
&lt;li>实时系统（CPU、RAM、进程）和网络（GeoIP、活动连接、传输速率）监控。&lt;/li>
&lt;li>完全支持触摸屏，包括屏幕键盘。&lt;/li>
&lt;li>具备跟随终端 CWD（当前工作目录）的目录查看器。&lt;/li>
&lt;li>包括主题、屏幕键盘布局、CSS 注入等在内的高级自定义。&lt;/li>
&lt;li>由才华横溢的声音设计师制作的可选音效，可实现最佳的好莱坞黑客氛围。&lt;/li>
&lt;/ul>
&lt;h3 id="显示">显示&lt;/h3>
&lt;p>&lt;img src="https://yqfile.alicdn.com/b959597643a41c4b83e697307877082124c360d4.png" alt="image">&lt;/p>
&lt;p>这里我使用了 &lt;code>tron-disrupted&lt;/code> 主题，还有多种主题可以选择&lt;/p>
&lt;p>可以看到这里的界面十分炫酷，可以为有些乏味的 shell 操作增添一抹乐趣&lt;/p>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>eDEX-UI 可以通过 &lt;code>settings.json&lt;/code> 文件进行配置，配置包括执行的 shell 类型、工作目录、键盘类型、主题等&lt;/p>
&lt;p>&lt;code>settings.json&lt;/code> 在 Mac 系统中，存放在 &lt;code>/Users/guoxudong/Library/Application Support/eDEX-UI&lt;/code> 中，默认的工作目录也是这个路径&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g2jflhunukj21h30tck0r.jpg" alt="image">&lt;/p>
&lt;p>这里可以看到我选择使用 &lt;code>zsh&lt;/code> 和 &lt;code>tron-disrupted&lt;/code> 主题，并将工作目录改为了我的用户空间&lt;/p>
&lt;h2 id="局限">局限&lt;/h2>
&lt;ul>
&lt;li>目前看来该软件的全平台支持是不错的，同时还支持触摸屏操作，但是目前还未测试在 pad 上使用，测试之后会在后续文章中补充&lt;/li>
&lt;li>CPU 占用过高，该软件 CPU 占用很高，如果是配置一般的电脑不建议让其作为终端常驻，偶尔拿出来玩玩即可&lt;/li>
&lt;/ul></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（二）： Kustomize 的使用方法</title><link>https://guoxudong.io/post/kustomize-2/</link><pubDate>Fri, 19 Apr 2019 16:05:02 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-2/</guid><description>
&lt;p>本文介绍使用和维护 Kustomize 的方法及步骤。&lt;/p>
&lt;h2 id="定制配置">定制配置&lt;/h2>
&lt;p>在这个工作流方式中，所有的配置文件（ YAML 资源）都为用户所有，存在于私有 repo 中。其他人是无法使用的。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g2813d1ia7j20qo0f0dgk.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建一个目录用于版本控制&lt;/p>
&lt;p>我们希望将一个名为 &lt;em>&lt;strong>ldap&lt;/strong>&lt;/em> 的 Kubernetes 集群应用的配置保存在自己的 repo 中。
这里使用 &lt;code>git&lt;/code> 进行版本控制。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git init ~/ldap
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个 &lt;code>base&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/base
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个目录中创建并提交 &lt;code>kustomization.yaml&lt;/code> 文件和一组资源，例如 &lt;code>deployment.yaml&lt;/code> &lt;code>service.yaml&lt;/code> 等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 &lt;code>overlays&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/overlays/staging
mkdir -p ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个目录都需要一个 &lt;code>kustomization.yaml&lt;/code> 文件以及一个或多个 &lt;code>patch&lt;/code> ，例如 &lt;code>healthcheck_patch.yaml&lt;/code> &lt;code>memorylimit_patch.yaml&lt;/code> 等。。&lt;/p>
&lt;p>&lt;code>staging&lt;/code> 目录可能会使用一个 &lt;code>patch&lt;/code> ，用于在 &lt;code>configmap&lt;/code> 增加一个实验配置。&lt;/p>
&lt;p>&lt;code>production&lt;/code> 目录则可能会在 &lt;code>deployment&lt;/code> 中增加在副本数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 &lt;code>variants&lt;/code>&lt;/p>
&lt;p>运行 &lt;code>kustomize&lt;/code> ，将生成的配置用于 kubernetes 应用部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build ~/ldap/overlays/staging | kubectl apply -f -
kustomize build ~/ldap/overlays/production | kubectl apply -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubernetes 1.14 版本， &lt;code>kustomize&lt;/code> 已经集成到 &lt;code>kubectl&lt;/code> 命令中，成为了其一个子命令，可使用 &lt;code>kubectl&lt;/code> 来进行部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -k ~/ldap/overlays/staging
kubectl apply -k ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="使用现成的配置">使用现成的配置&lt;/h2>
&lt;p>在这个工作流方式中，可从别人的 repo 中 fork kustomize 配置，并根据自己的需求来配置。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g281xyfebej20qo0f0dgr.jpg" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过 fork/modify/rebase 等方式获得配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将其克隆为你自己的 &lt;code>base&lt;/code>&lt;/p>
&lt;p>在这个 &lt;code>bash&lt;/code> 目录维护在一个 repo 中，在这个例子使用 &lt;code>ladp&lt;/code> 的 repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir ~/ldap
git clone https://github.com/&lt;span style="color:#40ffff">$USER&lt;/span>/ldap ~/ldap/base
&lt;span style="color:#24909d">cd&lt;/span> ~/ldap/base
git remote add upstream git@github.com:&lt;span style="color:#40ffff">$USER&lt;/span>/ldap
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建 &lt;code>overlays&lt;/code>&lt;/p>
&lt;p>如上面的案例一样，创建并完善 &lt;code>overlays&lt;/code> 目录中的内容&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/ldap/overlays/staging
mkdir -p ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用户可以将 &lt;code>overlays&lt;/code> 维护在不同的 repo 中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成 &lt;code>variants&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build ~/ldap/overlays/staging | kubectl apply -f -
kustomize build ~/ldap/overlays/production | kubectl apply -f -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 kubernetes 1.14 版本， &lt;code>kustomize&lt;/code> 已经集成到 &lt;code>kubectl&lt;/code> 命令中，成为了其一个子命令，可使用 &lt;code>kubectl&lt;/code> 来进行部署&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -k ~/ldap/overlays/staging
kubectl apply -k ~/ldap/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>（可选）更新 &lt;code>base&lt;/code>
用户可以定期从上游 repo 中 &lt;code>rebase&lt;/code> 他们的 &lt;code>base&lt;/code> 以保证及时更新&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">cd&lt;/span> ~/ldap/base
git fetch upstream
git rebase upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/workflows.md">kustomize workflows - github.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Post: Kustomize: 无需模板定制你的 kubernetes 配置</title><link>https://guoxudong.io/post/introducing-kustomize-template-free-configuration-customization-for-kubernetes/</link><pubDate>Mon, 15 Apr 2019 17:23:21 +0800</pubDate><guid>https://guoxudong.io/post/introducing-kustomize-template-free-configuration-customization-for-kubernetes/</guid><description>
&lt;blockquote>
&lt;p>作者：Jeff Regan (Google), Phil Wittrock (Google) 2018-05-29&lt;/p>
&lt;/blockquote>
&lt;p>如果你在运行 kubernetes 集群，你可能会拷贝一些包含 kubernetes API 对象的 YAML 文件，并且根据你的需求来修改这些文件，通过这些 YAML 文件来定义你的 kubernetes 配置。&lt;/p>
&lt;p>但是这种方法存在很难找到配置的源头并对其进行改进。今天 Google 宣布推出 &lt;strong>Kustomize&lt;/strong> ，一个作为 &lt;a href="https://github.com/kubernetes/community/tree/master/sig-cli">SIG-CLI&lt;/a> 子项目的命令行工具。这个工具提供了一个全新的、纯粹的声明式的方法来定制 kubernetes 配置，遵循并利用我们熟悉且精心设计的 Kubernetes API。&lt;/p>
&lt;p>有这样一个常见的场景，在互联网上可以看到别人的 CMS（content management system，内容管理系统）的 kubernetes 配置，这个配置是一组包括 Kubernetes API 对象的 YAML 描述文件。然后，在您自己公司的某个角落，您找到一个你非常了解的数据库，希望用它来该 CMS 的数据。&lt;/p>
&lt;p>你希望同时使用它们，此外，你希望自定义配置文件以便你的资源实例在集群中显示，并通过添加一个标签来区分在同一集群中做同样事情的其他资源。同时也希望为其配置适当的 CPU 、内存和副本数。&lt;/p>
&lt;p>此外，你还想要配置整个配置的多种变化：一个专门用于测试和实验的小服务实例（就计算资源而言），或更大的用于对外提供服务的生产级别的服务实例。同时，其他的团队也希望拥有他们自己的服务实例。&lt;/p>
&lt;h2 id="定制就是复用">定制就是复用&lt;/h2>
&lt;p>kubernetes 的配置并不是代码（是使用 YAML 描述的 API 对象，严格来说应该是数据），但是配置的生命周期与代码的生命周期有许多相似之处。&lt;/p>
&lt;p>你需要在版本控制中保留配置。所有者的配置不必与使用者的配置相同。配置可以作为整体的一部分。而用户希望为在不同的情况下复用这些配置。&lt;/p>
&lt;p>与代码复用相同，一种复用配置的方法是简单的全部拷贝并进行自定义。像代码一样，切断与源代码的联系使得从改进变的十分困难。许多团队和环境都使用这种方法，每个团队和环境都拥有自己的配置，这使得简单的升级变得十分棘手。&lt;/p>
&lt;p>另一种复用方法是将源代码抽象为参数化模板。使用一个通过执行脚本来替换所需参数的模板处理工具生成配置，通过为同一模板设置不同的值来达到复用的目的。而这种方式面临的问题是模板和参数文件并不在 kubernetes API 资源的规范中，这种方式必定是一种包装了 kubernetes API 的新东西、新语言。虽然这种方式很强大，但是也带来了学习成本和安装工具的成本。不同的团队需要不同的更改，因此几乎所有可以包含在 YAML 文件中的规范都会需要抽象成参数。&lt;/p>
&lt;h2 id="自定义配置的新选择">自定义配置的新选择&lt;/h2>
&lt;p>&lt;strong>kustomize&lt;/strong> 中工具的声明与规范是由名为 &lt;code>kustomization.yaml&lt;/code> 的文件定义。&lt;/p>
&lt;p>&lt;strong>kustomize&lt;/strong> 将会读取声明文件和 Kubernetes API 资源文件，将其组合然后将完整的资源进行标准化的输出。输出的文本可以被其他工具进一步处理，或者直接通过 &lt;strong>kubectl&lt;/strong> 应用于集群。&lt;/p>
&lt;p>例如，如果 &lt;code>kustomization.yaml&lt;/code> 文件包括：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>hello&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- deployment.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- configMap.yaml&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- service.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>确保这三个文件与 &lt;code>kustomization.yaml&lt;/code> 位于同一目录下，然后运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将创建包含三个资源的 YAML 流，其中 &lt;code>app: hello&lt;/code> 为每个资源共同的标签。&lt;/p>
&lt;p>同样的，你可以使用 &lt;em>&lt;strong>commonAnnotations&lt;/strong>&lt;/em> 字段给所有资源添加注释， &lt;em>&lt;strong>namePrefix&lt;/strong>&lt;/em> 字段为所有的资源添加共同的前缀名。这些琐碎而有常见的定制只是一个开始。&lt;/p>
&lt;p>一个更常见的例子是，你需要为一组相同资源设置不同的参数。例如：开发、演示和生产的参数。&lt;/p>
&lt;p>为此，&lt;strong>Kustomize&lt;/strong> 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。两者都是由 kustomization 文件表示。基础（Base）声明了共享的内容（资源和常见的资源配置），Overlay 则声明了差异。&lt;/p>
&lt;p>这里是一个目录树，用于管理集群应用程序的 &lt;em>&lt;strong>演示&lt;/strong>&lt;/em> 和 &lt;em>&lt;strong>生产&lt;/strong>&lt;/em> 配置参数：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">someapp/
├── base/
│ ├── kustomization.yaml
│ ├── deployment.yaml
│ ├── configMap.yaml
│ └── service.yaml
└── overlays/
├── production/
│ └── kustomization.yaml
│ ├── replica_count.yaml
└── staging/
├── kustomization.yaml
└── cpu_count.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;code>someapp/base/kustomization.yaml&lt;/code> 文件指定了公共资源和常见自定义配置（例如，它们一些相同的标签，名称前缀和注释）。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>someapp/overlays/production/kustomization.yaml&lt;/code> 文件的内容可能是：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">commonLabels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666"> &lt;/span>production&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">bases&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- ../../base&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">patches&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- replica_count.yaml&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个 kustomization 指定了一个 &lt;em>&lt;strong>patch&lt;/strong>&lt;/em> 文件 &lt;code>replica_count.yaml&lt;/code> ，其内容可能是：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>the-deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">100&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>patch&lt;/strong>&lt;/em> 是部分的资源声明，在这个例子中是 Deployment 的补丁 &lt;code>someapp/base/deployment.yaml&lt;/code> ，仅修改了副本数用以处理生产流量。&lt;/p>
&lt;p>该补丁不仅仅是一个无上下文 {parameter name，value} 元组。其作为部分 deployment spec，可以通过验证，即使与其余配置隔离读取，也具有明确的上下文和用途。&lt;/p>
&lt;p>要为生产环境创建资源，请运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kustomize build someapp/overlays/production
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果将作为一组完整资源打印到标准输出，并准备应用于集群。可以用类似的命令定义演示环境的配置。&lt;/p>
&lt;h2 id="综上所述">综上所述&lt;/h2>
&lt;p>使用 &lt;strong>kustomize&lt;/strong> ，您可以仅使用 Kubernetes API 资源文件就可以管理任意数量的 Kubernetes 定制配置。kustomize 的每个产物都是纯 YAML 的，每个都可以进行验证和运行的。&lt;strong>kustomize&lt;/strong> 鼓励通过 fork/modify/rebase 这样的&lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/docs/workflows.md">工作流&lt;/a>来管理海量的应用描述文件。&lt;/p>
&lt;p>尝试&lt;a href="https://github.com/kubernetes-sigs/kustomize/tree/master/examples/helloWorld">hello world&lt;/a>示例，开始使用 &lt;strong>kustomize&lt;/strong> 吧！有关的反馈与讨论，可以通过加入&lt;a href="https://groups.google.com/forum/#!forum/kustomize">邮件列表&lt;/a>或提 &lt;a href="https://github.com/kubernetes-sigs/kustomize/issues/new">issue&lt;/a>，欢迎提交PR。&lt;/p>
&lt;h2 id="译者按">译者按&lt;/h2>
&lt;p>随着 kubernetes 1.14 的发布，kustomize 被集成到 &lt;code>kubectl&lt;/code> 中，用户可以利用 &lt;code>kubectl apply -k dir/&lt;/code> 将指定目录的 &lt;code>kustomization.yaml&lt;/code> 提交到集群中。&lt;/p>
&lt;p>&lt;strong>原文链接&lt;/strong> &lt;a href="https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/">https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/&lt;/a>&lt;/p></description></item><item><title>Post: 使用 Kustomize 帮你管理 kubernetes 应用（一）：什么是 Kustomize ？</title><link>https://guoxudong.io/post/kustomize-1/</link><pubDate>Mon, 15 Apr 2019 13:32:59 +0800</pubDate><guid>https://guoxudong.io/post/kustomize-1/</guid><description>
&lt;h2 id="初识-kustomize">初识 Kustomize&lt;/h2>
&lt;p>第一次听说 Kustomize 其实是在 kubernetes 1.14 发布时候，它被集成到 &lt;code>kubectl&lt;/code> 中，成为了一个子命令，但也只是扫了一眼，并没有深究。真正让我注意到它，并主动开始了解其功能和使用方法的，是张磊大神在云栖社区发表的一篇文章&lt;a href="https://yq.aliyun.com/articles/697883">《从Kubernetes 1.14 发布，看技术社区演进方向》&lt;/a>，他在文中是这么说的：&lt;/p>
&lt;blockquote>
&lt;p>Kustomize 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件，而不是像 Helm 那样只提供应用描述文件模板，然后通过字符替换（Templating）的方式来进行定制化。&lt;/p>
&lt;/blockquote>
&lt;p>这不正我在苦苦寻找的东西嘛！自从公司确定了应用容器化的方案，至今已有半年多了，这期间我们的服务一个接一个的实现了容器化，部署到了 kubernetes 集群中。kubernetes 集群也有原先了1个测试集群，几个节点，发展到了如今的多个集群，几十个节点。而在推进容器化的过程中，每个服务都对对应多个应用描述文件（ YAML 文件），而根据环境的不同，又配置了多套的应用描述文件。随着服务越部越多，应用描述文件更是呈爆炸式的增长。&lt;/p>
&lt;p>感谢 devops 文化，它是我不需要为每个应用去写 YAML 文件，各个应用的开发组承担了这一工作，我只需要为他们提供基础模板即可。但应用上线后出现的 OOM 、服务无法拉起等 YAML 文件配置有误导致的问题接踵而至，使得我必须要深入各个服务，为他们配置符合他们配置。虽然也使用了 &lt;code>helm&lt;/code> ，但是其只提供应用描述文件模板，在不同环境拉起一整套服务会节省很多时间，而像我们这种在指定环境快速迭代的服务，并不会减少很多时间。针对这种情况，我已经计划要自己开发一套更符合我们工作这种场景的应用管理服务，集成在我们自己的 devops 平台中。&lt;/p>
&lt;p>这时 Kustomize 出现了，我明锐的感觉到 Kustomize 可能就是解决我现阶段问题的一剂良药。&lt;/p>
&lt;h2 id="什么是-kustomize-">什么是 Kustomize ？&lt;/h2>
&lt;blockquote>
&lt;h4 id="kubernetes-native-configuration-management">Kubernetes native configuration management&lt;/h4>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. Now, built into &lt;code>kubectl&lt;/code> as &lt;code>apply -k&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>kustomize&lt;/code> 允许用户以一个应用描述文件 （YAML 文件）为基础（Base YAML），然后通过 Overlay 的方式生成最终部署应用所需的描述文件。而其他用户可以完全不受影响的使用任何一个 Base YAML 或者任何一层生成出来的 YAML 。这使得每一个用户都可以通过类似fork/modify/rebase 这样 Git 风格的流程来管理海量的应用描述文件。这种 PATCH 的思想跟 Docker 镜像是非常相似的，它可以规避“字符替换”对应用描述文件的入侵，也不需要用户学习额外的 DSL 语法（比如 Lua）。&lt;/p>
&lt;p>而其成为 &lt;code>kubectl&lt;/code> 子命令则代表这 &lt;code>kubectl&lt;/code> 本身的插件机制的成熟，未来可能有更多的工具命令集成到 &lt;code>kubectl&lt;/code> 中。拿张磊大神的这张图不难看出，在 kubernetes 原生应用管理系统中，应用描述文件在整个应用管理体系中占据核心位置，通过应用描述文件可以组合和编排多种 kubernetes API 资源，kubernetes 通过控制器来保证集群中的资源与应用状态与描述文件完全一致。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g23cqlrodkj21bq0r8znk.jpg" alt="">&lt;/p>
&lt;p>Kustomize 不像 Helm 那样需要一整套独立的体系来完成管理应用，而是完全采用 kubernetes 的设计理念来完成管理应用的目的。同时使用起来也更加的得心应手。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://kustomize.io/">Kustomize - kustomize.io&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://yq.aliyun.com/articles/697883">从Kubernetes 1.14 发布，看技术社区演进方向 - yq.aliyun.com&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Post: 自动合并Kubeconfig，实现多k8s集群切换</title><link>https://guoxudong.io/post/merge-kubeconfig/</link><pubDate>Sun, 17 Mar 2019 10:45:02 +0800</pubDate><guid>https://guoxudong.io/post/merge-kubeconfig/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;blockquote>
&lt;p>随着微服务和容器化的深入人心，以及kubernetes已经成为容器编排领域的事实标准，越来越多的公司将自己的服务迁移到kubernetes集群中。而随着kubernetes集群的增加，集群管理的问题就凸显出来，不同的环境存在不同的集群，不同的业务线不同的集群，甚至有些开发人员都有自己的集群。诚然，如果集群是使用公有云如阿里云或华为云的容器服务，可以登录其控制台进行集群管理；或者使用rancher这用的多集群管理工具进行统一的管理。但是在想操作&lt;code>istio&lt;/code>特有的容器资源，或者想使用&lt;code>istioctl&lt;/code>的时候，或者像我一样就是想使用&lt;code>kubectl&lt;/code>命令的同学，这个时候多集群的切换就显的十分重要了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;code>kubectl&lt;/code>命令行工具通过&lt;code>kubeconfig&lt;/code>文件的配置来选择集群以及集群的API Server通信的所有信息。&lt;code>kubeconfig&lt;/code>用来保存关于集群，用户，名称空间和身份验证机制的信息。默认情况下&lt;code>kubectl&lt;/code>使用的配置文件名称是在&lt;code>$HOME/.kube&lt;/code>目录下的&lt;code>config&lt;/code>文件，可以通过设置环境变量KUBECONFIG或者&amp;ndash;kubeconfig指定其他的配置文件。详情可看官方文档https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>使用&lt;code>kubeconfig&lt;/code>文件，您可以组织您的群集，用户和名称空间。 还可以定义上下文以快速轻松地在群集和名称空间之间切换。&lt;/p>
&lt;h3 id="上下文context">上下文(Context)&lt;/h3>
&lt;p>&lt;code>kubeconfig&lt;/code>文件中的上下文元素用于以方便的名称对访问参数进行分组。 每个上下文有三个参数：集群，命名空间和用户。 默认情况下，kubectl命令行工具使用当前上下文中的参数与集群进行通信。可以使用下面的命令设置上下文：&lt;/p>
&lt;pre>&lt;code>kubectl config use-context
&lt;/code>&lt;/pre>
&lt;h3 id="配置内容">配置内容&lt;/h3>
&lt;pre>&lt;code>kubectl config view
&lt;/code>&lt;/pre>
&lt;ol>
&lt;li>如果设置了&lt;code>--kubeconfig&lt;/code>标志，则只使用指定的文件。该标志只允许有一个实例。&lt;/li>
&lt;li>如果环境变量&lt;code>KUBECONFIG&lt;/code>存在，那么就使用该环境变量&lt;code>KUBECONFIG&lt;/code>里面的值，如果不存在该环境变量&lt;code>KUBECONFIG&lt;/code>，那么默认就是使用&lt;code>$HOME/.kube/config&lt;/code>文件。&lt;/li>
&lt;/ol>
&lt;h3 id="kubeconfig内容">&lt;code>kubeconfig&lt;/code>内容&lt;/h3>
&lt;p>从下面kubeconfig文件的配置来看集群、用户、上下文、当前上下文的关系就比较明显了。&lt;/p>
&lt;pre>&lt;code>apiVersion: v1
kind: Config
preferences: {}
clusters:
- cluster:
name: {cluster-name}
users:
- name: {user-name}
contexts:
- context:
cluster: {cluster-name}
user: {user-name}
name: {context-name}
current-context: {context-name}
&lt;/code>&lt;/pre>
&lt;h2 id="为何要自动合并">为何要自动合并&lt;/h2>
&lt;p>在日常的工作中，如果我们需要操作多个集群，会得到多个kubeconfig配置文件。一般的kubeconfig文件都是yaml格式的，但是也有少部分的集群kubeconfig时已json文件的形式给出的（比如华为云的=。=），比如我们公司再阿里云、华为云和自建环境上均存在kubernetes集群，平时操作要在多集群之间切换，这也就催生了我写这个工具（其实就是一个脚本）的动机。&lt;/p>
&lt;h2 id="自动合并生成kubeconfig">自动合并生成kubeconfig&lt;/h2>
&lt;p>众所周知，yaml是一种直观的能够被电脑识别的数据序列化格式，是一个可读性高并且容易被人类阅读的语言和json相比（没有格式化之前）可读性更强。而我这个工具并不是很关心kubeconfig的格式，只要将想要合并的kubeconfig放入指定文件即可。&lt;/p>
&lt;p>GitHub：https://github.com/sunny0826/mergeKubeConfig&lt;/p>
&lt;h3 id="适用环境">适用环境&lt;/h3>
&lt;ul>
&lt;li>需要在终端使用命令行管理多集群&lt;/li>
&lt;li>kubernetes集群中安装了istio，需要使用&lt;code>istioctl&lt;/code>命令，但是集群节点并没有安装&lt;code>istioctl&lt;/code>，需要在本地终端操作&lt;/li>
&lt;li>不愿频繁编辑.kube目录中的config文件的同学&lt;/li>
&lt;/ul>
&lt;h3 id="准备工作">准备工作&lt;/h3>
&lt;ul>
&lt;li>Python环境：2.7或者3均可&lt;/li>
&lt;li>需要依赖包：&lt;code>PyYAML&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="开始使用">开始使用&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>安装依赖：&lt;/p>
&lt;pre>&lt;code> pip install PyYAML
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>运行脚本&lt;/p>
&lt;ul>
&lt;li>
&lt;p>默认运行方式，kubeconfig文件放入&lt;code>configfile&lt;/code>文件,注意删掉作为示例的两个文件&lt;/p>
&lt;pre>&lt;code> python merge.py
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>自定义kubeconfig文件目录&lt;/p>
&lt;pre>&lt;code> python merge.py -d {custom-dir}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="运行后操作">运行后操作&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>将生成的config文件放入.kube目录中&lt;/p>
&lt;pre>&lt;code> cp config ~/.kube
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>查看所有的可使用的kubernetes集群角色&lt;/p>
&lt;pre>&lt;code> kubectl config get-contexts
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>更多关于kubernetes配置文件操作&lt;/p>
&lt;pre>&lt;code> kubectl config --help
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>切换kubernetes配置&lt;/p>
&lt;pre>&lt;code> kubectl config use-context {your-contexts}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>在使用kubernetes初期，在多集群之间我一直是频繁的切换&lt;code>.kube/config&lt;/code>文件来达到切换操作集群的目的。这也导致了我的&lt;code>.kube&lt;/code>目录中存在这多个类似于&lt;code>al_test_config.bak&lt;/code>、&lt;code>al_prod_config.bak&lt;/code>、&lt;code>hw_test_config.bak&lt;/code>的文件，本地环境已经自建环境，在集群切换的时候十分头疼。而后来使用&lt;code>--kubeconfig&lt;/code>来进行切换集群，虽然比之前的方法要方便很多，但是并不十分优雅。这个简单的小工具一举解决了我的文件，对于我这个&lt;code>kubectl&lt;/code>重度依赖者来说十分重要。&lt;/p></description></item></channel></rss>