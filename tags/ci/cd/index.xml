<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – CI/CD</title><link>https://guoxudong.io/tags/ci/cd/</link><description>Recent content in CI/CD on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://guoxudong.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 基于 Flagger 和 Nginx-Ingress 实现金丝雀发布</title><link>https://guoxudong.io/post/flagger-nginx-ingress/</link><pubDate>Thu, 02 Jul 2020 13:51:14 +0800</pubDate><guid>https://guoxudong.io/post/flagger-nginx-ingress/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>很久之前我写过一篇介绍使用 Nginx-Ingress 实现蓝绿部署和金丝雀发布的文章，但那篇文章只是介绍了 nginx-ingress 具备这些能力，真正应用还要很多额外的配置和操作，况且现在能实现这些功能的并不只有 nginx-ingress，Service Mesh 工具如：Istio，App Mesh，Linkerd；Ingress Controller 如：Contour，Gloo，NGINX 都能实现，而我们需要的更多是进行金丝雀发布之后指标的监控，流量的调整以及出现问题后的及时回滚。而 Flagger 就是这样一个帮助我们解决上面这些问题的开源工具。&lt;/p>
&lt;h2 id="flagger">Flagger&lt;/h2>
&lt;p>&lt;a href="https://github.com/weaveworks/flagger">Flagger&lt;/a> 是一种渐进式交付工具，可自动控制 Kubernetes 上应用程序的发布过程。通过指标监控和运行一致性测试，将流量逐渐切换到新版本，降低在生产环境中发布新软件版本导致的风险。&lt;/p>
&lt;p>Flagger 使用 Service Mesh（App Mesh，Istio，Linkerd）或 Ingress Controller（Contour，Gloo，NGINX）来实现多种部署策略（金丝雀发布，A/B 测试，蓝绿发布）。对于发布分析，Flagger 可以查询 Prometheus、Datadog 或 CloudWatch，并使用 Slack、MS Teams、Discord 和 Rocket 来发出告警通知。&lt;/p>
&lt;blockquote>
&lt;p>本文主要介绍 Flagger 使用 Nginx-Ingress 进行金丝雀发布并监控发布状态，更多内容见&lt;a href="https://docs.flagger.app/">官方文档&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggclsv45tqj21ok0skwfb.jpg" alt="Flagger NGINX Ingress Controller">&lt;/p>
&lt;h3 id="前提条件">前提条件&lt;/h3>
&lt;h4 id="版本要求">版本要求&lt;/h4>
&lt;p>安装 Flagger 需要 Kubernetes 版本高于 &lt;strong>v1.14&lt;/strong>，NGINX ingress 版本高于 &lt;strong>0.24&lt;/strong>。&lt;/p>
&lt;h4 id="安装-nginx-ingress">安装 NGINX ingress&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create ns ingress-nginx
$ helm upgrade -i nginx-ingress stable/nginx-ingress &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--namespace ingress-nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.metrics.enabled=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.podAnnotations.&lt;span style="color:#ed9d13">&amp;#34;prometheus\.io/scrape&amp;#34;&lt;/span>=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set controller.podAnnotations.&lt;span style="color:#ed9d13">&amp;#34;prometheus\.io/port&amp;#34;&lt;/span>=&lt;span style="color:#3677a9">10254&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装部署">安装部署&lt;/h3>
&lt;h4 id="flagger-安装">Flagger 安装&lt;/h4>
&lt;p>Flagger 提供了 Hlem 和 Kustomize 两种安装方式，这里使用 Helm 3 安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm repo add flagger https://flagger.app
$ helm upgrade -i flagger flagger/flagger &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--namespace ingress-nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set prometheus.install=&lt;span style="color:#24909d">true&lt;/span> &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set &lt;span style="color:#40ffff">meshProvider&lt;/span>=nginx &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.channel=flagger &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span>--set slack.user=flagger
&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是这里我选择了 Slack 作为通知软件，需要在自己的 &lt;code>#channel&lt;/code> 内新增一个 APP，并将该 APP 的 &lt;code>url&lt;/code>、&lt;code>channel&lt;/code>、&lt;code>user&lt;/code> 填入上面的命令中。这里设置的是全局通知，集群中的 Flagger 被触发后都会进行通知，当然也可以为单个 Flagger 配置专门的通知，这里就不做过多介绍，详情见&lt;a href="https://docs.flagger.app/usage/alerting">官方文档&lt;/a>。&lt;/p>
&lt;h4 id="示例安装">示例安装&lt;/h4>
&lt;p>新建测试 namespace：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl create ns &lt;span style="color:#24909d">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署示例 deployment 和 horizontal pod autoscaler：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -k github.com/weaveworks/flagger//kustomize/podinfo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署负载测试器，以便在金丝雀发布时进行流量分析：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm upgrade -i flagger-loadtester flagger/loadtester --namespace=&lt;span style="color:#24909d">test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署 ingress，这里的 &lt;code>app.example.com&lt;/code> 需要改成你自己的域名，如果是在本地进行测试，则修改本机和负载测试器所在节点的 &lt;code>/ect/hosts&lt;/code>，将其指向你的 ADDRESS，否则将无法进行流量分析，导致部署失败。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kubernetes.io/ingress.class&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">rules&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">host&lt;/span>:&lt;span style="color:#666"> &lt;/span>app.example.com&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">http&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">paths&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">backend&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">servicePort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将以上内容另存为 &lt;code>podinfo-ingress.yaml&lt;/code>，然后应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f ./podinfo-ingress.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个 Canary 资源：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>flagger.app/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Canary&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># deployment reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ingress reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ingressRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># HPA reference (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">autoscalerRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>autoscaling/v2beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>HorizontalPodAutoscaler&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># the maximum time in seconds for the canary deployment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># to make progress before it is rollback (default 600s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">progressDeadlineSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">60&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ClusterIP port number&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># container port number or name&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">9898&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">analysis&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 时间间隔 (默认 60s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>10s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 回滚前的最大失败指标检查次数&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">threshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 路由到金丝雀副本的最大流量百分比&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 百分比 (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">maxWeight&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">50&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 金丝雀每次递增的百分比&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># 百分比 (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">stepWeight&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">5&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># NGINX Prometheus checks&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metrics&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>request-success-rate&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># minimum req success rate (non 5xx responses)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># percentage (0-100)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">thresholdRange&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">min&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">99&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># testing (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">webhooks&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>acceptance-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>pre-rollout&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>30s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>bash&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;curl -sd &amp;#39;test&amp;#39; http://podinfo-canary/token | grep token&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>load-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>5s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;hey -z 1m -q 10 -c 2 http://app.example.com/&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将以上内容另存为 &lt;code>podinfo-canary.yaml&lt;/code>，然后应用：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl apply -f ./podinfo-canary.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>目前可以看到示例应用 &lt;code>podinfo&lt;/code> 已经安装完毕，并出现了 &lt;code>podinfo&lt;/code> 和 &lt;code>podinfo-primary&lt;/code> 两个版本，并且 &lt;code>http://app.example.com/&lt;/code> 已经可以访问：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get deploy,svc,ing -n &lt;span style="color:#24909d">test&lt;/span>
NAME READY UP-TO-DATE AVAILABLE AGE
deployment.apps/flagger-loadtester 1/1 &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> 29h
deployment.apps/podinfo 0/0 &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">0&lt;/span> 29h
deployment.apps/podinfo-primary 2/2 &lt;span style="color:#3677a9">2&lt;/span> &lt;span style="color:#3677a9">2&lt;/span> 29s
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
service/flagger-loadtester ClusterIP 10.43.116.74 &amp;lt;none&amp;gt; 80/TCP 29h
service/podinfo ClusterIP 10.43.155.193 &amp;lt;none&amp;gt; 80/TCP 9s
service/podinfo-canary ClusterIP 10.43.194.226 &amp;lt;none&amp;gt; 80/TCP 29s
service/podinfo-primary ClusterIP 10.43.254.13 &amp;lt;none&amp;gt; 80/TCP 29s
NAME HOSTS ADDRESS PORTS AGE
ingress.extensions/podinfo app.example.com 192.168.1.129,192.168.4.210 &lt;span style="color:#3677a9">80&lt;/span> 5h17m
ingress.extensions/podinfo-canary app.example.com &lt;span style="color:#3677a9">80&lt;/span> 9s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个页面会展示 &lt;code>podinfo&lt;/code> 的版本已经其正在访问的 pod 名称：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcndtuqzsj21ha0q940s.jpg" alt="app.example.com">&lt;/p>
&lt;h3 id="自动金丝雀发布">自动金丝雀发布&lt;/h3>
&lt;p>现在起发布由 Flagger 控制，在部署新版本后，Flagger 自动将流量按照比例切换到新版本上，同时监控性能指标，例如 HTTP 请求的成功率、请求的平均持续时间和 pod 运行状态，经过分析后提升流量或者回滚，并通知到 Slack。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcng8c8vnj21q40t6q3n.jpg" alt="自动金丝雀发布">&lt;/p>
&lt;p>通过更新镜像版本触发金丝雀部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.1
deployment.apps/podinfo image updated
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到初始化完成后已经有 5% 的流量切换到新版本了&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> describe canary/podinfo
...
Status:
Canary Weight: &lt;span style="color:#3677a9">5&lt;/span>
Conditions:
Last Transition Time: 2020-07-02T07:21:26Z
Last Update Time: 2020-07-02T07:21:26Z
Message: New revision detected, progressing canary analysis.
Reason: Progressing
Status: Unknown
Type: Promoted
Failed Checks: &lt;span style="color:#3677a9">0&lt;/span>
Iterations: &lt;span style="color:#3677a9">0&lt;/span>
Last Applied Spec: c8bdf98d5
Last Transition Time: 2020-07-02T07:22:05Z
Phase: Progressing
Tracked Configs:
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Warning Synced 10m flagger podinfo-primary.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: observed deployment generation less &lt;span style="color:#6ab825;font-weight:bold">then&lt;/span> desired generation
Warning Synced 10m flagger podinfo-primary.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Normal Synced 10m (x3 over 10m) flagger all the metrics providers are available!
Normal Synced 10m flagger Initialization &lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>! podinfo.test
Normal Synced 41s flagger New revision detected! Scaling up podinfo.test
Warning Synced 31s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">1&lt;/span> updated replicas are available
Warning Synced 21s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">0&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Warning Synced 11s flagger canary deployment podinfo.test not ready: waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> rollout to finish: &lt;span style="color:#3677a9">1&lt;/span> of &lt;span style="color:#3677a9">2&lt;/span> updated replicas are available
Normal Synced 1s flagger Starting canary analysis &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> podinfo.test
Normal Synced 1s flagger Pre-rollout check acceptance-test passed
Normal Synced 1s flagger Advance podinfo.test canary weight &lt;span style="color:#3677a9">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>watch&lt;/code> 也能实时看到部署流量的权重，根据上面的设置，新版本权重大于 50% 就认为部署成功，流量将全部切换到新版本，并完成金丝雀部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces guoxudongdeMacBook-Pro.local: Thu Jul &lt;span style="color:#3677a9">2&lt;/span> 15:23:35 &lt;span style="color:#3677a9">2020&lt;/span>
NAMESPACE NAME STATUS WEIGHT LASTTRANSITIONTIME
&lt;span style="color:#24909d">test&lt;/span> podinfo Progressing &lt;span style="color:#3677a9">45&lt;/span> 2020-07-02T07:23:25Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开始部署时的 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65ly1ggcnsojp0kj20kj07kdgc.jpg" alt="Slack 通知">&lt;/p>
&lt;p>页面上也能看出变化，访问到新版本的概率会越来越高，以蓝色和绿色的圆代表新版本和老版本：&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65ly1ggco0nxzdrj21h80q8gnu.jpg" alt="金丝雀发布">&lt;/p>
&lt;p>发布成功后，会收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65ly1ggco2mdlphj20kq01h0sn.jpg" alt="Slack 通知">&lt;/p>
&lt;h3 id="自动回滚">自动回滚&lt;/h3>
&lt;p>当然，有自动发布就会有自动回滚，下面就通过手动触发状态码 500 异常，演示暂停发布并回滚。&lt;/p>
&lt;p>部署一个新版本：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>触发状态码 500 异常：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch curl http://app.example.com/status/500
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待一会儿，就可以看到部署失败并回滚：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces guoxudongdeMacBook-Pro.local: Thu Jul &lt;span style="color:#3677a9">2&lt;/span> 15:45:24 &lt;span style="color:#3677a9">2020&lt;/span>
NAMESPACE NAME STATUS WEIGHT LASTTRANSITIONTIME
&lt;span style="color:#24909d">test&lt;/span> podinfo Failed &lt;span style="color:#3677a9">0&lt;/span> 2020-07-02T07:45:16Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发布失败，也会收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65ly1ggcobt1f0bj20kd01vmx1.jpg" alt="失败 Slack 通知">&lt;/p>
&lt;h3 id="ab-测试">A/B 测试&lt;/h3>
&lt;p>除了加权路由，Flagger 还可以根据 HTTP 匹配条件将流量路由到新版本（当然，这个 Nginx-Ingress 的功能，Flagger 只是简化了操作）。可以根据 HTTP header 和 cookie 来定位用户并细分受众，对于需要关联会话的前端应用十分有用。&lt;/p>
&lt;p>&lt;img src="https://tva1.sinaimg.cn/large/ad5fbf65ly1ggcoglbmnyj217q0q0q3h.jpg" alt="A/B 测试">&lt;/p>
&lt;p>修改 Canary 资源：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>flagger.app/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Canary&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>nginx&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># deployment reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>apps/v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deployment&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ingress reference&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ingressRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>Ingress&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># HPA reference (optional)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">autoscalerRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>autoscaling/v2beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>HorizontalPodAutoscaler&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>podinfo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># the maximum time in seconds for the canary deployment&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># to make progress before it is rollback (default 600s)&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">progressDeadlineSeconds&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">60&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">service&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># ClusterIP port number&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">port&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">80&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># container port number or name&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">9898&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">analysis&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">threshold&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">iterations&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">10&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">match&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># curl -H &amp;#39;X-Canary: insider&amp;#39; http://app.example.com&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">headers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">x-canary&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">exact&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;insider&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># curl -b &amp;#39;canary=always&amp;#39; http://app.example.com&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">headers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cookie&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">exact&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;canary&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metrics&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>request-success-rate&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">thresholdRange&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">min&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#3677a9">99&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">interval&lt;/span>:&lt;span style="color:#666"> &lt;/span>1m&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">webhooks&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>load-test&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">url&lt;/span>:&lt;span style="color:#666"> &lt;/span>http://flagger-loadtester.test/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">timeout&lt;/span>:&lt;span style="color:#666"> &lt;/span>5s&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cmd&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;hey -z 1m -q 10 -c 2 -H &amp;#39;Cookie: canary=always&amp;#39; http://app.example.com/&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的配置可以看到，将 headers 为 &lt;code>X-Canary: insider&lt;/code> 或 cookie 为 &lt;code>canary=always&lt;/code> 的请求路由到新版本。&lt;/p>
&lt;p>部署一个新版本：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n &lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#24909d">set&lt;/span> image deployment/podinfo &lt;span style="color:#40ffff">podinfod&lt;/span>=stefanprodan/podinfo:3.1.3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以收到 Slack 通知：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1ggcorvilrrj20kb07wdgb.jpg" alt="A/B 测试 Slack 通知">&lt;/p>
&lt;p>正常访问，还是访问到老的 &lt;code>v3.1.1&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-primary-5dc6b76bd5-8sbh8&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;11&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求添加指定 header，访问到新的 &lt;code>v3.1.3&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -H &lt;span style="color:#ed9d13">&amp;#39;X-Canary: insider&amp;#39;&lt;/span> http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;10&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请求添加指定 cookie，访问到新的 &lt;code>v3.1.3&lt;/code> 版：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl -b &lt;span style="color:#ed9d13">&amp;#39;canary=always&amp;#39;&lt;/span> http://app.example.com
{
&lt;span style="color:#ed9d13">&amp;#34;hostname&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;revision&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;color&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;#34577c&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;logo&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goos&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;linux&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;goarch&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;amd64&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;runtime&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;go1.13.1&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_goroutine&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;10&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;num_cpu&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;6&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中访问也能得到相同的结果：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1ggcoy65l47j20yb0dvq49.jpg" alt="添加 cookie 在浏览器中访问">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>最早了解 Flagger 其实是因为其与 Istio 的关系，Flagger 默认的 meshProvider 就是 Istio。但是在深入了解后，发现其对市面上常见的 Service Mesh 和 Ingress Controller 都有较好的支持，通过与 Prometheus 以及负载测试器的配合可以进行细粒度的分析，从而提高了发布质量，同时还降低了人工操作出错的可能性。&lt;/p>
&lt;p>最近 &lt;a href="https://oam.dev/">OAM 社区&lt;/a>也放出了基于 Flagger 的部署 Trait 的示例，相信之后与 OAM 结合使用可以在持续部署和应用管理领域发挥更大的作用。&lt;/p>
&lt;p>想了解 OAM 可以查看我之前的文章：&lt;a href="../start-oam">《以应用为中心：开放应用模型（OAM）初探》&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm3j2vo79g20b90b9x6r.gif" alt="">&lt;/p></description></item><item><title>Post: 可视化 Tekton 组件 Tekton Dashboard</title><link>https://guoxudong.io/post/tekton-dashboard/</link><pubDate>Wed, 13 May 2020 09:55:51 +0800</pubDate><guid>https://guoxudong.io/post/tekton-dashboard/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Tekton 作为一款开源的云原生 CI/CD 框架，前身是 Knative 的 build-pipeline 项目。作为 CI/CD 框架，其本身并不是一个 CI/CD 产品，所以不应拿 Tekton 与 Jenkins 或者 Drone 这样的 CI/CD 产品进行比较，Tekton 本质是一个强大而灵活的 CI/CD 框架，开发者可以基于它开发自己的 CI/CD 工具或产品，一些有能力的团队可以使用 Tekton 做为底座开发出更适合自己团队使用的 CI/CD 工具。&lt;/p>
&lt;p>而 Tekton 的可视化组件 Tekton Dashboard 则为用户提供了可视化界面，使 Tekton 的体验更接近与 Jenkins 这样的 CI/CD 产品，同时开发者可以在使用 Tekton Dashboard 时也会对 Tekton 的一些概念进行更深入的了解。&lt;/p>
&lt;p>本文将会使用 Tekton Dashboard，通过 UI 界面在 K8S 集群中部署一个 Java 项目：&lt;a href="https://github.com/sunny0826/pipeline-example-maven">pipeline-example-maven&lt;/a>&lt;/p>
&lt;h2 id="交互式学习">交互式学习&lt;/h2>
&lt;p>本文还提供 &lt;a href="https://katacoda.com">katacoda&lt;/a> 交互式学习版本，用户可以直接访问 katacoda 页面：https://katacoda.com/guoxudong/scenarios/tekton-dashboard ，使用 &lt;a href="https://katacoda.com">katacoda&lt;/a> 在浏览器端学习使用 Tekton Dashboard。&lt;/p>
&lt;p>该教程属于官方教程的汉化版，并得到了&lt;a href="https://github.com/ncskier/katacoda/issues/2">许可&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqt0wmbtvj21hb0q779v.jpg" alt="image">&lt;/p>
&lt;h2 id="tekton-dashboard">Tekton Dashboard&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>这是所有步骤中最麻烦的一步，由于官方提供的 Tekton 镜像都在 &lt;code>gcr.io&lt;/code> 上，在国内并不能直接拉取，所以在测试的时候着实花费了不少时间。&lt;/p>
&lt;p>我特意将这些镜像转储到 dockerhub 上，如果官方版无法使用，可以使用克隆版：&lt;/p>
&lt;p>&lt;strong>安装 &lt;a href="https://github.com/tektoncd/pipeline/blob/master/docs/install.md">Tekton Pipelines&lt;/a>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#999;font-style:italic"># 官方&lt;/span>
$ kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.10.1/release.yaml
&lt;span style="color:#999;font-style:italic"># 克隆版&lt;/span>
$ kubectl apply -f https://raw.githubusercontent.com/sunny0826/tekton-local/v0.10.1/tekton-pipeline.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>安装 &lt;a href="https://github.com/tektoncd/dashboard#install-dashboard">Tekton Dashboard&lt;/a>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#999;font-style:italic"># 官方&lt;/span>
$ kubectl apply --filename https://storage.googleapis.com/tekton-releases/dashboard/previous/v0.5.3/tekton-dashboard-release.yaml
&lt;span style="color:#999;font-style:italic"># 克隆版&lt;/span>
$ kubectl apply -f https://raw.githubusercontent.com/sunny0826/tekton-local/v0.10.1/tekton-dashboard.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装成功之后需要配置 Tekton Dashboard 的访问地址，可以使用 ingress 或 Nodeport 暴露端口，这里采用 &lt;code>port-forward&lt;/code> 的形式将端口映射到本地：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ kubectl port-forward svc/tekton-dashboard 8097:9097 -n tekton-pipelines
Forwarding from 127.0.0.1:8097 -&amp;gt; &lt;span style="color:#3677a9">9097&lt;/span>
Forwarding from [::1]:8097 -&amp;gt; &lt;span style="color:#3677a9">9097&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>访问 Tekton Dashboard&lt;/strong>&lt;/p>
&lt;p>打开浏览器访问访问 http://localhost:8097&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1geqnhem9i9j21mk0tu425.jpg" alt="">&lt;/p>
&lt;h3 id="导入资源">导入资源&lt;/h3>
&lt;p>点击 &lt;code>Import Tekton resources&lt;/code> 进入资源导入页面，导入资源：&lt;/p>
&lt;ul>
&lt;li>Repository URL: &lt;code>https://github.com/sunny0826/pipeline-example-maven&lt;/code>&lt;/li>
&lt;li>Namespace: &lt;code>default&lt;/code>&lt;/li>
&lt;li>Repository directory: &lt;code>tekton/&lt;/code>&lt;/li>
&lt;li>Service Account &lt;code>tekton-dashboard&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>输入内容如下：&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqnp36mk0j20yu0memze.jpg" alt="image">&lt;/p>
&lt;p>点击 &lt;code>Import and Apply&lt;/code> 按钮，之后 Dashboard 会创建一个 PipelineRun 来导入指定的 Tekton 资源。&lt;/p>
&lt;p>点击页面底部的 &lt;code>View status of this run&lt;/code> 链接，查看 MyApp 导入 Tekton 资源的状态。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqnqyx5g2j20a403et8q.jpg" alt="">&lt;/p>
&lt;p>PipelineRun 完成后，Tekton 资源已导入成功。&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqns0gqi8j21go0ozwhl.jpg" alt="image">&lt;/p>
&lt;h3 id="创建-pipelineresource">创建 PipelineResource&lt;/h3>
&lt;p>选择 &lt;code>default&lt;/code> 命名空间，并点击 &lt;code>PipelineResource&lt;/code> 按钮。&lt;/p>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1geqnukrb3aj20yb0enmyg.jpg" alt="">&lt;/p>
&lt;p>点击页面右上方的 &lt;code>Create +&lt;/code> 按钮，将弹出一个创建 PipelineResource 的表单。&lt;/p>
&lt;p>我们要在 &lt;code>default&lt;/code> 命名空间中为 pipeline-example-maven 的 &lt;code>master&lt;/code> 分支创建一个 git PipelineResource，故在弹出的表单中填写以下信息：&lt;/p>
&lt;ul>
&lt;li>Name: &lt;code>pipeline-example-maven&lt;/code>&lt;/li>
&lt;li>Namespace: &lt;code>default&lt;/code>&lt;/li>
&lt;li>Type: &lt;code>Git&lt;/code>&lt;/li>
&lt;li>URL: &lt;code>https://github.com/sunny0826/pipeline-example-maven&lt;/code>&lt;/li>
&lt;li>Revision: &lt;code>master&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>该表单内容应如下：&lt;/p>
&lt;p>&lt;img src="https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqnxalh2pj20pl0dbq3h.jpg" alt="image">&lt;/p>
&lt;p>点击 &lt;code>Create&lt;/code> 按钮，创建 PipelineResource。&lt;/p>
&lt;h3 id="创建-pipelinerun">创建 PipelineRun&lt;/h3>
&lt;p>选择 &lt;code>default&lt;/code> 命名空间，并点击 &lt;code>PipelineRuns&lt;/code> 按钮。&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1geqo2iatnhj20yb0ewjso.jpg" alt="">&lt;/p>
&lt;p>点击页面右上方的 &lt;code>Create +&lt;/code> 按钮，将弹出一个创建 PipelineRun 的表单。该表单是动态的，会根据所选的 Pipeline 提供 PipelineResource 和 Param 字段。&lt;/p>
&lt;p>我们需要 &lt;code>default&lt;/code> 命名空间中使用 &lt;code>pipeline-example-maven&lt;/code> 的 Pipeline 和 PipelineResource，创建一个 PipelineRun，故在弹出的表单中填写以下信息：&lt;/p>
&lt;ul>
&lt;li>Namespace: &lt;code>default&lt;/code>&lt;/li>
&lt;li>Pipeline: &lt;code>pipeline-example-maven&lt;/code>&lt;/li>
&lt;li>PipelineResources source: &lt;code>pipeline-example-maven&lt;/code>&lt;/li>
&lt;li>其余字段保留默认值。&lt;/li>
&lt;/ul>
&lt;p>该表单内容应如下：&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1geqrdvoaquj20pi0lzt9o.jpg" alt="image">&lt;/p>
&lt;p>点击 &lt;code>Create&lt;/code> 按钮，创建 PipelineRun。&lt;/p>
&lt;h3 id="查看-pipelinerun-日志">查看 PipelineRun 日志&lt;/h3>
&lt;p>点击页面顶部创建通知中的链接或在 PipelineRun 列表中对应的 PipelineRun，查看 pipeline-example-maven PipelineRun 的日志。&lt;/p>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1geqrhrwspcj217x0i7425.jpg" alt="image">&lt;/p>
&lt;blockquote>
&lt;p>deploy 步骤中，有时会出现权限错误，需要给 default:default 绑定上 admin 的 clusterrole 权限：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default
&lt;/code>&lt;/pre>&lt;/div>&lt;p>确认 &lt;code>build&lt;/code> 和 &lt;code>deploy&lt;/code> 任务均已成功。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqrmy2mc9j218w0jo0uj.jpg" alt="image">&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;strong>注意&lt;/strong>：这里为了方便，使用的是单节点的 Kubernetes，构建完并没有推送到镜像仓库，镜像拉取策略为 &lt;code>imagePullPolicy: Never&lt;/code> ，所以启动时候也没有从远程仓库拉取镜像，而是启动的本地镜像。
&lt;/div>
&lt;h3 id="查看构建结果">查看构建结果&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ kubectl get deploy
NAME READY UP-TO-DATE AVAILABLE AGE
example-greenhouse 1/1 &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> 5h2m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Tekton Dashboard 将 Tekton 的资源进行了可视化展示，指导用户快速理解 Tekton pipeline 流程以及配置方式，快速上手 Tekton。但是由于镜像的原因，导致新手体验不佳，所幸官方还提供了 &lt;a href="https://katacoda.com">katacoda&lt;/a> 交互式教程，该教程我已汉化完成并获得了官方的许可，可以在浏览器端快速体验从安装 Tekton 到部署应用的整个过程。&lt;/p></description></item></channel></rss>