<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 边缘计算</title><link>https://guoxudong.io/categories/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/</link><description>Recent content in 边缘计算 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 17 Feb 2020 11:51:39 +0800</lastBuildDate><atom:link href="https://guoxudong.io/categories/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: K3d+Kubecm 本地开发运维两不误</title><link>https://guoxudong.io/post/k3d-k3s-kubecm/</link><pubDate>Mon, 17 Feb 2020 11:51:39 +0800</pubDate><guid>https://guoxudong.io/post/k3d-k3s-kubecm/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>k3s 是由 Rancher Labs 于2019年年初推出的一款轻量级 Kubernetes 发行版，满足在边缘计算环境中运行在 x86、ARM64 和 ARMv7 处理器上的小型、易于管理的 Kubernetes 集群日益增长的需求。&lt;/p>
&lt;p>k3s 除了在边缘计算领域的应用外，在研发侧的表现也十分出色。我们可以快速在本地拉起一个轻量级的 k8s 集群，而 k3d 则是 k3s 社区创建的一个小工具，可以在一个 docker 进程中运行整个 k3s 集群，相比直接使用 k3s 运行在本地，更好管理和部署。&lt;/p>
&lt;p>在日常工作中，时长要在本地集群和多个远程集群之间切换来完成运维工作，这时使用 &lt;code>kubecm&lt;/code> 快速将 k3s 集群的 kubeconfig 与现有集群的 kubeconfig 合并，并可快速切换集群，开发运维两不误。&lt;/p>
&lt;h2 id="安装-k3d">安装 k3d&lt;/h2>
&lt;p>k3d 提供了多种安装方式，十分方便。&lt;/p>
&lt;h3 id="使用脚本安装">使用脚本安装&lt;/h3>
&lt;p>直接使用 &lt;code>wget&lt;/code> 和 &lt;code>curl&lt;/code> 安装&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget -q -O - https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash
&lt;span style="color:#999;font-style:italic"># 或&lt;/span>
curl -s https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装指定版本&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget -q -O - https://raw.githubusercontent.com/rancher/k3d/master/install.sh | &lt;span style="color:#40ffff">TAG&lt;/span>=v1.3.4 bash
&lt;span style="color:#999;font-style:italic"># 或&lt;/span>
curl -s https://raw.githubusercontent.com/rancher/k3d/master/install.sh | &lt;span style="color:#40ffff">TAG&lt;/span>=v1.3.4 bash
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-homebrew-安装">使用 Homebrew 安装&lt;/h3>
&lt;p>MacOS 或安装了 Homebrew 的 Linux 可以使用 brew 安装：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install k3d
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他">其他&lt;/h3>
&lt;p>还可以直接前往 &lt;a href="https://github.com/rancher/k3d/releases">release 页面&lt;/a> 下载二进制可执行文件，或者直接使用 &lt;code>go install github.com/rancher/k3d&lt;/code> 安装。&lt;/p>
&lt;h2 id="创建-k3s-集群">创建 k3s 集群&lt;/h2>
&lt;p>创建 k3s 集群也十分简单，一行命令就可拉起，速度非常快。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> k3d create -n k3s-local
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Created cluster network with ID facae4a046b169721805f93ec21ba1acb65b9efb8cf35866529178cb0fba75a9
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Created docker volume k3d-k3s-local-images
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Creating cluster [k3s-local]
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Creating server using docker.io/rancher/k3s:v1&lt;span style="color:#3677a9">.0.1&lt;/span>...
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] SUCCESS: created cluster [k3s-local]
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] You can now use the cluster with:
export KUBECONFIG=&lt;span style="color:#ed9d13">&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span>
kubectl cluster-info
&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是一般情况下，如果没有梯子的话，k3s 集群虽然拉起来很快，但因为拉不到镜像，集群组件都无法正常拉起。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> export KUBECONFIG=&lt;span style="color:#ed9d13">&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> kubectl get pod -n kube-system
NAME READY STATUS RESTARTS AGE
helm-install-traefik-&lt;span style="color:#3677a9">8&lt;/span>wxmr &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">3&lt;/span>m30s
metrics-server-&lt;span style="color:#3677a9">6&lt;/span>d684c7b5-j4sc7 &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">3&lt;/span>m30s
coredns-d798c9dd-j6lpw &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">3&lt;/span>m30s
local-path-provisioner-&lt;span style="color:#3677a9">58&lt;/span>fb86bdfd-wv7sw &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">3&lt;/span>m30s
&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> kubectl describe pod coredns-d798c9dd-j6lpw -n kube-system
...
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal Scheduled &amp;lt;unknown&amp;gt; &lt;span style="color:#6ab825;font-weight:bold">default&lt;/span>-scheduler Successfully assigned kube-system/coredns-d798c9dd-j6lpw to k3d-k3s-local-server
Warning FailedCreatePodSandBox &lt;span style="color:#3677a9">7&lt;/span>&lt;span style="color:#447fcf">s&lt;/span> (x7 over &lt;span style="color:#3677a9">4&lt;/span>m30s) kubelet, k3d-k3s-local-server Failed create pod sandbox: rpc &lt;span style="color:#6ab825;font-weight:bold">error&lt;/span>: code = Unknown desc = failed to get sandbox image &lt;span style="color:#ed9d13">&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span>: failed to pull image &lt;span style="color:#ed9d13">&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span>: failed to pull and unpack image &lt;span style="color:#ed9d13">&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span>: failed to resolve reference &lt;span style="color:#ed9d13">&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span>: failed to do request: Head https:&lt;span style="color:#999;font-style:italic">//k8s.gcr.io/v2/pause/manifests/3.1: dial tcp 64.233.189.82:443: i/o timeout
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="离线安装">离线安装&lt;/h3>
&lt;p>如果没有梯子的话，就只能选择使用离线安装。&lt;/p>
&lt;h4 id="下载离线镜像">下载离线镜像&lt;/h4>
&lt;p>前往 &lt;a href="https://github.com/rancher/k3s/releases">release 页面&lt;/a> 下载指定版本的镜像，这里我们下载最新的 &lt;a href="https://github.com/rancher/k3s/releases/tag/v1.17.2%2Bk3s1">v1.17.2+k3s1&lt;/a> 镜像。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1gbzdedmqpdj20sh0k776o.jpg" alt="image">&lt;/p>
&lt;p>下载到 &lt;code>~/airgap&lt;/code> 目录中，并进行解压，将解压后的目录重命名为 &lt;code>1.17.2&lt;/code>。&lt;/p>
&lt;h3 id="运行离线镜像">运行离线镜像&lt;/h3>
&lt;p>这里再次运行 k3d，部署 k3s 集群。这里要注意的是，挂载离线镜像的话，必须使用 &lt;code>-i&lt;/code> flag 来指定镜像版本，这里我们使用的是 &lt;a href="https://github.com/rancher/k3s/releases/tag/v1.17.2%2Bk3s1">v1.17.2+k3s1&lt;/a> 版本，而镜像的 tag 则是 &lt;code>v1.17.2-k3s1&lt;/code>，如果不确定 tag，可以去 &lt;a href="https://hub.docker.com/r/rancher/k3s/tags">DockerHub&lt;/a> 上查看。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> k3d create -n k3s-local -i rancher/k3s:v1&lt;span style="color:#3677a9">.17.2&lt;/span>-k3s1 -v &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>(pwd)/airgap/v1&lt;span style="color:#3677a9">.17.2&lt;/span>/:/&lt;span style="color:#6ab825;font-weight:bold">var&lt;/span>/lib/rancher/k3s/agent/images/
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Created cluster network with ID &lt;span style="color:#3677a9">10&lt;/span>b3fca995fcb491ae1fe1c901672bf6f0a0fd6f51785ba8403947d2773ebd43
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Created docker volume k3d-k3s-local-images
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Creating cluster [k3s-local]
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] Creating server using docker.io/rancher/k3s:v1&lt;span style="color:#3677a9">.17.2&lt;/span>-k3s1...
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] SUCCESS: created cluster [k3s-local]
INFO[&lt;span style="color:#3677a9">0000&lt;/span>] You can now use the cluster with:
export KUBECONFIG=&lt;span style="color:#ed9d13">&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span>
kubectl cluster-info
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 k3s 集群组件启动状态：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> export KUBECONFIG=&lt;span style="color:#ed9d13">&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span>
&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> kubectl get pod -A -w
NAMESPACE NAME READY STATUS RESTARTS AGE
kube-system local-path-provisioner-&lt;span style="color:#3677a9">58&lt;/span>fb86bdfd-&lt;span style="color:#3677a9">7&lt;/span>jzbw &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">6&lt;/span>m35s
kube-system coredns-d798c9dd-jhmds &lt;span style="color:#3677a9">1&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> Running &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">6&lt;/span>m35s
kube-system metrics-server-&lt;span style="color:#3677a9">6&lt;/span>d684c7b5-&lt;span style="color:#3677a9">4&lt;/span>x2cd &lt;span style="color:#3677a9">1&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> Running &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">6&lt;/span>m35s
kube-system traefik-&lt;span style="color:#3677a9">6787&lt;/span>cddb4b-&lt;span style="color:#3677a9">9&lt;/span>v7r4 &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">16&lt;/span>s
kube-system svclb-traefik-fzrqj &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">2&lt;/span> ContainerCreating &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">15&lt;/span>s
kube-system helm-install-traefik-h8k2j &lt;span style="color:#3677a9">0&lt;/span>/&lt;span style="color:#3677a9">1&lt;/span> Completed &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">6&lt;/span>m35s
kube-system svclb-traefik-fzrqj &lt;span style="color:#3677a9">2&lt;/span>/&lt;span style="color:#3677a9">2&lt;/span> Running &lt;span style="color:#3677a9">0&lt;/span> &lt;span style="color:#3677a9">21&lt;/span>s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-kubecm">使用 kubecm&lt;/h2>
&lt;p>在 k3s 集群启动成功后，使用 &lt;a href="https://github.com/sunny0826/kubecm">&lt;code>kubecm&lt;/code>&lt;/a>，将 k3s 的 kubeconfig 与现有 kubeconfig 合并。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubecm add -f &lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>k3d get-kubeconfig --name=&lt;span style="color:#ed9d13">&amp;#39;k3s-local&amp;#39;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span> -n k3s -c
&lt;/code>&lt;/pre>&lt;/div>&lt;p>切换集群，选择 k3s。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span> kubecm s
Use the arrow keys to navigate: &lt;span style="color:#a61717;background-color:#e3d2d2">↓&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">↑&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">→&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">←&lt;/span> and / toggles search
Select Kube Context
&lt;span style="color:#a61717;background-color:#e3d2d2">😼&lt;/span> &lt;span style="color:#447fcf">k3s&lt;/span>(*)
prod-tg
test
&lt;span style="color:#a61717;background-color:#e3d2d2">↓&lt;/span> banma
--------- Info ----------
Name: k3s
Cluster: cluster-&lt;span style="color:#3677a9">485&lt;/span>d6mhcfm
User: user-&lt;span style="color:#3677a9">485&lt;/span>d6mhcfm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在就可以在本地使用 k3s 集群进行开发工作，而有运维工作的时候，使用 &lt;code>kubecm switch&lt;/code> 快速切换集群。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>&lt;img src="https://tva3.sinaimg.cn/large/ad5fbf65gy1gbzegsyex5j20x90n70vv.jpg" alt="image">&lt;/p>
&lt;p>k3s 同时支持 &lt;strong>x86_64&lt;/strong>、&lt;strong>ARM64&lt;/strong> 和 &lt;strong>ARMv7&lt;/strong> 架构，它可以十分灵活地跨任何边缘基础架构工作。不提 k3s 在边缘计算领域的应用，与之前使用的 &lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a> 相比，k3s 裁剪掉了许多用不到的功能，并且安装更简单，启动更快，空间占用也更小。相信 k3s 在开发侧的作用也会越来越大，使云原生应用的开发更加的便利。&lt;/p></description></item></channel></rss>