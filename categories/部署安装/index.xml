<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 部署安装</title><link>https://guoxudong.io/categories/%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/</link><description>Recent content in 部署安装 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 23 Aug 2019 09:36:55 +0800</lastBuildDate><atom:link href="https://guoxudong.io/categories/%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: GitHub/Gitee 静态页托管页部署SSL证书</title><link>https://guoxudong.io/post/aliyun-ssl/</link><pubDate>Fri, 23 Aug 2019 09:36:55 +0800</pubDate><guid>https://guoxudong.io/post/aliyun-ssl/</guid><description>
&lt;p>本文档介绍了在 &lt;a href="https://pages.github.com/">Github&lt;/a> / &lt;a href="https://gitee.com/help/articles/4136">Gitee&lt;/a> 的静态页托管Pages服务部署SSL证书，配置HTTPS安全访问的操作说明。&lt;/p>
&lt;h3 id="pages服务">Pages服务&lt;/h3>
&lt;p>Github/Gitee的Pages是一个免费的静态网页托管服务，您可以使用Github或码云Pages托管博客、项目官网等静态网页。常见的静态站点生成器有：Hugo、Jekyll、Hexo等，可以用来生成静态站点。默认情况下，托管的站点使用 &lt;code>github.io&lt;/code> / &lt;code>gitee.io&lt;/code> 域名来访问站点，同时也支持自定义域名，并配置强制使用HTTPS。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果要在 Gitee Pages 上配置自定义域名+HTTPS，则需要开启 Gitee Pages Pro 。&lt;/p>
&lt;/blockquote>
&lt;h3 id="github-pages-服务部署ssl证书">Github Pages 服务部署SSL证书&lt;/h3>
&lt;h4 id="前提条件">前提条件&lt;/h4>
&lt;ul>
&lt;li>GitHub 仓库&lt;/li>
&lt;li>开启 GitHub Pages&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1g69e503ukoj21ig0hwad9.jpg" alt="image">&lt;/p>
&lt;h4 id="证书签发">证书签发&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>购买证书后点击申请&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g69ee2r500j22cc078t9z.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书申请&lt;/p>
&lt;p>如果该域名是由阿里云购买，则选择自动DNS验证，如果不是在阿里云购买的，可以选择手动验证。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/bmiddle/ad5fbf65gy1g69egsu7fuj20ye0swwh3.jpg" alt="image">&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书签发&lt;/p>
&lt;p>证书通过申请后，会收到证书签发的邮件。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/wap720/ad5fbf65gy1g69epoqw6uj21680cotaj.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="设置自定义域名">设置自定义域名&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>解析域名&lt;/p>
&lt;p>在证书签发成功后，添加DNS解析，将绑定了SSL证书的域名解析到 &lt;code>YourRepo.github.io&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/ad5fbf65gy1g69evivrvqj21mi07it9g.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置域名&lt;/p>
&lt;p>解析之后将域名添加到 &lt;code>Custom domain&lt;/code> 并且点击 &lt;code>Save&lt;/code> ，Github会自动验证，出现&lt;code>Your site is published at https://YourDomainName.com/&lt;/code>则证明解析成功。&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/ad5fbf65gy1g69esrcn2tj21a210wwk0.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="gitee-pages-pro-服务部署ssl证书">Gitee Pages Pro 服务部署SSL证书&lt;/h3>
&lt;h4 id="前提条件-1">前提条件&lt;/h4>
&lt;ul>
&lt;li>Gitee 仓库&lt;/li>
&lt;li>开启 Gitee Pages Pro&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Gitee 需要开启 Gitee Pages Pro 服务才支持自定义域名+HTTPS。&lt;/p>
&lt;/blockquote>
&lt;h4 id="证书签发-1">证书签发&lt;/h4>
&lt;p>证书签发同 Github Pages。这里介绍非阿里云购买的域名，进行证书申请。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>购买证书流程如上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>申请证书&lt;/p>
&lt;p>证书验证方式选择&lt;code>手工DNS验证&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拷贝验证信息&lt;/p>
&lt;p>拷贝验证信息内的&lt;code>记录值&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>验证解析&lt;/p>
&lt;p>进入购买域名所在网站进行DNS解析，这里以&lt;a href="https://www.name.com/zh-cn/">name.com&lt;/a>为例：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g69fqad2euj221g0700tt.jpg" alt="image">&lt;/p>
&lt;p>解析成功之后，返回阿里云SSL证书管理页面点击&lt;code>验证&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>证书签发&lt;/p>
&lt;p>签发成功后会收到签发成功的邮件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="设置自定义域名-1">设置自定义域名&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>解析域名&lt;/p>
&lt;p>进入域名所在网站，添加DNS解析记录，将绑定了SSL证书的域名解析到&lt;code>gitee.gitee.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/ad5fbf65gy1g69fyy5it5j21z606mjs9.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置域名&lt;/p>
&lt;ol>
&lt;li>
&lt;p>域名添加到&lt;code>自定义域名&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/ad5fbf65gy1g69g11wx0qj21a60xiq7m.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置证书&lt;/p>
&lt;ul>
&lt;li>
&lt;p>证书下载，选择 nginx 类型。&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/bmiddle/ad5fbf65gy1g69g3pua7xj20ne0v0jus.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gitee pages 配置证书，将证书文件与私钥文件贴入并提交。&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/ad5fbf65gy1g69g64n1btj21bs0yogq8.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>勾选&lt;code>强制使用HTTPS&lt;/code>，并保存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="验证">验证&lt;/h3>
&lt;p>在Github/Gitee配置成功之后，您可在浏览器中输入 &lt;a href="https://www.YourDomainName.com">https://www.YourDomainName.com&lt;/a> 验证证书安装结果。可以正常访问静态托管站点，并且浏览器地址栏显示绿色的小锁标识说明证书安装成功。&lt;/p></description></item><item><title>Post: 单节点版rancher升级指南</title><link>https://guoxudong.io/post/rancher-update-2.2.1/</link><pubDate>Sun, 31 Mar 2019 11:15:35 +0800</pubDate><guid>https://guoxudong.io/post/rancher-update-2.2.1/</guid><description>
&lt;blockquote>
&lt;p>Rancher 不仅可以在任何云提供商的任何地方部署 Kubernetes 集群，而且还将它们集中在集中式的身份验证和访问控制之下。由于它与资源的运行位置无关，因此您可以轻松地在不同的环境部署你的 kubernetes 集群并操作他们。 Rancher 不是将部署几个独立的 Kubernetes 集群，而是将它们统一为一个单独的托管Kubernetes Cloud。&lt;/p>
&lt;/blockquote>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目前我们使用的是 rancher 2.1.1版本，在去年 rancher 发布 &lt;code>v2.1.*&lt;/code> 版本的时候做过一次升级，当时遇到了很多问题，虽然都一一解决，但是并没有有效的记录下来，这里在升级 &lt;code>v2.2.*&lt;/code> 版本的时候做一个记录以便在今后升级的时候的提供参考作用。&lt;/p>
&lt;h2 id="升级前的准备">升级前的准备&lt;/h2>
&lt;ul>
&lt;li>首先查看当前 rancher 版本，记下这个版本号后面需要使用。查看方式就是登陆 rancher 在左下角就可以看到当前版本号，我们这里使用的&lt;code>v2.1.1&lt;/code>版本。&lt;/li>
&lt;li>打开官方文档，这里推荐对照官方文档进行升级，一般官方文档都会及时更新并提供最佳升级方法，而一般的博客会因为其写作时间、使用版本、部署环境的不同有所偏差。官方文档： &lt;a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/upgrades/single-node-upgrade/">https://www.cnrancher.com/docs/rancher/v2.x/cn/upgrades/single-node-upgrade/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="升级">升级&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先获取正在运行的 rancher 容器 ID,由以下命令可知 &lt;code>RANCHER_CONTAINER_ID&lt;/code> 为 &lt;code>83167cb60134&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS
PORTS NAMES
83167cb60134 rancher/rancher:latest &lt;span style="color:#ed9d13">&amp;#34;entrypoint.sh&amp;#34;&lt;/span> &lt;span style="color:#3677a9">4&lt;/span> months ago Up &lt;span style="color:#3677a9">4&lt;/span> months 0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:443-&amp;gt;443/tcp priceless_newton
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>停止该容器&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker stop {RANCHER_CONTAINER_ID}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建正在运行的 Rancher Server 容器的数据卷容器，将在升级中使用，这里命名为 &lt;code>rancher-data&lt;/code> 容器。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_ID}为上一步中的容器ID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_TAG}为你当前正在运行的Rancher版本，如上面的先决条件中所述。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker create --volumes-from {RANCHER_CONTAINER_ID} --name rancher-data rancher/rancher:{RANCHER_CONTAINER_TAG}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>备份 &lt;code>rancher-data&lt;/code> 数据卷容器&lt;/p>
&lt;p>如果升级失败，可以通过此备份还原Rancher Server，容器命名:rancher-data-snapshot-&amp;lt;CURRENT_VERSION&amp;gt;.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_ID}为上一步中的容器ID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{CURRENT_VERSION}为当前安装的Rancher版本的标记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替换{RANCHER_CONTAINER_TAG}为当前正在运行的Rancher版本，如先决条件中所述 。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker create --volumes-from {RANCHER_CONTAINER_ID} --name rancher-data-snapshot-{CURRENT_VERSION} rancher/rancher:{RANCHER_CONTAINER_TAG}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>拉取Rancher的最新镜像,这里确保有外网，可能拉取到新的镜像，如果没有外网，这里就需要将镜像上传到私有镜像仓库，将拉取地址设置为私有镜像仓库即可&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker pull rancher/rancher:latest
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过 &lt;code>rancher-data&lt;/code> 数据卷容器启动新的 Rancher Server 容器。&lt;/p>
&lt;p>&lt;strong>这里要注意到，我们这是使用的是独立容器+外部七层负载均衡，是通过阿里云SLB进行SSL证书认证，需要在启动的时候增加&lt;code>--no-cacerts&lt;/code>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run -d --volumes-from rancher-data --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest --no-cacerts
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>升级过程会需要一定时间，不要在升级过程中终止升级，强制终止可能会导致数据库迁移错误。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>升级 Rancher Server后， server 容器中的数据会保存到 &lt;code>rancher-data&lt;/code> 容器中，以便将来升级。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>删除旧版本 Rancher Server 容器&lt;/p>
&lt;p>如果你只是停止以前的Rancher Server容器(并且不删除它),则旧版本容器可能随着主机重启后自动运行，导致容器端口冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>升级成功&lt;/p>
&lt;p>访问 rancher 可以看到右下角版本已经完成更新。&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g1lzcmucn6j20ck03qt8p.jpg" alt="image">&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Post: 阿里云日志服务采集k8s日志并实现livetail功能</title><link>https://guoxudong.io/post/dashboard-k8s/</link><pubDate>Thu, 14 Feb 2019 14:07:06 +0800</pubDate><guid>https://guoxudong.io/post/dashboard-k8s/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>目前的项目日志都是通过Logtail直接采集，投递到OSS持久化，同时可以通过阿里云日志服务、devops自建平台进行查看（虽然大部分人是直接登录ECS查看=。=），
在开始进行容器化之后，同样遇到日志的问题，目前的解决方案是阿里云日志服务持久化和展现格式化后的日志、使用rancher查看实时日志，
但是之前由于rancher平台出现一些问题，导致不能及时查看日志的情况，在这个背景下对阿里云日志服务采集k8s日志和livetail进行搭建并调研此方案是否可行。&lt;/p>
&lt;/blockquote>
&lt;h1 id="简介转自阿里云官方文档">简介（转自阿里云官方文档）&lt;/h1>
&lt;p>日志服务（Log Service，简称 LOG）是针对日志类数据的一站式服务，在阿里巴巴集团经历大量大数据场景锤炼而成。您无需开发就能快捷完成日志数据采集、消费、投递以及查询分析等功能，提升运维、运营效率，建立 DT 时代海量日志处理能力。&lt;/p>
&lt;h1 id="kubernetes日志采集组件安装">kubernetes日志采集组件安装&lt;/h1>
&lt;h2 id="安装logtail">安装Logtail&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>进入阿里云容器服务找到集群id
&lt;img src="https://guoxudong.io/images/source/log_ser.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过ssh登录master节点，或者任意安装了kubectl并配置了该集群kubeconfig的服务器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行命令，将${your_k8s_cluster_id}替换为集群id&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget http://logtail-release-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/kubernetes/alicloud-log-k8s-install.sh -O alicloud-log-k8s-install.sh; chmod &lt;span style="color:#3677a9">744&lt;/span> ./alicloud-log-k8s-install.sh; sh ./alicloud-log-k8s-install.sh &lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">your_k8s_cluster_id&lt;/span>&lt;span style="color:#ed9d13">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Project k8s-log-${your_k8s_cluster_id}下会自动创建名为config-operation-log的Logstore，用于存储alibaba-log-controller的运行日志。请勿删除此Logstore，否则无法为alibaba-log-controller排查问题。&lt;/li>
&lt;li>若您需要将日志采集到已有的Project，请执行安装命令sh ./alicloud-log-k8s-install.sh${your_k8s_cluster_id} ${your_project_name} ，并确保日志服务Project和您的Kubernetes集群在同一地域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>该条命令其实就是执行了一个shell脚本，使用helm安装了采集kubernetes集群日志的组件&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-vim" data-lang="vim">#!&lt;span style="color:#ed9d13">/bin/&lt;/span>bash&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $# -eq &lt;span style="color:#3677a9">0&lt;/span> ] ; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[Invalid Param], use sudo ./install-k8s-log.sh {your-k8s-cluster-id}&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>clusterName=$(echo $&lt;span style="color:#3677a9">1&lt;/span> | tr &lt;span style="color:#ed9d13">&amp;#39;[A-Z]&amp;#39;&lt;/span> &lt;span style="color:#ed9d13">&amp;#39;[a-z]&amp;#39;&lt;/span>)&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>curl --connect-timeout &lt;span style="color:#3677a9">5&lt;/span> http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/region-id&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $? != &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] ECS meta server connect fail, only support alibaba cloud k8s service&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>regionId=`curl http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/region-id`&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>aliuid=`curl http:&lt;span style="color:#ed9d13">//&lt;/span>&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">100&lt;/span>.&lt;span style="color:#3677a9">200&lt;/span>&lt;span style="color:#ed9d13">/latest/&lt;/span>meta-data/owner-account-id`&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>helmPackageUrl=&lt;span style="color:#ed9d13">&amp;#34;http://logtail-release-$regionId.oss-$regionId.aliyuncs.com/kubernetes/alibaba-cloud-log.tgz&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>wget $helmPackageUrl -O alibaba-cloud-log.tgz&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $? != &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] download alibaba-cloud-log.tgz from $helmPackageUrl failed&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>project=&lt;span style="color:#ed9d13">&amp;#34;k8s-log-&amp;#34;&lt;/span>$clusterName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $# -ge &lt;span style="color:#3677a9">2&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> project=$&lt;span style="color:#3677a9">2&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>echo [INFO] your k8s is using project : $project&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>helm install alibaba-cloud-log.tgz --name alibaba-log-controller \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set ProjectName=$project \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set RegionId=$regionId \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set InstallParam=$regionId \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set MachineGroupId=&lt;span style="color:#ed9d13">&amp;#34;k8s-group-&amp;#34;&lt;/span>$clusterName \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set Endpoint=$regionId&lt;span style="color:#ed9d13">&amp;#34;-intranet.log.aliyuncs.com&amp;#34;&lt;/span> \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set AlibabaCloudUserId=&lt;span style="color:#ed9d13">&amp;#34;:&amp;#34;&lt;/span>$aliuid \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set LogtailImage.Repository=&lt;span style="color:#ed9d13">&amp;#34;registry.$regionId.aliyuncs.com/log-service/logtail&amp;#34;&lt;/span> \&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> --set ControllerImage.Repository=&lt;span style="color:#ed9d13">&amp;#34;registry.$regionId.aliyuncs.com/log-service/alibabacloud-log-controller&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>installRst=$?&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> [ $installRst -eq &lt;span style="color:#3677a9">0&lt;/span> ]; then&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[SUCCESS] install helm package : alibaba-log-controller success.&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">0&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">else&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> echo &lt;span style="color:#ed9d13">&amp;#34;[FAIL] install helm package failed, errno &amp;#34;&lt;/span> $installRst&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span> exit &lt;span style="color:#3677a9">0&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>fi&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>命令执行后，会在kubernetes集群中的每个节点运行一个日志采集的pod：logatail-ds，该pod位于kube-system&lt;/p>
&lt;p>&lt;img src="https://guoxudong.io/images/source/log_detail.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成后，可使用以下命令来查看pod状态，若状态全部成功后，则表示安装完成&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm status alibaba-log-controller
LAST DEPLOYED: Thu Nov &lt;span style="color:#3677a9">22&lt;/span> 15:09:35 &lt;span style="color:#3677a9">2018&lt;/span>
NAMESPACE: default
STATUS: DEPLOYED
RESOURCES:
==&amp;gt; v1/ServiceAccount
NAME SECRETS AGE
alibaba-log-controller &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/CustomResourceDefinition
NAME AGE
aliyunlogconfigs.log.alibabacloud.com &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/ClusterRole
alibaba-log-controller &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/ClusterRoleBinding
NAME AGE
alibaba-log-controller &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/DaemonSet
NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE
logtail-ds &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &lt;span style="color:#3677a9">16&lt;/span> &amp;lt;none&amp;gt; &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1beta1/Deployment
NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
alibaba-log-controller &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#3677a9">1&lt;/span> &lt;span style="color:#40ffff">6d&lt;/span>
==&amp;gt; v1/Pod(related)
NAME READY STATUS RESTARTS AGE
logtail-ds-2fqs4 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-4bz7w 1/1 Running &lt;span style="color:#3677a9">1&lt;/span> 6d
logtail-ds-6vg88 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-7tp6v 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-9575c 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-bgq84 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-kdlhr 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-lknxw 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-pdxfk 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-pf4dz 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-rzsnw 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-sqhbv 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-vvtwn 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-wwmhg 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-xbp4j 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
logtail-ds-zpld9 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
alibaba-log-controller-85f8fbb498-nzhc8 1/1 Running &lt;span style="color:#3677a9">0&lt;/span> 6d
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="配置日志组件展示">配置日志组件展示&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>在集群内安装好日志组件后，登录阿里云日志服务控制台，就会发现有一个新的project，名称为k8s-log-{集群id}
&lt;img src="https://guoxudong.io/images/source/log_src_de.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建Logstore
&lt;img src="https://guoxudong.io/images/source/log-1.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据导入
&lt;img src="https://guoxudong.io/images/source/log-2.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择数据类型中选择docker标准输出
&lt;img src="https://guoxudong.io/images/source/log-3.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据源配置，这里可以使用默认的
&lt;img src="https://guoxudong.io/images/source/log-4.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择数据源
&lt;img src="https://guoxudong.io/images/source/log-5.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置好之后等待1-2分钟，日志就会进来了
&lt;img src="https://guoxudong.io/images/source/log-6.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了快速查询和过滤，需要配置索引
&lt;img src="https://guoxudong.io/images/source/log-7.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加容器名称、命名空间、pod名称作为索引（后续使用livetail需要）
&lt;img src="https://guoxudong.io/images/source/log-8.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这样就完成了一个k8s集群日志采集和展示的基本流程了&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="livetail功能使用">livetail功能使用&lt;/h1>
&lt;h2 id="背景介绍">背景介绍&lt;/h2>
&lt;p>在线上运维的场景中，往往需要对日志队列中进入的数据进行实时监控，从最新的日志数据中提取出关键的信息进而快速地分析出异常原因。在传统的运维方式中，如果需要对日志文件进行实时监控，需要到服务器上对日志文件执行命令tail -f，如果实时监控的日志信息不够直观，可以加上grep或者grep -v进行关键词过滤。日志服务在控制台提供了日志数据实时监控的交互功能LiveTail，针对线上日志进行实时监控分析，减轻运维压力。&lt;/p>
&lt;h2 id="使用方法">使用方法&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>这里选择来源类型为kubernetes，命名空间、pod名称、容器名称为上一步新建的3个索引的内容，过滤关键字的功劳与tail命令后加的grep命令是一样的，用于关键词过滤
&lt;img src="https://guoxudong.io/images/source/log-9.png" alt="image">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击开启livetail，这时就有实时日志展示出来了
&lt;img src="https://guoxudong.io/images/source/log-10.png" alt="image">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>以上就是阿里云livetail日志服务功能&lt;/strong>&lt;/p></description></item><item><title>Post: centos7.2 安装k8s v1.11.0</title><link>https://guoxudong.io/post/install-k8s/</link><pubDate>Tue, 14 Aug 2018 20:07:03 +0800</pubDate><guid>https://guoxudong.io/post/install-k8s/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>最近由于公司业务发展到了瓶颈，原有的技术架构已经逐渐无法满足业务开发和测试的需求，出现了应用测试环境搭建复杂，有许多套（真的很多很多）应用环境，应用在持续集成/持续交付也遇到了很大的困难，经过讨论研究决定对应用和微服务进行容器化，这就是我首次直面docker和k8s的契机.&lt;/p>
&lt;/blockquote>
&lt;h1 id="kubernetes-介绍">Kubernetes 介绍&lt;/h1>
&lt;p>Kubernetes 是 Google 团队发起的开源项目，它的目标是管理跨多个主机的容器，提供基本的部署，维护以及运用伸缩，主要实现语言为
Go 语言。
Kubernetes的特点：&lt;/p>
&lt;ul>
&lt;li>易学：轻量级，简单，容易理解&lt;/li>
&lt;li>便携：支持公有云，私有云，混合云，以及多种云平台&lt;/li>
&lt;li>可拓展：模块化，可插拔，支持钩子，可任意组合&lt;/li>
&lt;li>自修复：自动重调度，自动重启，自动复制&lt;/li>
&lt;/ul>
&lt;h1 id="准备工作">准备工作&lt;/h1>
&lt;p>&lt;strong>注：以下操作都是在root权限下执行的&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装docker-ce，这里使用docker-ce-17.09.0.c版本，安装方法见&lt;a href="https://guoxudong.io/2018/install-docker">之前的教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装Kubeadm&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic">#安装 Kubeadm 首先我们要配置好阿里云的国内源，执行如下命令：&lt;/span>
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;span style="color:#ed9d13">[kubernetes]
&lt;/span>&lt;span style="color:#ed9d13">name=Kubernetes
&lt;/span>&lt;span style="color:#ed9d13">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span>&lt;span style="color:#ed9d13">enabled=1
&lt;/span>&lt;span style="color:#ed9d13">gpgcheck=0
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;span style="color:#999;font-style:italic">#之后，执行以下命令来重建yum缓存：&lt;/span>
yum -y install epel-releaseyum
clean all
yum makecache
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来需要安装指定版本的Kubeadm（这里要安装指定版本，因为后续依赖的镜像由于有墙无法拉取，这里我们只有指定版本的镜像），注意：&lt;strong>这里是安装指定版本的Kubeadm，k8s的版本更新之快完全超出你的想象！&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum -y install kubelet-1.11.0-0
yum -y install kubeadm-1.11.0-0
yum -y install kubectl-1.11.0-0
yum -y install kubernetes-cni
&lt;span style="color:#999;font-style:italic">#执行命令启动Kubeadm服务：&lt;/span>
systemctl &lt;span style="color:#24909d">enable&lt;/span> kubelet &amp;amp;&amp;amp; systemctl start kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置 Kubeadm 所用到的镜像
这里是重中之重，因为在国内的原因，无法访问到 Google 的镜像库，所以我们需要执行以下脚本来从 Docker Hub 仓库中获取相同的镜像，并且更改 TAG 让其变成与 Google 拉去镜像一致。&lt;/p>
&lt;p>&lt;strong>新建一个 Shell 脚本，填入以下代码之后保存&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-vim" data-lang="vim">#docker.sh&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>#!&lt;span style="color:#ed9d13">/bin/&lt;/span>bash&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>images=(kube-proxy-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-scheduler-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-controller-manager-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> kube-apiserver-amd64:v1.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> etcd-amd64:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">2&lt;/span>.&lt;span style="color:#3677a9">18&lt;/span> coredns:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">3&lt;/span> pause-amd64:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span> kubernetes-dashboard-amd64:v1.&lt;span style="color:#3677a9">8&lt;/span>.&lt;span style="color:#3677a9">3&lt;/span> k8s-dns-sidecar-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> k8s-dns-kube-dns-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> k8s-dns-dnsmasq-nanny-amd64:&lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">14&lt;/span>.&lt;span style="color:#3677a9">9&lt;/span> )&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>for imageName in ${images[@]} ; do&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker pull keveon/$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker tag keveon&lt;span style="color:#ed9d13">/$imageName k8s.gcr.io/&lt;/span>$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker rmi keveon/$imageName&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>done&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span># 个人新加的一句，V &lt;span style="color:#3677a9">1&lt;/span>.&lt;span style="color:#3677a9">11&lt;/span>.&lt;span style="color:#3677a9">0&lt;/span> 必加&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>docker tag da86e6ba6ca1 k8s.gcr.io/pause:&lt;span style="color:#3677a9">3&lt;/span>.&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>保存后使用chmod命令赋予脚本执行权限&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chmod -R &lt;span style="color:#3677a9">777&lt;/span> ./docker.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行脚本拉取镜像&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sh docker.sh
&lt;span style="color:#999;font-style:italic">#这里就开始了漫长的拉取镜像之路&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭掉swap&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo swapoff -a
&lt;span style="color:#999;font-style:italic">#要永久禁掉swap分区，打开如下文件注释掉swap那一行&lt;/span>
&lt;span style="color:#999;font-style:italic"># sudo vi /etc/stab&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭SELinux的&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 临时禁用selinux&lt;/span>
&lt;span style="color:#999;font-style:italic"># 永久关闭 修改/etc/sysconfig/selinux文件设置&lt;/span>
sed -i &lt;span style="color:#ed9d13">&amp;#39;s/SELINUX=permissive/SELINUX=disabled/&amp;#39;&lt;/span> /etc/sysconfig/selinux
&lt;span style="color:#999;font-style:italic"># 这里按回车，下面是第二条命令&lt;/span>
setenforce &lt;span style="color:#3677a9">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>关闭防火墙&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">systemctl disable firewalld.service &amp;amp;&amp;amp; systemctl stop firewalld.service
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>配置转发参数&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 配置转发相关参数，否则可能会出错&lt;/span>
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/k8s.conf
&lt;/span>&lt;span style="color:#ed9d13">net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span>&lt;span style="color:#ed9d13">net.bridge.bridge-nf-call-iptables = 1
&lt;/span>&lt;span style="color:#ed9d13">vm.swappiness=0
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;span style="color:#999;font-style:italic"># 这里按回车，下面是第二条命令&lt;/span>
sysctl --system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里就完成了k8s集群搭建的准备工作，集群搭建的话以上操作结束后将操作完的系统制作成系统镜像，方便集群搭建&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="正式安装">正式安装&lt;/h1>
&lt;p>&lt;strong>以下的操作都只在主节点上进行：&lt;/strong>&lt;/p>
&lt;p>&lt;strong>初始化镜像&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubeadm init --kubernetes-version=v1.11.0 --pod-network-cidr=10.10.0.0/16 &lt;span style="color:#999;font-style:italic">#这里填写集群所在网段&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>之后的输出会是这样：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.938979&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> feature_gate.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">230&lt;/span>] feature gates: &amp;amp;{&lt;span style="color:#6ab825;font-weight:bold">map&lt;/span>[]}
[init] using Kubernetes version: v1&lt;span style="color:#3677a9">.11.0&lt;/span>
[preflight] running pre-flight checks
I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.961005&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">81&lt;/span>] Validating kernel version
I0712 &lt;span style="color:#3677a9">10&lt;/span>:&lt;span style="color:#3677a9">46&lt;/span>:&lt;span style="color:#3677a9">30.961061&lt;/span> &lt;span style="color:#3677a9">13461&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">96&lt;/span>] Validating kernel config
[WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: &lt;span style="color:#3677a9">18.03.1&lt;/span>-ce. Max validated version: &lt;span style="color:#3677a9">17.03&lt;/span>
[WARNING Hostname]: hostname &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> could not be reached
[WARNING Hostname]: hostname &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> lookup g2-apigateway on &lt;span style="color:#3677a9">100.100.2.138&lt;/span>:&lt;span style="color:#3677a9">53&lt;/span>: no such host
[preflight/images] Pulling images required &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> setting up a Kubernetes cluster
[preflight/images] This might take a minute or two, depending on the speed of your internet connection
[preflight/images] You can also perform this action in beforehand using &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>kubeadm config images pull&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>
[kubelet] Writing kubelet environment file with flags to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
[kubelet] Writing kubelet configuration to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
[preflight] Activating the kubelet service
[certificates] Generated ca certificate and key.
[certificates] Generated apiserver certificate and key.
[certificates] apiserver serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway kubernetes kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span> kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span>.svc kubernetes.&lt;span style="color:#6ab825;font-weight:bold">default&lt;/span>.svc.cluster.local] and IPs [&lt;span style="color:#3677a9">10.96.0.1&lt;/span> &lt;span style="color:#3677a9">172.16.8.62&lt;/span>]
[certificates] Generated apiserver-kubelet-client certificate and key.
[certificates] Generated sa key and public key.
[certificates] Generated front-proxy-ca certificate and key.
[certificates] Generated front-proxy-client certificate and key.
[certificates] Generated etcd/ca certificate and key.
[certificates] Generated etcd/server certificate and key.
[certificates] etcd/server serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway localhost] and IPs [&lt;span style="color:#3677a9">127.0.0.1&lt;/span> ::&lt;span style="color:#3677a9">1&lt;/span>]
[certificates] Generated etcd/peer certificate and key.
[certificates] etcd/peer serving cert is signed &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> DNS names [g2-apigateway localhost] and IPs [&lt;span style="color:#3677a9">172.16.8.62&lt;/span> &lt;span style="color:#3677a9">127.0.0.1&lt;/span> ::&lt;span style="color:#3677a9">1&lt;/span>]
[certificates] Generated etcd/healthcheck-client certificate and key.
[certificates] Generated apiserver-etcd-client certificate and key.
[certificates] valid certificates and keys now exist in &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/pki&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/admin.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/kubelet.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/controller-manager.conf&amp;#34;&lt;/span>
[kubeconfig] Wrote KubeConfig file to disk: &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/scheduler.conf&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-apiserver to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-apiserver.yaml&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-controller-manager to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-controller-manager.yaml&amp;#34;&lt;/span>
[controlplane] wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> component kube-scheduler to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/kube-scheduler.yaml&amp;#34;&lt;/span>
[etcd] Wrote Static Pod manifest &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> a local etcd instance to &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests/etcd.yaml&amp;#34;&lt;/span>
[init] waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet to boot up the control plane as Static Pods from directory &lt;span style="color:#ed9d13">&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span>
[init] this might take a minute or longer &lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> the control plane images have to be pulled
[apiclient] All control plane components are healthy after &lt;span style="color:#3677a9">41.001672&lt;/span> seconds
[uploadconfig] storing the configuration used in ConfigMap &lt;span style="color:#ed9d13">&amp;#34;kubeadm-config&amp;#34;&lt;/span> in the &lt;span style="color:#ed9d13">&amp;#34;kube-system&amp;#34;&lt;/span> Namespace
[kubelet] Creating a ConfigMap &lt;span style="color:#ed9d13">&amp;#34;kubelet-config-1.11&amp;#34;&lt;/span> in namespace kube-system with the configuration &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelets in the cluster
[markmaster] Marking the node g2-apigateway as master by adding the label &lt;span style="color:#ed9d13">&amp;#34;node-role.kubernetes.io/master=&amp;#39;&amp;#39;&amp;#34;&lt;/span>
[markmaster] Marking the node g2-apigateway as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[patchnode] Uploading the CRI Socket information &lt;span style="color:#ed9d13">&amp;#34;/var/run/dockershim.sock&amp;#34;&lt;/span> to the Node API object &lt;span style="color:#ed9d13">&amp;#34;g2-apigateway&amp;#34;&lt;/span> as an annotation
[bootstraptoken] using token: o337m9.ceq32wg9g2gro7gx
[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> nodes to get long term certificate credentials
[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstraptoken] configured RBAC rules to allow certificate rotation &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> all node client certificates in the cluster
[bootstraptoken] creating the &lt;span style="color:#ed9d13">&amp;#34;cluster-info&amp;#34;&lt;/span> ConfigMap in the &lt;span style="color:#ed9d13">&amp;#34;kube-public&amp;#34;&lt;/span> namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy
Your Kubernetes master has initialized successfully!
To start using your cluster, you need to run the following as a regular user:
mkdir -p &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube/config
sudo chown &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>(id -u):&lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>(id -g) &lt;span style="color:#a61717;background-color:#e3d2d2">$&lt;/span>HOME/.kube/config
You should now deploy a pod network to the cluster.
Run &lt;span style="color:#ed9d13">&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span> with one of the options listed at:
https:&lt;span style="color:#999;font-style:italic">//kubernetes.io/docs/concepts/cluster-administration/addons/
&lt;/span>&lt;span style="color:#999;font-style:italic">&lt;/span>
You can now join any number of machines by running the following on each node
as root:
kubeadm join &lt;span style="color:#3677a9">10.10.207.253&lt;/span>:&lt;span style="color:#3677a9">6443&lt;/span> --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:&lt;span style="color:#3677a9">90e3&lt;/span>a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里注意最后一行：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">kubeadm join &lt;span style="color:#3677a9">10.10.207.253&lt;/span>:&lt;span style="color:#3677a9">6443&lt;/span> --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:&lt;span style="color:#3677a9">90e3&lt;/span>a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>证明集群主节点安装成功，这里要记得保存这条命令，以便之后各个节点加入集群&lt;/p>
&lt;p>&lt;strong>配置kubetl认证信息&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">export&lt;/span> &lt;span style="color:#40ffff">KUBECONFIG&lt;/span>=/etc/kubernetes/admin.conf
&lt;span style="color:#999;font-style:italic"># 如果你想持久化的话，直接执行以下命令【推荐】&lt;/span>
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;export KUBECONFIG=/etc/kubernetes/admin.conf&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>安装flanel网络&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p /etc/cni/net.d/
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF&amp;gt; /etc/cni/net.d/10-flannel.conf
&lt;/span>&lt;span style="color:#ed9d13">{
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;delegate&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span>&lt;span style="color:#ed9d13">}
&lt;/span>&lt;span style="color:#ed9d13">}
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
mkdir /usr/share/oci-umount/oci-umount.d -p
mkdir /run/flannel/
cat &lt;span style="color:#ed9d13">&amp;lt;&amp;lt;EOF&amp;gt; /run/flannel/subnet.env
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_NETWORK=10.244.0.0/16
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_SUBNET=10.244.1.0/24
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_MTU=1450
&lt;/span>&lt;span style="color:#ed9d13">FLANNEL_IPMASQ=true
&lt;/span>&lt;span style="color:#ed9d13">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>最后需要新建一个flannel.yml文件：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRole&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">rules&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- pods&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- get&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- nodes&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- list&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- watch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">apiGroups&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">resources&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- nodes/status&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- patch&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRoleBinding&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">roleRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiGroup&lt;/span>:&lt;span style="color:#666"> &lt;/span>rbac.authorization.k8s.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ClusterRole&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">subjects&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ServiceAccount&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ServiceAccount&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>ConfigMap&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>v1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">data&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">cni-conf.json&lt;/span>:&lt;span style="color:#666"> &lt;/span>|&lt;span style="color:#ed9d13">
&lt;/span>&lt;span style="color:#ed9d13"> {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;name&amp;#34;: &amp;#34;cbr0&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;type&amp;#34;: &amp;#34;flannel&amp;#34;,
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;delegate&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;isDefaultGateway&amp;#34;: true
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">net-conf.json&lt;/span>:&lt;span style="color:#666"> &lt;/span>|&lt;span style="color:#ed9d13">
&lt;/span>&lt;span style="color:#ed9d13"> {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Network&amp;#34;: &amp;#34;10.10.0.0/16&amp;#34;, #这里换成集群所在的网段
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Backend&amp;#34;: {
&lt;/span>&lt;span style="color:#ed9d13"> &amp;#34;Type&amp;#34;: &amp;#34;vxlan&amp;#34;
&lt;/span>&lt;span style="color:#ed9d13"> }
&lt;/span>&lt;span style="color:#ed9d13"> }&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">caption&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">focal_point&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">preview_only&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#447fcf;text-decoration:underline">---&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#666"> &lt;/span>extensions/v1beta1&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">kind&lt;/span>:&lt;span style="color:#666"> &lt;/span>DaemonSet&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-ds&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">namespace&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-system&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">template&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">labels&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tier&lt;/span>:&lt;span style="color:#666"> &lt;/span>node&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">app&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">spec&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostNetwork&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">nodeSelector&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">beta.kubernetes.io/arch&lt;/span>:&lt;span style="color:#666"> &lt;/span>amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tolerations&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">key&lt;/span>:&lt;span style="color:#666"> &lt;/span>node-role.kubernetes.io/master&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">operator&lt;/span>:&lt;span style="color:#666"> &lt;/span>Exists&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">effect&lt;/span>:&lt;span style="color:#666"> &lt;/span>NoSchedule&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">serviceAccountName&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">initContainers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>install-cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>quay.io/coreos/flannel:v0.9.1-amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- cp&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">args&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- -f&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /etc/kube-flannel/cni-conf.json&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- /etc/cni/net.d/10-flannel.conf&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/cni/net.d&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/kube-flannel/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">containers&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">image&lt;/span>:&lt;span style="color:#666"> &lt;/span>quay.io/coreos/flannel:v0.9.1-amd64&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">command&lt;/span>:&lt;span style="color:#666"> &lt;/span>[&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;/opt/bin/flanneld&amp;#34;&lt;/span>,&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;--ip-masq&amp;#34;&lt;/span>,&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;--kube-subnet-mgr&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>]&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">securityContext&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">privileged&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>POD_NAME&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>metadata.name&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>POD_NAMESPACE&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldRef&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">fieldPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>metadata.namespace&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/kube-flannel/&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/run&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>cni&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hostPath&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">path&lt;/span>:&lt;span style="color:#666"> &lt;/span>/etc/cni/net.d&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">configMap&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>kube-flannel-cfg&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>执行：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f ./flannel.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，master节点不参与工作负载，但如果希望安装出一个all-in-one的k8s环境，则可以执行以下命令：&lt;/p>
&lt;p>&lt;strong>让master节点成为一个node节点：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl taint nodes --all node-role.kubernetes.io/master-
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>查看节点信息：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>会看到如下的输出：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME STATUS ROLES AGE VERSION
k8s-master Ready master 18h v1.11.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>以下是节点配置&lt;/strong>&lt;/p>
&lt;p>在配置好主节点之后，就可以配置集群的其他节点了，这里建议直接安装之前做好准备工作的系统镜像
进入节点机器之后，直接执行之前保存好的命令&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubeadm join 10.10.207.253:6443 --token t69z6h.lr2etdbg9mfx5r15 --discovery-token-ca-cert-hash sha256:90e3a748c0eb4cb7058f3d0ee8870ee5d746214ab0589b5e841fd5d68fec8f00
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完后会看到：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">[preflight] running pre-flight checks
[WARNING RequiredIPVSKernelModulesAvailable]: the IPVS proxier will not be used, because the following required kernel modules are not loaded: [ip_vs_wrr ip_vs_sh ip_vs ip_vs_rr] or no builtin kernel ipvs support: &lt;span style="color:#6ab825;font-weight:bold">map&lt;/span>[ip_vs_rr:{} ip_vs_wrr:{} ip_vs_sh:{} nf_conntrack_ipv4:{} ip_vs:{}]
you can solve this problem with following methods:
&lt;span style="color:#3677a9">1.&lt;/span> Run &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>modprobe -- &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span> to load missing kernel modules;
&lt;span style="color:#3677a9">2.&lt;/span> Provide the missing builtin kernel ipvs support
I0725 &lt;span style="color:#3677a9">09&lt;/span>:&lt;span style="color:#3677a9">59&lt;/span>:&lt;span style="color:#3677a9">27.929247&lt;/span> &lt;span style="color:#3677a9">10196&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">81&lt;/span>] Validating kernel version
I0725 &lt;span style="color:#3677a9">09&lt;/span>:&lt;span style="color:#3677a9">59&lt;/span>:&lt;span style="color:#3677a9">27.929356&lt;/span> &lt;span style="color:#3677a9">10196&lt;/span> kernel_validator.&lt;span style="color:#6ab825;font-weight:bold">go&lt;/span>:&lt;span style="color:#3677a9">96&lt;/span>] Validating kernel config
[discovery] Trying to connect to API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Created cluster-info discovery client, requesting info from &lt;span style="color:#ed9d13">&amp;#34;https://10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Requesting info from &lt;span style="color:#ed9d13">&amp;#34;https://10.10.207.253:6443&amp;#34;&lt;/span> again to validate TLS against the pinned public key
[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[discovery] Successfully established connection with API Server &lt;span style="color:#ed9d13">&amp;#34;10.10.207.253:6443&amp;#34;&lt;/span>
[kubelet] Downloading configuration &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet from the &lt;span style="color:#ed9d13">&amp;#34;kubelet-config-1.11&amp;#34;&lt;/span> ConfigMap in the kube-system namespace
[kubelet] Writing kubelet configuration to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span>
[kubelet] Writing kubelet environment file with flags to file &lt;span style="color:#ed9d13">&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span>
[preflight] Activating the kubelet service
[tlsbootstrap] Waiting &lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information &lt;span style="color:#ed9d13">&amp;#34;/var/run/dockershim.sock&amp;#34;&lt;/span> to the Node API object &lt;span style="color:#ed9d13">&amp;#34;k8s-node1&amp;#34;&lt;/span> as an annotation
This node has joined the cluster:
* Certificate signing request was sent to master and a response
was received.
* The Kubelet was informed of the new secure connection details.
Run &lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span>kubectl get nodes&lt;span style="color:#a61717;background-color:#e3d2d2">&amp;#39;&lt;/span> on the master to see this node join the cluster.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>这里就表示执行完毕了，可以去主节点执行命令：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>可以看到节点已加入集群：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME STATUS ROLES AGE VERSION
k8s-master Ready master 20h v1.11.0
k8s-node1 Ready &amp;lt;none&amp;gt; 20h v1.11.0
k8s-node2 Ready &amp;lt;none&amp;gt; 20h v1.11.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这期间可能需要等待一段时间，状态才会全部变为ready&lt;/p>
&lt;h1 id="kubernetes-dashboard安装">kubernetes-dashboard安装&lt;/h1>
&lt;p>详见：&lt;a href="https://guoxudong.io/2018/dashboard-k8s">kubernetes安装dashboard&lt;/a>&lt;/p>
&lt;h1 id="采坑指南">采坑指南&lt;/h1>
&lt;p>有时会出现master节点一直处于notready的状态，这里可能是没有启动flannel，只需要按照上面的教程配置好flannel，然后执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f ./flannel.yml
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Post: centos7安装指定版本的docker</title><link>https://guoxudong.io/post/install-docker/</link><pubDate>Tue, 14 Aug 2018 20:05:21 +0800</pubDate><guid>https://guoxudong.io/post/install-docker/</guid><description>
&lt;h1 id="前言">前言&lt;/h1>
&lt;blockquote>
&lt;p>在使用&lt;strong>centos7&lt;/strong>，并使用荫安装搬运工的时候，往往不希望安装最新版本的搬运工，而是希望安装与自己熟悉或者当前业务环境需要的版本，例如目前Kubernetes支持的最新搬运工版本为v17.03，所以就产生了安装指定版本码头工人的需求。&lt;/p>
&lt;/blockquote>
&lt;h1 id="安装步骤">安装步骤&lt;/h1>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># 安装依赖包&lt;/span>
yum install -y yum-utils device-mapper-persistent-data lvm2
&lt;span style="color:#999;font-style:italic"># 添加Docker软件包源&lt;/span>
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
&lt;span style="color:#999;font-style:italic">#关闭测试版本list（只显示稳定版）&lt;/span>
sudo yum-config-manager --enable docker-ce-edge
sudo yum-config-manager --enable docker-ce-test
&lt;span style="color:#999;font-style:italic"># 更新yum包索引&lt;/span>
yum makecache fast
&lt;span style="color:#999;font-style:italic">#NO.1 直接安装Docker CE （will always install the highest possible version，可能不符合你的需求）&lt;/span>
yum install docker-ce
&lt;span style="color:#999;font-style:italic">#NO.2 指定版本安装&lt;/span>
yum list docker-ce --showduplicates|sort -r
&lt;span style="color:#999;font-style:italic">#找到需要安装的&lt;/span>
yum install docker-ce-17.09.0.ce -y
&lt;span style="color:#999;font-style:italic">#启动docker&lt;/span>
systemctl start docker &amp;amp; systemctl &lt;span style="color:#24909d">enable&lt;/span> docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="采坑指南">采坑指南&lt;/h1>
&lt;blockquote>
&lt;p>当然本着万事皆有坑的原则，这里也是有坑的，在安装中也是会遇到如下的问题&lt;/p>
&lt;/blockquote>
&lt;p>在执行一下命令的时候：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum install docker-ce-17.03.0.ce -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>会出现如下的报错：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">--&amp;gt; Finished Dependency Resolution
Error: Package: docker-ce-17.03.0.ce-1.el7.centos.x86_64 (docker-ce-stable)
Requires: docker-ce-selinux &amp;gt;= 17.03.0.ce-1.el7.centos
Available: docker-ce-selinux-17.03.0.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.0.ce-1.el7.centos
Available: docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.1.ce-1.el7.centos
Available: docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch (docker-ce-stable)
docker-ce-selinux = 17.03.2.ce-1.el7.centos
You could try using --skip-broken to work around the problem
You could try running: rpm -Va --nofiles --nodigest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在出现这个问题之后，需要执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic">#要先安装docker-ce-selinux-17.03.2.ce，否则安装docker-ce会报错&lt;/span>
yum install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
&lt;span style="color:#999;font-style:italic">#然后再安装 docker-ce-17.03.2.ce，就能正常安装&lt;/span>
yum install docker-ce-17.03.2.ce-1.el7.centos
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>