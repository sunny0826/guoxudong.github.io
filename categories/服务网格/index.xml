<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 服务网格</title><link>https://guoxudong.io/categories/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link><description>Recent content in 服务网格 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 10 Apr 2019 14:03:25 +0800</lastBuildDate><atom:link href="https://guoxudong.io/categories/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 从边车模式到 Service Mesh</title><link>https://guoxudong.io/post/sidercar-to-servicemesh/</link><pubDate>Wed, 10 Apr 2019 14:03:25 +0800</pubDate><guid>https://guoxudong.io/post/sidercar-to-servicemesh/</guid><description>
&lt;p>所谓边车模式（ Sidecar pattern ），也译作挎斗模式，是分布式架构中云设计模式的一种。因为其非常类似于生活中的边三轮摩托车而得名。该设计模式通过给应用程序加上一个“边车”的方式来拓展应用程序现有的功能。这种设计模式出现的很早，实现的方式也多种多样。现在这个模式更是随着微服务的火热与 Service Mesh 的逐渐成熟而进入人们的视野。&lt;/p>
&lt;h2 id="什么是边车模式">什么是边车模式&lt;/h2>
&lt;p>&lt;img src="http://tva2.sinaimg.cn/large/ad5fbf65ly1g18zhnoh76j20dw0dw752.jpg" alt="">&lt;/p>
&lt;p>在 &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/">Azure Architecture Center&lt;/a> 的云设计模式中是这么介绍边车模式的：&lt;/p>
&lt;blockquote>
&lt;p>Deploy components of an application into a separate process or container to provide isolation and encapsulation.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;mdash; &lt;em>&lt;strong>&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar">Sidecar pattern&lt;/a>&lt;/strong>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>这里要注意的是： 这里的 Sidecar 是分布式架构中云设计模式的一种，与我们目前在使用的 Istio 或 Linkerd 中的 Sidecar 是设计与实现的区别，后文中提到的边车模式均是指这种设计模式，请勿与 Istio 或 其他 Service Mesh 软件 中的 Sidecar 混淆。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>边车模式&lt;/strong>是一种分布式架构的设计模式。如上图所示，边车就是加装在摩托车旁来达到拓展功能的目的，比如行驶更加稳定，可以拉更多的人和货物，坐在边车上的人可以给驾驶员指路等。边车模式通过给应用服务加装一个“边车”来达到&lt;strong>控制&lt;/strong>和&lt;strong>逻辑&lt;/strong>的分离的目的。&lt;/p>
&lt;p>比如日志记录、监控、流量控制、服务注册、服务发现、服务限流、服务熔断等在业务服务中不需要实现的控制面功能，可以交给“边车”，业务服务只需要专注实现业务逻辑即可。如上图那样，应用服务你只管开好你的车，打仗的事情就交给边车上的代理就好。这与分布式和微服务架构完美契合，真正的实现了控制和逻辑的分离与解耦。&lt;/p>
&lt;h2 id="边车模式设计">边车模式设计&lt;/h2>
&lt;p>在设计上边车模式与网关模式有类似之处，但是其粒度更细。其为每个服务都配备一个“边车”，这个“边车“可以理解为一个 agent ，这个服务所有的通信都是通过这个 agent 来完成的，这个 agent 同服务一起创建，一起销毁。像服务注册、服务发现、监控、流量控制、日志记录、服务限流和服务服务熔断等功能完全可以做成标准化的组件和模块，不需要在单独实现其功能来消耗业务开发的精力和时间来开发和调试这些功能，这样可以开发出真正高内聚低耦合的软件。&lt;/p>
&lt;p>这里有两种方法来实现边车模式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过 SDK 、 Lib 等软件包的形式，在开发时引入该软件包依赖，使其与业务服务集成起来。&lt;/p>
&lt;p>这种方法可以与应用密切集成，提高资源利用率并且提高应用性能。但是这种方法是对代码有侵入的，受到编程语言和软件开发人员水平的限制，但当该依赖有 bug 或者需要升级时，业务代码需要重新编译和发布。同时，如果该依赖宣布停止维护或者闭源，那么会给该服务带来不小的影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以 Sidecar 的形式，在运维的时候与应用服务集成在一起。&lt;/p>
&lt;p>这种方式对应用服务没有侵入性，不受编程语言和开发人员水平的限制，做到了控制与逻辑分开部署。但是会增加应用延迟，并且管理和部署的复杂度会增加。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="边车模式解决了什么问题">边车模式解决了什么问题&lt;/h2>
&lt;p>边车模式在概念上是比较简单的，但是在实践中还是要了解边车模式到底解决了什么问题，我们为什么要使用边车模式？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>控制与逻辑分离的问题&lt;/p>
&lt;p>边车模式是基于将控制与逻辑分离和解耦的思想，通俗的讲就是让专业的人做专业的事，业务代码只需要关心其复杂的业务逻辑，其他的事情”边车“会帮其处理，从这个角度看，可能叫跟班或者秘书模式也不错 :)&lt;/p>
&lt;p>日志记录、监控、流量控制、服务注册、服务发现、服务限流、服务熔断、鉴权、访问控制和服务调用可视化等，这些功能从本质上和业务服务的关系并不大，而传统的软件工程在开发层面完成这些功能，这导致了各种各样维护上的问题。&lt;/p>
&lt;p>就好像一个厨师不是必须去关心食材的产地、饭店的选址、是给大厅的客人上菜还是给包房的客人上菜&amp;hellip;他只需要做好菜就好，虽然上面的这些事他都可以做。而传统的软件工程就像是一个小饭店的厨师，他即是老板又是厨师，既需要买菜又需要炒菜，所有的事情都要他一个人做，如果客人一多，就会变的手忙脚乱；而控制与逻辑分离的软件，其逻辑部分就像是高档酒店的厨师，他只需要将菜做好即可，其他的事情由像”边车“这样的成员帮其处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解决服务之间调用越来越复杂的问题&lt;/p>
&lt;p>随着分布式架构越来越复杂和微服务越拆越细，我们越来越迫切的希望有一个统一的控制面来管理我们的微服务，来帮助我们维护和管理所有微服务，这时传统开发层面上的控制就远远不够了。而边车模式可以很好的解决这个问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="从边车模式到-service-mesh">从边车模式到 Service Mesh&lt;/h2>
&lt;p>边车模式有效的分离了系统控制和业务逻辑，可以将所有的服务进行统一管理，让开发人员更专注于业务开发，显著的提升开发效率。而遵循这种模式进行实践从很早以前就开始了，开发人员一直试图将上文中我们提到的功能（如：流量控制、服务注册、服务发现、服务限流、服务熔断等）提取成一个标准化的 Sidecar ，通过 Sidecar 代理来与其他系统进行交互，这样可以大大简化业务开发和运维。而随着分布式架构和微服务被越来越多的公司和开发者接受并使用，这一需求日益凸显。&lt;/p>
&lt;p>这就是 Service Mesh 服务网格诞生的契机，它是 CNCF（Cloud Native Computing Foundation，云原生基金会）目前主推的新一代微服务架构。 William Morgan 在 &lt;a href="https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/">What&amp;rsquo;s a service mesh? And why do I need one?&lt;/a> 【&lt;a href="https://blog.maoxianplay.com/posts/whats-a-service-mesh-and-why-do-i-need-one/">译文&lt;/a>】中解释了什么是 Service Mesh 。&lt;/p>
&lt;p>Service Mesh 有如下几个特点：&lt;/p>
&lt;ul>
&lt;li>应用程序间通讯的中间层&lt;/li>
&lt;li>轻量级网络代理&lt;/li>
&lt;li>应用程序无感知&lt;/li>
&lt;li>解耦应用程序的重试/超时、监控、追踪和服务发现&lt;/li>
&lt;/ul>
&lt;p>Service Mesh 将底层那些难以控制的网络通讯统一管理，诸如：流量管控，丢包重试，访问控制等。而上层的应用层协议只需关心业务逻辑即可。Service Mesh 是一个用于处理服务间通信的基础设施层，它负责为构建复杂的云原生应用传递可靠的网络请求。&lt;/p>
&lt;h2 id="你真的需要-service-mesh-吗">你真的需要 Service Mesh 吗？&lt;/h2>
&lt;p>正如 NGINX 在其博客上发表的一篇文章名叫 &lt;a href="https://www.nginx.com/blog/do-i-need-a-service-mesh/">Do I Need a Service Mesh? &lt;/a> 【&lt;a href="http://www.servicemesher.com/blog/do-i-need-a-service-mesh/">译文&lt;/a>】 的文章中提到：&lt;/p>
&lt;blockquote>
&lt;p>As the complexity of the application increases, service mesh becomes a realistic alternative to implementing capabilities service-by-service.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>随着应用程序复杂性的增加，服务网格将成为实现服务到服务的能力的现实选择。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/ad5fbf65gy1g1yqgvxvzrj20sg0fxgnw.jpg" alt="">&lt;/p>
&lt;p>随着我们的微服务越来越细分，我们所要管理的服务正在成倍的增长着，Kubernetes 提供了丰富的功能，使得我们可以快速的部署和调度这些服务，同时也提供了我们熟悉的方式来实现那些复杂的功能，但是当临界点到来时，可能就是我们真正要去考虑使用 Service Mesh 的时候了。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Sidecar pattern ： &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar">https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What&amp;rsquo;s a service mesh? And why do I need one?： &lt;a href="https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/">https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Do I Need a Service Mesh?：https://www.nginx.com/blog/do-i-need-a-service-mesh/&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Post: Service Mesh是什么</title><link>https://guoxudong.io/post/istio-servicemesh/</link><pubDate>Tue, 19 Mar 2019 16:12:56 +0800</pubDate><guid>https://guoxudong.io/post/istio-servicemesh/</guid><description>
&lt;p>本文转自&lt;a href="http://www.servicemesher.com/istio-handbook/concepts-and-principle/what-is-service-mesh.html">《Istio 服务网格进阶实战》&lt;/a>&lt;/p>
&lt;h1 id="什么是服务网格">什么是服务网格？&lt;/h1>
&lt;p>Service mesh 又译作 “服务网格”，作为服务间通信的基础设施层。Buoyant 公司的 CEO Willian Morgan 在他的这篇文章 &lt;a href="https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/">WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE?&lt;/a> 中解释了什么是 Service Mesh，为什么云原生应用需要 Service Mesh。&lt;/p>
&lt;p>服务网格是用于处理服务间通信的专用基础设施层。它负责通过包含现代云原生应用程序的复杂服务拓扑来可靠地传递请求。实际上，服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码一起部署，而不需要感知应用程序本身。—— &lt;a href="https://twitter.com/wm">Willian Morgan&lt;/a> Buoyant CEO&lt;/p>
&lt;p>服务网格（Service Mesh）这个术语通常用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。&lt;/p>
&lt;h2 id="服务网格的特点">服务网格的特点&lt;/h2>
&lt;p>服务网格有如下几个特点：&lt;/p>
&lt;ul>
&lt;li>应用程序间通讯的中间层&lt;/li>
&lt;li>轻量级网络代理&lt;/li>
&lt;li>应用程序无感知&lt;/li>
&lt;li>解耦应用程序的重试/超时、监控、追踪和服务发现&lt;/li>
&lt;/ul>
&lt;p>目前两款流行的服务网格开源软件 &lt;a href="https://linkerd.io">Linkerd&lt;/a> 和 &lt;a href="https://Istio.io">Istio&lt;/a> 都可以直接在 Kubernetes 中集成，其中 Linkerd 已经成为 CNCF 成员，Istio 在 2018年7月31日宣布 &lt;a href="https://istio.io/zh/blog/2018/announcing-1.0/">1.0&lt;/a>。&lt;/p>
&lt;h2 id="理解服务网格">理解服务网格&lt;/h2>
&lt;p>如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关心服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了。&lt;/p>
&lt;p>&lt;a href="http://philcalcado.com/">Phil Calçado&lt;/a> 在他的这篇博客 &lt;a href="http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh&lt;/a> 中详细解释了服务网格的来龙去脉：&lt;/p>
&lt;ol>
&lt;li>从最原始的主机之间直接使用网线相连&lt;/li>
&lt;li>网络层的出现&lt;/li>
&lt;li>集成到应用程序内部的控制流&lt;/li>
&lt;li>分解到应用程序外部的控制流&lt;/li>
&lt;li>应用程序的中集成服务发现和断路器&lt;/li>
&lt;li>出现了专门用于服务发现和断路器的软件包/库，如 &lt;a href="https://finagle.github.io/">Twitter 的 Finagle&lt;/a> 和 &lt;a href="https://code.fb.com/networking-traffic/introducing-proxygen-facebook-s-c-http-framework/">Facebook 的 Proxygen&lt;/a>，这时候还是集成在应用程序内部&lt;/li>
&lt;li>出现了专门用于服务发现和断路器的开源软件，如 &lt;a href="http://netflix.github.io/">Netflix OSS&lt;/a>、Airbnb 的 &lt;a href="https://github.com/airbnb/synapse">synapse&lt;/a> 和 &lt;a href="https://github.com/airbnb/nerve">nerve&lt;/a>&lt;/li>
&lt;li>最后作为微服务的中间层服务网格出现&lt;/li>
&lt;/ol>
&lt;p>服务网格的架构如下图所示：&lt;/p>
&lt;p>&lt;img src="http://wx4.sinaimg.cn/large/00704eQkly1fswh7dbs1pj30id0bpmxl.jpg" alt="Service Mesh 架构图">&lt;/p>
&lt;p>图片来自：&lt;a href="http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh&lt;/a>&lt;/p>
&lt;p>服务网格作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 serivce mesh 中实现。&lt;/p>
&lt;h2 id="服务网格如何工作">服务网格如何工作？&lt;/h2>
&lt;p>下面以 Istio 为例讲解服务网格如何在 Kubernetes 中工作。&lt;/p>
&lt;ol>
&lt;li>Istio 将服务请求路由到目的地址，根据其中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。&lt;/li>
&lt;li>当 Istio 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。&lt;/li>
&lt;li>Istio 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。&lt;/li>
&lt;li>Istio 将请求发送给该实例，同时记录响应类型和延迟数据。&lt;/li>
&lt;li>如果该实例挂了、不响应了或者进程不工作了，Istio 将把请求发送到其他实例上重试。&lt;/li>
&lt;li>如果该实例持续返回 error，Istio 会将该实例从负载均衡池中移除，稍后再周期性得重试。&lt;/li>
&lt;li>如果请求的截止时间已过，Istio 主动失败该请求，而不是再次尝试添加负载。&lt;/li>
&lt;li>Istio 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。&lt;/li>
&lt;/ol>
&lt;h2 id="为何使用服务网格">为何使用服务网格？&lt;/h2>
&lt;p>服务网格并没有给我们带来新功能，它是用于解决其他工具已经解决过的问题，只不过这次是在云原生的 Kubernetes 环境下的实现。&lt;/p>
&lt;p>在传统的 MVC 三层 Web 应用程序架构下，服务之间的通讯并不复杂，在应用程序内部自己管理即可，但是在现今的复杂的大型网站情况下，单体应用被分解为众多的微服务，服务之间的依赖和通讯十分复杂，出现了 twitter 开发的 &lt;a href="https://twitter.github.io/finagle/">Finagle&lt;/a>、Netflix 开发的 &lt;a href="https://github.com/Netflix/Hystrix">Hystrix&lt;/a> 和 Google 的 Stubby 这样的 “胖客户端” 库，这些就是早期的服务网格，但是它们都仅适用于特定的环境和特定的开发语言，并不能作为平台级的服务网格支持。&lt;/p>
&lt;p>在云原生架构下，容器的使用给予了异构应用程序的更多可行性，Kubernetes 增强的应用的横向扩容能力，用户可以快速的编排出复杂环境、复杂依赖关系的应用程序，同时开发者又无须过分关心应用程序的监控、扩展性、服务发现和分布式追踪这些繁琐的事情而专注于程序开发，赋予开发者更多的创造性。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/">WHAT’S A SERVICE MESH? AND WHY DO I NEED ONE? - buoyant.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/attest-engineering/Istio-a-service-mesh-for-aws-ecs-937f201f847a">Istio: A service mesh for AWS ECS - medium.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://istio.io/blog/istio-service-mesh-for-microservices.html">初次了解 Istio - istio.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/">Application Network Functions With ESBs, API Management, and Now.. Service Mesh? - blog.christianposta.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://philcalcado.com/2017/08/03/pattern_service_mesh.html">Pattern: Service Mesh - philcalcado.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.servicemesher.com/envoy/">Envoy 官方文档中文版 - servicemesher.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://istio.io/zh">Istio 官方文档 - istio.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/servicemesher/awesome-servicemesh/">servicemesher/awesome-servicemesh - github.com&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>