<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – 肺炎疫情</title><link>https://guoxudong.io/categories/%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85/</link><description>Recent content in 肺炎疫情 on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 14 Feb 2020 10:12:52 +0800</lastBuildDate><atom:link href="https://guoxudong.io/categories/%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 使用 Grafana 展示肺炎疫情动态</title><link>https://guoxudong.io/post/feiyan-grafana/</link><pubDate>Fri, 14 Feb 2020 10:12:52 +0800</pubDate><guid>https://guoxudong.io/post/feiyan-grafana/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>新型冠状病毒疫情汹涌而来，全国各地严防死守，而疫情的实时数据也通过不同的渠道，如微信城市服务的疫情动态订阅、支付宝的疫情实时追踪、新浪新闻的疫情实时动态等等，各种平台纷纷将疫情的实时动态进行展示，确保人们可以第一时间了解疫情的发展情况。&lt;/p>
&lt;p>而无论是哪一家的数据推送和展示，都是面向大众的，并不能个性化的展示我们最关心的那些数据，所以这时就需要自制一个疫情动态展示的 Dashboard 了。&lt;/p>
&lt;p>说到 Dashboard，第一个联想到的当然就是 &lt;a href="https://grafana.com/">Grafana&lt;/a> 了，&lt;a href="https://grafana.com/">Grafana&lt;/a> 是自2014年以来推出的多平台开源分析和交互式可视化软件。连接支持的数据源，它会提供 Web 图表的展示以及报警。终端用户可以通过插件进行拓展，从而使用交互式的查询及展示复杂的监控仪表盘。&lt;/p>
&lt;h2 id="项目准备">项目准备&lt;/h2>
&lt;p>明确目标，我们这里需要定制一个 Dashboard 用于展示疫情动态，由于我目前在上海，需要展示全国和上海的确诊、疑似、治愈和死亡病例数；同时还需要一个病例发展曲线，用来观察疫情发展趋势；各省区情况已经上海各区情况也是需要的。&lt;/p>
&lt;p>&lt;a href="https://grafana.com/">Grafana&lt;/a> 只是一个展示数据的工具，首先需要的是数据源，目前市面上并没有可以直接用于 Grafana 的疫情数据源，这里我们需要：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>需要一个 &lt;a href="https://grafana.com/">Grafana&lt;/a>，无论是在你的笔记本电脑上，还是在你的 K8S 集群中（这里推荐使用 docker 进行运行 Grafana，如果部署在 K8S 集群中，那更好）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 &lt;a href="https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation">SimpleJson&lt;/a> 插件，它可以将 json 格式的数据，用作 Grafana 的数据源。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发数据源">开发数据源&lt;/h2>
&lt;p>数据源这里使用 Python Bottle 进行开发，当然你也可以选择 flask，都是一样的，我使用 Bottle 的原因是之前开发的 Grafana 数据源是使用 Bottle 开发的，这里直接拿来就可以用，调试配置甚至用于构建 docker 镜像的 &lt;code>Dockerfile&lt;/code> 和用于部署 K8S 的 &lt;code>deploy.yaml&lt;/code> 都有现成可以用的。使用 Python 开发 &lt;a href="https://grafana.com/">Grafana&lt;/a> 数据源很简单，只有符合 &lt;a href="https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation">SimpleJson&lt;/a> 的格式要求即可。可以根据 &lt;a href="http://oz123.github.io/about.html">Oz Nahum Tiram&lt;/a> 的博文 &lt;a href="http://oz123.github.io/writings/2019-06-16-Visualize-almost-anything-with-Grafana-and-Python/index.html">Visualize almost anything with Grafana and Python&lt;/a> 来学习如果使用 Python 作为 &lt;a href="https://grafana.com/">Grafana&lt;/a> 的数据源。&lt;/p>
&lt;p>在对数据源的定制中，使用两种类型的的数据：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>timeserie&lt;/code> 类型：&lt;/p>
&lt;p>用于展示全国（含港澳台）和上海地区的疫情实时动态，展示确诊、疑似、治愈和死亡数，并且展示较昨日增加的数量，绘制了【确诊/疑似】数和【治愈/死亡】数的对比曲线。&lt;/p>
&lt;p>这里只要将全国确诊数 &lt;code>gntotal&lt;/code> 与 当前时间戳组合返回即可，其他指标也是这种方式。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ffa500">@app.post&lt;/span>(&lt;span style="color:#ed9d13">&amp;#39;/query&amp;#39;&lt;/span>)
&lt;span style="color:#6ab825;font-weight:bold">def&lt;/span> &lt;span style="color:#447fcf">query&lt;/span>():
&lt;span style="color:#6ab825;font-weight:bold">print&lt;/span>(request.json)
body = []
all_data = getDataSync()
time_stamp = &lt;span style="color:#24909d">int&lt;/span>(&lt;span style="color:#24909d">round&lt;/span>(time.time() * &lt;span style="color:#3677a9">1000&lt;/span>))
&lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> target &lt;span style="color:#6ab825;font-weight:bold">in&lt;/span> request.json[&lt;span style="color:#ed9d13">&amp;#39;targets&amp;#39;&lt;/span>]:
name = target[&lt;span style="color:#ed9d13">&amp;#39;target&amp;#39;&lt;/span>]
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> name == &lt;span style="color:#ed9d13">&amp;#39;gntotal&amp;#39;&lt;/span>:
body.append({&lt;span style="color:#ed9d13">&amp;#39;target&amp;#39;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#39;gntotal&amp;#39;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#39;datapoints&amp;#39;&lt;/span>: [[all_data[&lt;span style="color:#ed9d13">&amp;#39;gntotal&amp;#39;&lt;/span>], time_stamp]]})
body = dumps(body)
&lt;span style="color:#6ab825;font-weight:bold">return&lt;/span> HTTPResponse(body=body, headers={&lt;span style="color:#ed9d13">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#39;application/json&amp;#39;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>table&lt;/code> 类型：&lt;/p>
&lt;p>用于绘制中国各省确诊、疑似、治愈和死亡病例数表格，以及上海各区确诊、疑似、治愈和死亡病例数表格。&lt;/p>
&lt;p>取出数据中的名称以及确诊、疑似、治愈和死亡数，&lt;code>append&lt;/code> 到 &lt;code>rows&lt;/code> 中即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ffa500">@app.post&lt;/span>(&lt;span style="color:#ed9d13">&amp;#39;/query&amp;#39;&lt;/span>)
&lt;span style="color:#6ab825;font-weight:bold">def&lt;/span> &lt;span style="color:#447fcf">query&lt;/span>():
&lt;span style="color:#6ab825;font-weight:bold">print&lt;/span>(request.json)
body = []
all_data = getDataSync()
sh_data = getShDataSync()
&lt;span style="color:#6ab825;font-weight:bold">if&lt;/span> request.json[&lt;span style="color:#ed9d13">&amp;#39;targets&amp;#39;&lt;/span>][&lt;span style="color:#3677a9">0&lt;/span>][&lt;span style="color:#ed9d13">&amp;#39;type&amp;#39;&lt;/span>] == &lt;span style="color:#ed9d13">&amp;#39;table&amp;#39;&lt;/span>:
rows = []
&lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> data &lt;span style="color:#6ab825;font-weight:bold">in&lt;/span> all_data[&lt;span style="color:#ed9d13">&amp;#39;list&amp;#39;&lt;/span>]:
row = [data[&lt;span style="color:#ed9d13">&amp;#39;name&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;value&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;susNum&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;cureNum&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;deathNum&amp;#39;&lt;/span>]]
rows.append(row)
sh_rows = []
&lt;span style="color:#6ab825;font-weight:bold">for&lt;/span> data &lt;span style="color:#6ab825;font-weight:bold">in&lt;/span> sh_data[&lt;span style="color:#ed9d13">&amp;#39;city&amp;#39;&lt;/span>]:
row = [data[&lt;span style="color:#ed9d13">&amp;#39;name&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;conNum&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;susNum&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;cureNum&amp;#39;&lt;/span>], data[&lt;span style="color:#ed9d13">&amp;#39;deathNum&amp;#39;&lt;/span>]]
sh_rows.append(row)
bodies = {&lt;span style="color:#ed9d13">&amp;#39;all&amp;#39;&lt;/span>: [{
&lt;span style="color:#ed9d13">&amp;#34;columns&amp;#34;&lt;/span>: [
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;省份&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;name&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;确诊&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34; type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;conNum&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;疑似&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34; type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;susNum&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;治愈&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;cureNum&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;死亡&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;deathNum&amp;#34;&lt;/span>}
],
&lt;span style="color:#ed9d13">&amp;#34;rows&amp;#34;&lt;/span>: rows,
&lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;table&amp;#34;&lt;/span>
}],
&lt;span style="color:#ed9d13">&amp;#39;sh&amp;#39;&lt;/span>: [{
&lt;span style="color:#ed9d13">&amp;#34;columns&amp;#34;&lt;/span>: [
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;省份&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;name&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;确诊&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34; type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;value&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;疑似&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34; type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;susNum&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;治愈&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;cureNum&amp;#34;&lt;/span>},
{&lt;span style="color:#ed9d13">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;死亡&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;deathNum&amp;#34;&lt;/span>}
],
&lt;span style="color:#ed9d13">&amp;#34;rows&amp;#34;&lt;/span>: sh_rows,
&lt;span style="color:#ed9d13">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#34;table&amp;#34;&lt;/span>
}]}
series = request.json[&lt;span style="color:#ed9d13">&amp;#39;targets&amp;#39;&lt;/span>][&lt;span style="color:#3677a9">0&lt;/span>][&lt;span style="color:#ed9d13">&amp;#39;target&amp;#39;&lt;/span>]
body = dumps(bodies[series])
&lt;span style="color:#6ab825;font-weight:bold">return&lt;/span> HTTPResponse(body=body, headers={&lt;span style="color:#ed9d13">&amp;#39;Content-Type&amp;#39;&lt;/span>: &lt;span style="color:#ed9d13">&amp;#39;application/json&amp;#39;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="选择展示-panel-类型">选择展示 Panel 类型&lt;/h2>
&lt;p>总的来说，使用了4种 Panel 进行展示：&lt;/p>
&lt;ul>
&lt;li>展示病例数的展示块，使用 &lt;code>Singlestat&lt;/code>&lt;/li>
&lt;li>展示数据对比曲线，使用 &lt;code>Graph&lt;/code>&lt;/li>
&lt;li>展示表格，使用 &lt;code>Table&lt;/code>&lt;/li>
&lt;li>文字标题，使用 &lt;code>Text&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="配置数据源">配置数据源&lt;/h2>
&lt;h3 id="病例数展示块">病例数展示块：&lt;/h3>
&lt;p>这里只有一个值，所以要选择 &lt;code>First&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://tvax2.sinaimg.cn/large/ad5fbf65gy1gbvs6gmbzlj20x00ku0uk.jpg" alt="image">&lt;/p>
&lt;h3 id="病例数发展趋势图">病例数发展趋势图：&lt;/h3>
&lt;p>这里将【确诊/疑似】和【治愈/死亡】数进行对比。&lt;/p>
&lt;p>&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1gbvs8hmuvoj21gu0iu41j.jpg" alt="image">&lt;/p>
&lt;h3 id="数据表格">数据表格：&lt;/h3>
&lt;p>&lt;img src="https://tvax3.sinaimg.cn/large/ad5fbf65gy1gbvsa2pharj21b30igdi1.jpg" alt="image">&lt;/p>
&lt;h2 id="效果">效果&lt;/h2>
&lt;p>整体效果还可以，先已用作公司大屏展示疫情情况（这里我司用于展示屏幕较小，只不过是一个小米电视，故字体和展示块都做的大了一些）。&lt;/p>
&lt;p>&lt;img src="featured.png" alt="">&lt;/p>
&lt;h2 id="构建">构建&lt;/h2>
&lt;p>将代码打包成为 docker 镜像，就可以运行在任意环境以及 K8S 集群了，镜像已上传 dockerhub 直接拉取镜像，开箱即食。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="color:#999;font-style:italic"># Dockerfile&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">FROM&lt;/span>&lt;span style="color:#ed9d13"> python:3.7.3-alpine3.9&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">LABEL&lt;/span> &lt;span style="color:#40ffff">maintainer&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;sunnydog0826@gmail.com&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">COPY&lt;/span> . /app&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">RUN&lt;/span> &lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;https://mirrors.aliyun.com/alpine/v3.9/main/&amp;#34;&lt;/span> &amp;gt; /etc/apk/repositories &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk update &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; apk add --no-cache gcc g++ python3-dev python-dev linux-headers libffi-dev openssl-dev make &lt;span style="color:#ed9d13">\
&lt;/span>&lt;span style="color:#ed9d13">&lt;/span> &amp;amp;&amp;amp; pip3 install -r /app/requestments.txt -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#ed9d13"> /app&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#ed9d13">&amp;#34;uwsgi&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;--ini&amp;#34;&lt;/span>,&lt;span style="color:#ed9d13">&amp;#34;uwsgi.ini&amp;#34;&lt;/span>]&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行">运行&lt;/h2>
&lt;ul>
&lt;li>拉取镜像&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">docker pull guoxudongdocker/feiyan-datasource
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>运行镜像&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">docker run -d --name datasource -p 8088:3000 guoxudongdocker/feiyan-datasource
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>添加数据源&lt;/p>
&lt;p>选择 &lt;a href="https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation">SimpleJson&lt;/a> 类型的数据源，点击添加，填入数据源地址：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gbvsocijjuj20jj0lagot.jpg" alt="datasource">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>导入 Dashboard&lt;/p>
&lt;p>点击 &lt;code>Upload.json file&lt;/code>，选择 &lt;code>wuhan2020-grafana/dashboard.json&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1gbvspqvaz0j20uh0iracw.jpg" alt="import">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 K8S 部署（可选）&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">kubectl apply -f deploy.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>截止目前（2020年2月14日），病例数还在不断的增加，但是疑似病例数趋势开始下降，可以看出，目前新型肺炎的确诊速度增加了；治愈数也在不断的增加；上海地区和其他地区比起来，虽然有大批返工人员进入，但是并没有增加特别多的病例数，各个社区严防死守的效果初显；同时上海一直保持着死亡1人的情况，而且中国首例新型肺炎治愈的也在上海。总的来说只要大家注意预防，待在家中，多消毒，多通风，一定可以战胜疫情，度过难关。&lt;/p>
&lt;p>导入 Dashboard 的 &lt;code>json&lt;/code> 文件和部署 K8S 的 &lt;code>yaml&lt;/code> 文件都可以在 GitHub 上找到。&lt;/p>
&lt;p>项目地址：&lt;a href="https://github.com/sunny0826/wuhan2020-grafana">https://github.com/sunny0826/wuhan2020-grafana&lt;/a>&lt;/p></description></item></channel></rss>