<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guo Xudong's Blog·郭旭东的博客 – homebrew</title><link>https://guoxudong.io/categories/homebrew/</link><description>Recent content in homebrew on Guo Xudong's Blog·郭旭东的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 03 Dec 2020 11:17:34 +0800</lastBuildDate><atom:link href="https://guoxudong.io/categories/homebrew/index.xml" rel="self" type="application/rss+xml"/><item><title>Post: 将项目发布到 Homebrew 官方仓库</title><link>https://guoxudong.io/post/homebrew-pull-request/</link><pubDate>Thu, 03 Dec 2020 11:17:34 +0800</pubDate><guid>https://guoxudong.io/post/homebrew-pull-request/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Homebrew 标榜自己是 &lt;strong>“macOS（或 Linux）缺失的软件包的管理器”&lt;/strong>，使用 macOS 作为开发终端的用户，往往绕不过 &lt;code>brew&lt;/code> 这个软件包管理工具。确实在 macOS 上没有比 &lt;code>brew&lt;/code> 更好用的软件包管理工具了，基本上想用的 CLI 工具，只需一行命令就可一键安装，非常的方便。记得去年博主还写过一篇 &lt;a href="../golang-to-homebrew">《Golang 装逼指南 Ⅱ：在 Homwebrew 上发布 Golang 项目》&lt;/a>，当时只是介绍了如何将 Golang 开发的 CLI 工具发布到自建的 homebrew-tap 上。本文则是讲解如何将自己开发的软件，推送到官方的 &lt;a href="https://github.com/Homebrew/homebrew-core">homebrew-core&lt;/a> 仓库中，使用像 &lt;code>brew install kubecm&lt;/code> 这样的命令即可完成安装。&lt;/p>
&lt;h2 id="homebrew-core">Homebrew-core&lt;/h2>
&lt;p>&lt;a href="https://github.com/Homebrew/homebrew-core">homebrew-core&lt;/a> 中存储着所有官方的安装脚本，而这些安装脚本都是由软件开发者自己提交 PR 合并到仓库中的。同时 homebrew 也提供了查询页面，用户可以在网页 &lt;a href="https://formulae.brew.sh/">Homebrew Formulae&lt;/a> 上查询自己的软件总共被下载安装了多少次，如下：&lt;/p>
&lt;p>&lt;img src="https://tva4.sinaimg.cn/large/ad5fbf65gy1glap8xxcrlj2164204qc9.jpg" alt="kubecm">&lt;/p>
&lt;p>新的项目只需向这个仓库提交 PR 即可。&lt;/p>
&lt;h3 id="准备阶段">准备阶段&lt;/h3>
&lt;p>首先需要在 GitHub 上 fork &lt;a href="https://github.com/Homebrew/homebrew-core">homebrew-core&lt;/a> 项目。&lt;/p>
&lt;p>然后在本地找到保存 homebrew-core 的目录：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#24909d">cd&lt;/span> &lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>brew --repository homebrew/core&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>新增 remote 地址为 fork 仓库的地址：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git remote add &amp;lt;YOUR_USERNAME&amp;gt; https://github.com/&amp;lt;YOUR_USERNAME&amp;gt;/homebrew-core.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 &lt;code>YOUR_USERNAME&lt;/code> 是 GitHub username。&lt;/p>
&lt;h3 id="新建分支">新建分支&lt;/h3>
&lt;p>这里的操作就和向开源项目提交 PR 一样，新建 branch 并创建安装脚本。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout master
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新 master 分支&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从最新的 master 分支创建新 branch&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout -b &amp;lt;YOUR_BRANCH_NAME&amp;gt; origin/master
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编写脚本">编写脚本&lt;/h3>
&lt;p>首先需要使用 &lt;code>brew search &amp;lt;formula&amp;gt;&lt;/code> 来查看上游仓库中是否有同名的项目，同时确保你的项目是稳定版且带有 &lt;code>tag&lt;/code>（不能只是一个 GitHub repo）。&lt;/p>
&lt;p>使用 &lt;code>brew create&lt;/code> 创建一个脚本模板，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew create https://example.com/foo-0.1.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的 URL 地址，就是 GitHub Release 页面的 &lt;code>Source code(tar.gz)&lt;/code> 的 URL 地址。&lt;/p>
&lt;p>打开 &lt;code>Formula/foo.rb&lt;/code> 可以看到：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#6ab825;font-weight:bold">class&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">Foo&lt;/span> &amp;lt; &lt;span style="color:#40ffff">Formula&lt;/span>
desc &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>
homepage &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>
url &lt;span style="color:#ed9d13">&amp;#34;https://example.com/foo-0.1.tar.gz&amp;#34;&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7&amp;#34;&lt;/span>
license &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#999;font-style:italic"># depends_on &amp;#34;cmake&amp;#34; =&amp;gt; :build&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">def&lt;/span> &lt;span style="color:#447fcf">install&lt;/span>
&lt;span style="color:#999;font-style:italic"># ENV.deparallelize&lt;/span>
&lt;span style="color:#24909d">system&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;./configure&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;--disable-debug&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;--disable-dependency-tracking&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;--disable-silent-rules&amp;#34;&lt;/span>,
&lt;span style="color:#ed9d13">&amp;#34;--prefix=&lt;/span>&lt;span style="color:#ed9d13">#{&lt;/span>prefix&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>
&lt;span style="color:#999;font-style:italic"># system &amp;#34;cmake&amp;#34;, &amp;#34;.&amp;#34;, *std_cmake_args&lt;/span>
&lt;span style="color:#24909d">system&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;make&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;install&amp;#34;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#6ab825;font-weight:bold">do&lt;/span>
&lt;span style="color:#24909d">system&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;false&amp;#34;&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后就是完善这个脚本，&lt;code>desc&lt;/code>、&lt;code>homepage&lt;/code>、&lt;code>license&lt;/code> 都请根据项目情况填写。&lt;/p>
&lt;p>如果是 Golang 项目，则需要添加 Go 依赖 &lt;code>depends_on &amp;quot;go&amp;quot; =&amp;gt; :build&lt;/code>，同时在 &lt;code>install&lt;/code> 中完善安装脚本，golang 开发的项目一般都是使用 &lt;code>go build&lt;/code> 来构建。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
与自建 homebrew-tap 不同，向官方提交 PR，需要使用源码构建，不能只推送构建好的二进制文件！同时必须有 test 部分，否则将无法合并代码。
&lt;/div>
&lt;p>这里附上一份 &lt;a href="https://github.com/kubernetes-sigs/kind">kind&lt;/a> 的脚本供大家参考：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#6ab825;font-weight:bold">class&lt;/span> &lt;span style="color:#447fcf;text-decoration:underline">Kind&lt;/span> &amp;lt; &lt;span style="color:#40ffff">Formula&lt;/span>
desc &lt;span style="color:#ed9d13">&amp;#34;Run local Kubernetes cluster in Docker&amp;#34;&lt;/span>
homepage &lt;span style="color:#ed9d13">&amp;#34;https://kind.sigs.k8s.io/&amp;#34;&lt;/span>
url &lt;span style="color:#ed9d13">&amp;#34;https://github.com/kubernetes-sigs/kind/archive/v0.9.0.tar.gz&amp;#34;&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;c154289659a7ef30b301a0787ecfa2e08edaada6059bf5acefe9f3be1e026381&amp;#34;&lt;/span>
license &lt;span style="color:#ed9d13">&amp;#34;Apache-2.0&amp;#34;&lt;/span>
head &lt;span style="color:#ed9d13">&amp;#34;https://github.com/kubernetes-sigs/kind.git&amp;#34;&lt;/span>
bottle &lt;span style="color:#6ab825;font-weight:bold">do&lt;/span>
cellar &lt;span style="color:#ed9d13">:any_skip_relocation&lt;/span>
rebuild &lt;span style="color:#3677a9">1&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;e40a2343bf999585fa4fcb1a1e9b801427e921c098fc3f7e3026c071a0e72520&amp;#34;&lt;/span> =&amp;gt; &lt;span style="color:#ed9d13">:big_sur&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;e5ba99b5f14711e0dcb121a992d74c5ee6c6b0468b27e5200bf796d4987e13c0&amp;#34;&lt;/span> =&amp;gt; &lt;span style="color:#ed9d13">:catalina&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;d52a780ad6af93a2a7c480a41c5178a461b9966ddc1adb66adde8ff3bce15238&amp;#34;&lt;/span> =&amp;gt; &lt;span style="color:#ed9d13">:mojave&lt;/span>
sha256 &lt;span style="color:#ed9d13">&amp;#34;423ea750ae8589d1a199847f746d8e9b5b1f1d81ceff3a9dab2d63f161532588&amp;#34;&lt;/span> =&amp;gt; &lt;span style="color:#ed9d13">:high_sierra&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
depends_on &lt;span style="color:#ed9d13">&amp;#34;go&amp;#34;&lt;/span> =&amp;gt; &lt;span style="color:#ed9d13">:build&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">def&lt;/span> &lt;span style="color:#447fcf">install&lt;/span>
&lt;span style="color:#24909d">system&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;go&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;build&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;-o&amp;#34;&lt;/span>, bin/&lt;span style="color:#ed9d13">&amp;#34;kind&amp;#34;&lt;/span>
prefix.install_metafiles
&lt;span style="color:#999;font-style:italic"># Install bash completion&lt;/span>
output = &lt;span style="color:#40ffff">Utils&lt;/span>.safe_popen_read(&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">#{&lt;/span>bin&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">/kind&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;completion&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;bash&amp;#34;&lt;/span>)
(bash_completion/&lt;span style="color:#ed9d13">&amp;#34;kind&amp;#34;&lt;/span>).write output
&lt;span style="color:#999;font-style:italic"># Install zsh completion&lt;/span>
output = &lt;span style="color:#40ffff">Utils&lt;/span>.safe_popen_read(&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">#{&lt;/span>bin&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">/kind&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;completion&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;zsh&amp;#34;&lt;/span>)
(zsh_completion/&lt;span style="color:#ed9d13">&amp;#34;_kind&amp;#34;&lt;/span>).write output
&lt;span style="color:#999;font-style:italic"># Install fish completion&lt;/span>
output = &lt;span style="color:#40ffff">Utils&lt;/span>.safe_popen_read(&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">#{&lt;/span>bin&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">/kind&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;completion&amp;#34;&lt;/span>, &lt;span style="color:#ed9d13">&amp;#34;fish&amp;#34;&lt;/span>)
(fish_completion/&lt;span style="color:#ed9d13">&amp;#34;kind.fish&amp;#34;&lt;/span>).write output
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;span style="color:#24909d">test&lt;/span> &lt;span style="color:#6ab825;font-weight:bold">do&lt;/span>
&lt;span style="color:#999;font-style:italic"># Should error out as creating a kind cluster requires root&lt;/span>
status_output = shell_output(&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">#{&lt;/span>bin&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">/kind get kubeconfig --name homebrew 2&amp;gt;&amp;amp;1&amp;#34;&lt;/span>, &lt;span style="color:#3677a9">1&lt;/span>)
assert_match &lt;span style="color:#ed9d13">&amp;#34;failed to list clusters&amp;#34;&lt;/span>, status_output
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多内容见&lt;a href="https://docs.brew.sh/Formula-Cookbook">官方文档&lt;/a>。&lt;/p>
&lt;h3 id="检测脚本">检测脚本&lt;/h3>
&lt;p>在脚本完成后，请先进行如下测试，确保测试通过且无任何报错。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew tests
$ brew install --build-from-source &amp;lt;CHANGED_FORMULA&amp;gt;
$ brew &lt;span style="color:#24909d">test&lt;/span> &amp;lt;CHANGED_FORMULA&amp;gt;
$ brew audit --strict &amp;lt;CHANGED_FORMULA&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="提交代码">提交代码&lt;/h3>
&lt;p>在通过所有测试后，就可以提交代码了，需要对每个更改单独提交 PR，且 commit 有格式要求，一般为 &lt;code>&amp;lt;FORMULA_NAME&amp;gt; &amp;lt;NEW_VERSION&amp;gt;&lt;/code> 如 &lt;code>kbecm 0.10.3&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git add Formula/foo.rb
$ git commit -m &lt;span style="color:#ed9d13">&amp;#39;foo 0.0.1&amp;#39;&lt;/span>
$ git push --set-upstream &amp;lt;YOUR_USERNAME&amp;gt; &amp;lt;YOUR_BRANCH_NAME&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里提交后，代码就会 push 到之前 fork 的 &lt;code>homebrew/core&lt;/code> 项目。&lt;/p>
&lt;h3 id="提交-pr">提交 PR&lt;/h3>
&lt;p>之后就可以在 GitHub 页面操作提交 PR 了。项目维护者的响应还是很及时的，在 PR 通过所有 CI test 后，就会有维护者进行 review 并指出需要修改的地方，根据要求修复即可。&lt;/p>
&lt;p>&lt;img src="https://tvax1.sinaimg.cn/large/ad5fbf65gy1glar44n4v3j22t61jck8j.jpg" alt="提交 PR">&lt;/p>
&lt;h2 id="提交新版本">提交新版本&lt;/h2>
&lt;p>PR 合并成功后，如果要发布新版本，这里推荐两种方式提交新版本。&lt;/p>
&lt;h3 id="cli">CLI&lt;/h3>
&lt;p>&lt;code>brew&lt;/code> 提供了十分简单的方式自动创建 PR，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew bump-formula-pr --url https://example.com/foo-0.1.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多的信息可以通过 &lt;code>brew bump-formula-pr --help&lt;/code> 查看。&lt;/p>
&lt;h3 id="github-action">GitHub action&lt;/h3>
&lt;p>这一步也可以在 GitHub action 中自动完成，使用 &lt;a href="https://github.com/marketplace/actions/homebrew-bump-formula">homebrew-bump-formula&lt;/a> 插件。原理其实也是使用了 &lt;code>brew bump-formula-pr&lt;/code>，但是这样就无需手动触发，可以集成到 Release 的 CI 中。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Bump Homebrew kubecm formula&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">on&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">push&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tags&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#39;v*&amp;#39;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">jobs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">homebrew&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">runs-on&lt;/span>:&lt;span style="color:#666"> &lt;/span>ubuntu-latest&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Update Homebrew formula&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">uses&lt;/span>:&lt;span style="color:#666"> &lt;/span>dawidd6/action-homebrew-bump-formula@v3&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">with&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># GitHub token, required, not the default one&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">token&lt;/span>:&lt;span style="color:#666"> &lt;/span>${{secrets.TOKEN}}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Optional, defaults to homebrew/core&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tap&lt;/span>:&lt;span style="color:#666"> &lt;/span>USER/REPO&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Formula name, required&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">formula&lt;/span>:&lt;span style="color:#666"> &lt;/span>FORMULA&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Optional, will be determined automatically&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">tag&lt;/span>:&lt;span style="color:#666"> &lt;/span>${{github.ref}}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Optional, will be determined automatically&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">revision&lt;/span>:&lt;span style="color:#666"> &lt;/span>${{github.sha}}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># Optional, if don&amp;#39;t want to check for already open PRs&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">force&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
这里的 &lt;code>TOKEN&lt;/code> 需要在 &lt;a href="https://github.com/settings/tokens/new?scopes=public_repo">Personal Access Token&lt;/a> 上申请，并手动添加到 repo 的 setting 中。
&lt;img src="https://tva2.sinaimg.cn/large/ad5fbf65gy1glarq5rc3bj2258122n2n.jpg" alt="TOKEN">
&lt;/div>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>总的来说，这一套流程都比较简单，笔者也只是在 GitHub action 的 &lt;code>TOKEN&lt;/code> 上浪费了一些时间。使用 &lt;code>brew&lt;/code> 不但简化了安装步骤，提升了用户体验，还可以把诸如 &lt;code>completion&lt;/code> 命令生成的自动补全脚本在安装时就注入到系统中，无需在装好后再进行其他操作，体验极佳。&lt;/p></description></item></channel></rss>