<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guo Xudong&#39;s Blog·郭旭东的博客 – Guo Xudong&#39;s Blog</title>
    <link>https://guoxudong.io/</link>
    <description>Recent content in Guo Xudong&#39;s Blog on Guo Xudong&#39;s Blog·郭旭东的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    
	  <atom:link href="https://guoxudong.io/index.xml" rel="self" type="application/rss+xml" />
    
    
      
      
    
    
    <item>
      <title>Post: 将项目发布到 Homebrew 官方仓库</title>
      <link>https://guoxudong.io/post/homebrew-pull-request/</link>
      <pubDate>Thu, 03 Dec 2020 11:17:34 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/homebrew-pull-request/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Homebrew 标榜自己是 &lt;strong&gt;“macOS（或 Linux）缺失的软件包的管理器”&lt;/strong&gt;，使用 macOS 作为开发终端的用户，往往绕不过 &lt;code&gt;brew&lt;/code&gt; 这个软件包管理工具。确实在 macOS 上没有比 &lt;code&gt;brew&lt;/code&gt; 更好用的软件包管理工具了，基本上想用的 CLI 工具，只需一行命令就可一键安装，非常的方便。记得去年博主还写过一篇 &lt;a href=&#34;../golang-to-homebrew&#34;&gt;《Golang 装逼指南 Ⅱ：在 Homwebrew 上发布 Golang 项目》&lt;/a&gt;，当时只是介绍了如何将 Golang 开发的 CLI 工具发布到自建的 homebrew-tap 上。本文则是讲解如何将自己开发的软件，推送到官方的 &lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34;&gt;homebrew-core&lt;/a&gt; 仓库中，使用像 &lt;code&gt;brew install kubecm&lt;/code&gt; 这样的命令即可完成安装。&lt;/p&gt;
&lt;h2 id=&#34;homebrew-core&#34;&gt;Homebrew-core&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34;&gt;homebrew-core&lt;/a&gt; 中存储着所有官方的安装脚本，而这些安装脚本都是由软件开发者自己提交 PR 合并到仓库中的。同时 homebrew 也提供了查询页面，用户可以在网页 &lt;a href=&#34;https://formulae.brew.sh/&#34;&gt;Homebrew Formulae&lt;/a&gt; 上查询自己的软件总共被下载安装了多少次，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1glap8xxcrlj2164204qc9.jpg&#34; alt=&#34;kubecm&#34;&gt;&lt;/p&gt;
&lt;p&gt;新的项目只需向这个仓库提交 PR 即可。&lt;/p&gt;
&lt;h3 id=&#34;准备阶段&#34;&gt;准备阶段&lt;/h3&gt;
&lt;p&gt;首先需要在 GitHub 上 fork &lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34;&gt;homebrew-core&lt;/a&gt; 项目。&lt;/p&gt;
&lt;p&gt;然后在本地找到保存 homebrew-core 的目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;brew --repository homebrew/core&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新增 remote 地址为 fork 仓库的地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git remote add &amp;lt;YOUR_USERNAME&amp;gt; https://github.com/&amp;lt;YOUR_USERNAME&amp;gt;/homebrew-core.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 &lt;code&gt;YOUR_USERNAME&lt;/code&gt; 是 GitHub username。&lt;/p&gt;
&lt;h3 id=&#34;新建分支&#34;&gt;新建分支&lt;/h3&gt;
&lt;p&gt;这里的操作就和向开源项目提交 PR 一样，新建 branch 并创建安装脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新 master 分支&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从最新的 master 分支创建新 branch&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout -b &amp;lt;YOUR_BRANCH_NAME&amp;gt; origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编写脚本&#34;&gt;编写脚本&lt;/h3&gt;
&lt;p&gt;首先需要使用 &lt;code&gt;brew search &amp;lt;formula&amp;gt;&lt;/code&gt; 来查看上游仓库中是否有同名的项目，同时确保你的项目是稳定版且带有 &lt;code&gt;tag&lt;/code&gt;（不能只是一个 GitHub repo）。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;brew create&lt;/code&gt; 创建一个脚本模板，命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew create https://example.com/foo-0.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 URL 地址，就是 GitHub Release 页面的 &lt;code&gt;Source code(tar.gz)&lt;/code&gt; 的 URL 地址。&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;Formula/foo.rb&lt;/code&gt; 可以看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;Foo&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#40ffff&#34;&gt;Formula&lt;/span&gt;
  desc &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  homepage &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  url &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://example.com/foo-0.1.tar.gz&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;85cc828a96735bdafcf29eb6291ca91bac846579bcef7308536e0c875d6c81d7&amp;#34;&lt;/span&gt;
  license &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# depends_on &amp;#34;cmake&amp;#34; =&amp;gt; :build&lt;/span&gt;

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;install&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ENV.deparallelize&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./configure&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-debug&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-dependency-tracking&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-silent-rules&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--prefix=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;prefix&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# system &amp;#34;cmake&amp;#34;, &amp;#34;.&amp;#34;, *std_cmake_args&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就是完善这个脚本，&lt;code&gt;desc&lt;/code&gt;、&lt;code&gt;homepage&lt;/code&gt;、&lt;code&gt;license&lt;/code&gt; 都请根据项目情况填写。&lt;/p&gt;
&lt;p&gt;如果是 Golang 项目，则需要添加 Go 依赖 &lt;code&gt;depends_on &amp;quot;go&amp;quot; =&amp;gt; :build&lt;/code&gt;，同时在 &lt;code&gt;install&lt;/code&gt; 中完善安装脚本，golang 开发的项目一般都是使用 &lt;code&gt;go build&lt;/code&gt; 来构建。&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
与自建 homebrew-tap 不同，向官方提交 PR，需要使用源码构建，不能只推送构建好的二进制文件！同时必须有 test 部分，否则将无法合并代码。
&lt;/div&gt;

&lt;p&gt;这里附上一份 &lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34;&gt;kind&lt;/a&gt; 的脚本供大家参考：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;Kind&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#40ffff&#34;&gt;Formula&lt;/span&gt;
  desc &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Run local Kubernetes cluster in Docker&amp;#34;&lt;/span&gt;
  homepage &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://kind.sigs.k8s.io/&amp;#34;&lt;/span&gt;
  url &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://github.com/kubernetes-sigs/kind/archive/v0.9.0.tar.gz&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;c154289659a7ef30b301a0787ecfa2e08edaada6059bf5acefe9f3be1e026381&amp;#34;&lt;/span&gt;
  license &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Apache-2.0&amp;#34;&lt;/span&gt;
  head &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://github.com/kubernetes-sigs/kind.git&amp;#34;&lt;/span&gt;

  bottle &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt;
    cellar &lt;span style=&#34;color:#ed9d13&#34;&gt;:any_skip_relocation&lt;/span&gt;
    rebuild &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
    sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;e40a2343bf999585fa4fcb1a1e9b801427e921c098fc3f7e3026c071a0e72520&amp;#34;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;:big_sur&lt;/span&gt;
    sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;e5ba99b5f14711e0dcb121a992d74c5ee6c6b0468b27e5200bf796d4987e13c0&amp;#34;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;:catalina&lt;/span&gt;
    sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;d52a780ad6af93a2a7c480a41c5178a461b9966ddc1adb66adde8ff3bce15238&amp;#34;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;:mojave&lt;/span&gt;
    sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;423ea750ae8589d1a199847f746d8e9b5b1f1d81ceff3a9dab2d63f161532588&amp;#34;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;:high_sierra&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;

  depends_on &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;:build&lt;/span&gt;

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;install&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, bin/&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;
    prefix.install_metafiles

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Install bash completion&lt;/span&gt;
    output = &lt;span style=&#34;color:#40ffff&#34;&gt;Utils&lt;/span&gt;.safe_popen_read(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;bin&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;completion&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;)
    (bash_completion/&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;).write output

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Install zsh completion&lt;/span&gt;
    output = &lt;span style=&#34;color:#40ffff&#34;&gt;Utils&lt;/span&gt;.safe_popen_read(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;bin&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;completion&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;zsh&amp;#34;&lt;/span&gt;)
    (zsh_completion/&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;_kind&amp;#34;&lt;/span&gt;).write output

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Install fish completion&lt;/span&gt;
    output = &lt;span style=&#34;color:#40ffff&#34;&gt;Utils&lt;/span&gt;.safe_popen_read(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;bin&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/kind&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;completion&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fish&amp;#34;&lt;/span&gt;)
    (fish_completion/&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kind.fish&amp;#34;&lt;/span&gt;).write output
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Should error out as creating a kind cluster requires root&lt;/span&gt;
    status_output = shell_output(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;bin&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;/kind get kubeconfig --name homebrew 2&amp;gt;&amp;amp;1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
    assert_match &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;failed to list clusters&amp;#34;&lt;/span&gt;, status_output
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多内容见&lt;a href=&#34;https://docs.brew.sh/Formula-Cookbook&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;检测脚本&#34;&gt;检测脚本&lt;/h3&gt;
&lt;p&gt;在脚本完成后，请先进行如下测试，确保测试通过且无任何报错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew tests
$ brew install --build-from-source &amp;lt;CHANGED_FORMULA&amp;gt;
$ brew &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &amp;lt;CHANGED_FORMULA&amp;gt;
$ brew audit --strict &amp;lt;CHANGED_FORMULA&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;提交代码&#34;&gt;提交代码&lt;/h3&gt;
&lt;p&gt;在通过所有测试后，就可以提交代码了，需要对每个更改单独提交 PR，且 commit 有格式要求，一般为 &lt;code&gt;&amp;lt;FORMULA_NAME&amp;gt; &amp;lt;NEW_VERSION&amp;gt;&lt;/code&gt; 如 &lt;code&gt;kbecm 0.10.3&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git add Formula/foo.rb
$ git commit -m &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;foo 0.0.1&amp;#39;&lt;/span&gt;
$ git push --set-upstream &amp;lt;YOUR_USERNAME&amp;gt; &amp;lt;YOUR_BRANCH_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里提交后，代码就会 push 到之前 fork 的 &lt;code&gt;homebrew/core&lt;/code&gt; 项目。&lt;/p&gt;
&lt;h3 id=&#34;提交-pr&#34;&gt;提交 PR&lt;/h3&gt;
&lt;p&gt;之后就可以在 GitHub 页面操作提交 PR 了。项目维护者的响应还是很及时的，在 PR 通过所有 CI test 后，就会有维护者进行 review 并指出需要修改的地方，根据要求修复即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1glar44n4v3j22t61jck8j.jpg&#34; alt=&#34;提交 PR&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;提交新版本&#34;&gt;提交新版本&lt;/h2&gt;
&lt;p&gt;PR 合并成功后，如果要发布新版本，这里推荐两种方式提交新版本。&lt;/p&gt;
&lt;h3 id=&#34;cli&#34;&gt;CLI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew&lt;/code&gt; 提供了十分简单的方式自动创建 PR，命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew bump-formula-pr --url https://example.com/foo-0.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多的信息可以通过 &lt;code&gt;brew bump-formula-pr --help&lt;/code&gt; 查看。&lt;/p&gt;
&lt;h3 id=&#34;github-action&#34;&gt;GitHub action&lt;/h3&gt;
&lt;p&gt;这一步也可以在 GitHub action 中自动完成，使用 &lt;a href=&#34;https://github.com/marketplace/actions/homebrew-bump-formula&#34;&gt;homebrew-bump-formula&lt;/a&gt; 插件。原理其实也是使用了 &lt;code&gt;brew bump-formula-pr&lt;/code&gt;，但是这样就无需手动触发，可以集成到 Release 的 CI 中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Bump&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Homebrew&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kubecm&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;formula&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;push&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tags&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;v*&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;jobs&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;homebrew&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;runs-on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ubuntu-latest&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;steps&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Update&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Homebrew&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;formula&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;uses&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dawidd6/action-homebrew-bump-formula@v3&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;with&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# GitHub token, required, not the default one&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;${{secrets.TOKEN}}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Optional, defaults to homebrew/core&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tap&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;USER/REPO&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Formula name, required&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;formula&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;FORMULA&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Optional, will be determined automatically&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;${{github.ref}}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Optional, will be determined automatically&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;revision&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;${{github.sha}}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Optional, if don&amp;#39;t want to check for already open PRs&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;force&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
这里的 &lt;code&gt;TOKEN&lt;/code&gt; 需要在 &lt;a href=&#34;https://github.com/settings/tokens/new?scopes=public_repo&#34;&gt;Personal Access Token&lt;/a&gt; 上申请，并手动添加到 repo 的 setting 中。
&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1glarq5rc3bj2258122n2n.jpg&#34; alt=&#34;TOKEN&#34;&gt;
&lt;/div&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;总的来说，这一套流程都比较简单，笔者也只是在 GitHub action 的 &lt;code&gt;TOKEN&lt;/code&gt; 上浪费了一些时间。使用 &lt;code&gt;brew&lt;/code&gt; 不但简化了安装步骤，提升了用户体验，还可以把诸如 &lt;code&gt;completion&lt;/code&gt; 命令生成的自动补全脚本在安装时就注入到系统中，无需在装好后再进行其他操作，体验极佳。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: K3d vs Kind 谁更适合本地研发</title>
      <link>https://guoxudong.io/post/k3d-vs-kind/</link>
      <pubDate>Wed, 18 Nov 2020 09:44:37 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/k3d-vs-kind/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着 Kubernetes 及其周边生态的发展壮大，新项目层出不穷，越来越多的开发者加入到了开发云原生应用的行列。随之而来的，就是 Kubernetes 极高的复杂度和研发人员想要快速开发云原生应用之间的矛盾。为了解决这个矛盾，同时也为了降低学习 Kubernetes 的门槛，社区出现了各种各样的解决方案。如 minikube 用于生成一个单节点的 k8s VM，而 katacoda 则是在 web 端提供交互式的 k8s 操作教程。&lt;/p&gt;
&lt;p&gt;在这些方案中，最有意思的一类方案是使用 docker 运行整个 k8s 集群，以极高的启动速度、极低的使用成本以及简单的操作深受广大开发者欢迎，并广泛应用于各种云原生应用开发和 e2e 测试中。其中最具代表性的就是 &lt;a href=&#34;https://kind.sigs.k8s.io/&#34;&gt;Kubernetes SIGs 项目 Kind&lt;/a&gt; 和 &lt;a href=&#34;https://k3d.io/&#34;&gt;Rancher Lab 开源的 k3d&lt;/a&gt;。在这篇文章中，我们就来探究一下这两个项目在本地开发侧的优缺点，站在一个开发者的的角度看看使用哪个项目更能提升我们的效率。&lt;/p&gt;
&lt;h2 id=&#34;kind&#34;&gt;Kind&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/wap360/ad5fbf65gy1gkt56jeqr7j20rd0gimz7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kind 顾名思义 Kubernetes in docker，是一个使用 docker 容器在本地运行 Kubernetes 集群的工具。其本身就是为了测试 Kubernetes 而设计，所以天生就和 CI 紧密关联，广泛应用于各种云原生项目的 CI 中，同时因为其可以快速拉起集群和操作简单，深受开发者喜爱，可谓是“有 Kind 不思 Minikube”。&lt;/p&gt;
&lt;p&gt;Kind 使用 kubeadm 进行集群的创建，内部使用 containerd 运行组件容器，可以通过指定配置文件 &lt;code&gt;config.yaml&lt;/code&gt; 来拉起相应配置的集群，支持多节点集群，同时也可以把本地的镜像加载到集群中，实现测试镜像无需上传镜像仓库的功能。并且之前国内拉取不到镜像的问题已经解决，直接在 dockerhub 拉取 &lt;code&gt;kindest/node&lt;/code&gt; 镜像，镜像中均已包含创建 Kubernetes 集群所需的全部资源，无需再额外下载。&lt;/p&gt;
&lt;h2 id=&#34;k3d&#34;&gt;K3d&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/wap360/ad5fbf65gy1gkt5pu3ifhj21s00ocaef.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与 Kind 类似，K3d 是使用 docker 容器在本地运行 k3s 集群，k3s 是由 Rancher Lab 开源的轻量级 Kubernetes。k3d 完美继承了 k3s 的简单、快速和占用资源少的优势，镜像大小只有 100 多 M，启动速度快，支持多节点集群。虽然 k3s 对 Kubernetes 进行了轻量化的裁剪，但是提供了完整了功能，像 Istio 这样复杂的云原生应用都可以在 k3s 上顺利运行。&lt;/p&gt;
&lt;p&gt;K3d 同时也有着自己的优势，除了启动速度快和占用资源少以外，在边缘计算和嵌入式领域也有着不俗的表现。因为 k3s 本身应用场景主要在边缘侧，所以支持的设备和架构很多，如：ARM64 和 ARMv7 处理器。很多老旧 PC 和树莓派这样的设备都可以拿来做成 k3s 集群，为本地研发测试燃尽最后的生命。&lt;/p&gt;
&lt;h2 id=&#34;kind-vs-k3d&#34;&gt;Kind vs K3d&lt;/h2&gt;
&lt;p&gt;下面就对 Kind 和 K3s 的进行一些简单的对比，对比数据均来自同一台 macbook pro，使用相同的资源进行。采用目前最新版本，版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k3d v3.2.1&lt;/li&gt;
&lt;li&gt;kind v0.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工具安装&#34;&gt;工具安装&lt;/h3&gt;
&lt;p&gt;K3d 和 Kind 均支持使用 &lt;code&gt;brew&lt;/code&gt; 安装，且均在安装时自动注入命令补全 &lt;code&gt;completion&lt;/code&gt; 脚本，安装好之后即可实现按 &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; 自动补全命令，无需手动操作，体验极佳。&lt;/p&gt;
&lt;h3 id=&#34;本地镜像注入&#34;&gt;本地镜像注入&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;k3d image import&lt;/code&gt; 和 &lt;code&gt;kind load&lt;/code&gt; 命令均可将本地镜像注入集群且均支持注入 docker 镜像或镜像文件。&lt;/p&gt;
&lt;h3 id=&#34;base-镜像大小&#34;&gt;base 镜像大小&lt;/h3&gt;
&lt;p&gt;本项 k3s 完胜，由于 k3s 本身就是轻量级的 Kubernetes，所以镜像极小，大小还没有 Kind base 镜像 &lt;code&gt;kindest/node&lt;/code&gt; 的零头大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gkta0t5u1mj20sk023q5p.jpg&#34; alt=&#34;镜像大小比较&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;启动速度&#34;&gt;启动速度&lt;/h3&gt;
&lt;p&gt;这里的启动速度排除了镜像拉取的时间，两者的镜像均已拉取到本地，且启动的均为默认配置的集群。&lt;/p&gt;
&lt;p&gt;k3d 启动时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gkta5bjvuhj20gp03radf.jpg&#34; alt=&#34;k3d 启动时间&#34;&gt;&lt;/p&gt;
&lt;p&gt;kind 启动时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gkta5meujxj20hz06a79q.jpg&#34; alt=&#34;kind 启动时间&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到还是 k3s 的启动速度要快于 Kind，因为 k3s 本身就是主打轻量级和快速启动，但 kind 的启动速度也很快，耗时均在本地用户的可接受范围内。&lt;/p&gt;
&lt;h3 id=&#34;资源占用&#34;&gt;资源占用&lt;/h3&gt;
&lt;p&gt;这里对比的两个集群均是默认配置，无运行任何其他组件和服务。同样 k3d 占用的资源更少，但总体都没有超出不可承受的范围。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gktaadtyvqj20ul01rdik.jpg&#34; alt=&#34;资源占用&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ingress&#34;&gt;ingress&lt;/h3&gt;
&lt;p&gt;这项更偏向使用者的体验，k3s 自带了 traefik 作为 Ingress Controller 开箱即用，用户如果不想关心使用什么 ingress 可以无需关心，直接上手使用。而 Kind 则没有预装 Ingress Controller，如果需要使用则需要手动部署。&lt;/p&gt;
&lt;h3 id=&#34;架构支持&#34;&gt;架构支持&lt;/h3&gt;
&lt;p&gt;Kind 目前只支持 x86 的 CPU 架构，而 k3d 则支持  x86、ARM64 和 ARMv7，如果想在使用 M1 芯片的新 MacBook 或在有 ARM 架构 CPU 的 PC 上使用，暂时只能使用 k3d。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过对比可以看出 k3d 和 kind 的相似点很多，但两方的使用场景还是略有差别。Kind 更贴近原生 Kubernetes，适合用于开发测试 Kubernetes 原生组件、资源比较充沛的开发者；而 K3s 则更适合边缘计算场景应用开发、资源紧张、使用非 x86 CPU 架构设备的开发者。如果你只是想学习 Kubernetes 集群的操作、各种资源的使用、Kubernetes 相关项目的尝鲜，则这两个工具都是不错的选择。&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
两者都是为了方便测试 kubernetes 集群,切不可用于生产环境。
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Post: Teambition 网盘 VS 阿里云盘：阿里这个浓眉大眼的也开始玩赛马了？</title>
      <link>https://guoxudong.io/post/teambition-disk-vs-aliyun-disk/</link>
      <pubDate>Wed, 11 Nov 2020 11:23:40 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/teambition-disk-vs-aliyun-disk/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在之前的文章&lt;a href=&#34;../alibaba-teambition-disk/&#34;&gt;《试用阿里网盘内测版-不限速、无广告、隐私安全我全都要》&lt;/a&gt;中笔者分享了阿里巴巴旗下 Teambition 网盘的内测试用体验。就在文章发布的当天，机缘巧合笔者获得了阿里巴巴另一款网盘产品：「&lt;strong&gt;阿里云盘&lt;/strong&gt;」的 ”个人云种子用户“ 邀请码。惊奇的发现原来阿里巴巴同时存在两款不同的网盘产品，分别属于 &lt;strong&gt;Teambition 团队&lt;/strong&gt;和&lt;strong&gt;阿里云基础产品事业部的智能存储团队&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/wap800/ad5fbf65gy1gkl3hrdu81j20k80z27ii.jpg&#34; alt=&#34;个人云种子用户邀请页&#34;&gt;&lt;/p&gt;
&lt;p&gt;一直以来，最为大众所知的是腾讯的赛马机制，如微信、王者荣耀都是这个机制的产物，而阿里的赛马机制鲜有人提。但据公开的信息显示，阿里内部其实早就存在了这一机制，只是笔者没有关注到而已。本文并不对这一机制做过多评价，而是着力于这两个网盘产品的使用体验，以一个网盘使用者的视角对比这两个产品的特点与差异。&lt;/p&gt;
&lt;h2 id=&#34;阿里云盘&#34;&gt;阿里云盘&lt;/h2&gt;
&lt;p&gt;早在今年8月份&lt;a href=&#34;https://www.aliyundrive.com/&#34;&gt;阿里云盘&lt;/a&gt;就开放了下载试用（当时的测试用户可以拿到 6T 的 VIP 容量），但当笔者注意到时已经从 Apple Store 下架。而在10月底又再度上架 Apple Store（然而笔者已经换了安卓）并开始发放邀请码，这次笔者没有错过试用机会，下载并注册了阿里云盘 APP，但存储空间只有 1T 了，这个存储空间应该就是免费提供给用户的空间大小。&lt;/p&gt;
&lt;p&gt;阿里云盘目前只有 IOS 和安卓的 APP，Windows 和 Mac 端暂时没有上线，并且也没有 web 端可以登录。官网极端的简洁，宛如一个直男&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gkl80aczdnj21h70q67wh.jpg&#34; alt=&#34;阿里云盘官网&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;阿里云盘-vs-teambition-网盘&#34;&gt;阿里云盘 vs Teambition 网盘&lt;/h2&gt;
&lt;p&gt;与 Teambition 相比，阿里云盘 APP 的界面也十分直男，阿里橙搭配极简的风格组成了 APP 的整个页面。与 Teambition 不同，阿里云盘更贴近手机用户，其中的相册功能可以快速浏览网盘中的照片，同时也提供了手机相册同步功能，可以非常简单的同步手机相册到网盘。&lt;/p&gt;
&lt;p&gt;比较有意思的是「虎符保险箱」这个功能，可以在 APP 内再设置一层密码，用来保存隐私文件。分享功能分为口令分享和私密连接，很遗憾和 Teambition 一样，也是暂时不可用。&lt;/p&gt;
&lt;p&gt;与 Teambition 相同的是上传下载同样不限速，实测都可以达到宽带提供的最大速率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/wap800/ad5fbf65ly1gkl84rikc7j20u01t0403.jpg&#34; alt=&#34;APP 页面&#34;&gt;&lt;/p&gt;
&lt;p&gt;不难发现，Teambition 网盘和阿里云盘的策略还是有差异的，Teambition 更强调协作，并且和 Teambition 产品绑定，没有独立的 APP；而阿里云盘则从手机用户入手，有独立的 APP 且操作更为丝滑。同样是没有 Windows 和 Mac 端，但 Teambition 提供了 web 端，而阿里云盘的手机操作体验更佳，也算是各有千秋。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;可以看出两个产品同样都处在比较早期的阶段，并没有如在线解压、微信备份、文件格式转换等功能，还不是成熟的网盘产品，但核心的存储与上传下载功能都比较优秀，很有竞争力。&lt;/p&gt;
&lt;p&gt;随着阿里的入局，为本已如同一潭死水般的网盘市场带来一丝竞争的活力，为用户提供了更多选择的空间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：Teambition 团队和阿里云盘团队都在疯狂招人，阿里云盘更是在内网放出话说现在内推可以拿终身会员，有兴趣的朋友可以去尝试一下：）&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 熟悉又陌生的 k8s 字段：SecurityContext</title>
      <link>https://guoxudong.io/post/k8s-securitycontext/</link>
      <pubDate>Wed, 04 Nov 2020 11:54:04 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/k8s-securitycontext/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;如果要投票在 Kubernetes 中很重要，但又最容易被初学者忽略的字段，那么我一定投给 &lt;code&gt;SecurityContext&lt;/code&gt;。从 Security Context（安全上下文）的名字就可得知它和安全有关，那么它是如何控制容器安全的？又是如何实现的？本文我们就来探索一下 &lt;code&gt;SecurityContext&lt;/code&gt; 这个字段。&lt;/p&gt;
&lt;h2 id=&#34;securitycontext&#34;&gt;SecurityContext&lt;/h2&gt;
&lt;p&gt;安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。安全上下文包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制（Discretionary Access Control）：基于&lt;code&gt;用户 ID（UID）&lt;/code&gt;和&lt;code&gt;组 ID（GID）&lt;/code&gt;来判定对对象（例如文件）的访问权限。&lt;/li&gt;
&lt;li&gt;安全性增强的 Linux（SELinux）：为对象赋予安全性标签。&lt;/li&gt;
&lt;li&gt;以特权模式或者非特权模式运行。&lt;/li&gt;
&lt;li&gt;Linux 权能：为进程赋予 root 用户的部分特权而非全部特权。&lt;/li&gt;
&lt;li&gt;AppArmor：使用程序框架来限制个别程序的权能。&lt;/li&gt;
&lt;li&gt;Seccomp：过滤进程的系统调用。&lt;/li&gt;
&lt;li&gt;AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 &lt;code&gt;no_new_privs&lt;/code&gt; 标志。当容器以特权模式运行或者具有 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 权能时，AllowPrivilegeEscalation 总是为 &lt;code&gt;true&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;readOnlyRootFilesystem：以只读方式加载容器的根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SecurityContext 可以应用于 Container 和 Pod 维度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Pod 上设置的安全性配置会应用到 Pod 中所有 Container 上，并且会还会影响 Volume&lt;/li&gt;
&lt;li&gt;在 Container 上设置的安全性配置仅适用于该容器本身，不会影响到其他容器以及 Pod 的 Volume&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;上面的介绍来自官方文档，理解起来并不轻松，但总体思想是确定的：&lt;strong&gt;遵循权限最小化原则，除了业务运行所必需的系统权限，去除不必的其他权限&lt;/strong&gt;。下面是笔者总结出的一些常见应用场景来帮助理解 &lt;code&gt;SecurityContext&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;自定义对象访问权限&#34;&gt;自定义对象访问权限&lt;/h3&gt;
&lt;p&gt;也就是上文中提到的&lt;strong&gt;自主访问控制（Discretionary Access Control）&lt;/strong&gt;，通过设置 UID 和 GID 来达到限制容器权限的目的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;securityContext&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;runAsUser&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;runAsGroup&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;3000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;fsGroup&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;2000&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上这个配置，可以看到 Pod 中所有容器内的进程都是已用户 &lt;code&gt;uid=1000&lt;/code&gt; 和主组 &lt;code&gt;gid=3000&lt;/code&gt;来运行的，而创建的任何文件的属组都是 &lt;code&gt;groups=2000&lt;/code&gt;。通过这样的方法，可以达到让用户的进程不使用默认的 Root （&lt;code&gt;uid=0,gid=0&lt;/code&gt;）权限的目的。&lt;/p&gt;
&lt;h3 id=&#34;禁止容器以-root-身份运行&#34;&gt;禁止容器以 Root 身份运行&lt;/h3&gt;
&lt;p&gt;如果 &lt;code&gt;runAsNonRoot&lt;/code&gt; 字段配置为 &lt;code&gt;true&lt;/code&gt;，kubelet 在启动容器时会进行检查，如果以 UID 为 0 运行，则禁止容器启动，该 Pod 的 STATUS 变为 &lt;code&gt;CreateContainerConfigError&lt;/code&gt;，并生成 Warning 类型事件 &lt;code&gt;Error: container has runAsNonRoot and image will run as root&lt;/code&gt;。只有当设置 &lt;code&gt;runAsUser&lt;/code&gt; 或者镜像本身就不是以 Root 身份运行时，该 Pod 才能正常启动。&lt;/p&gt;
&lt;h3 id=&#34;系统-capabilities-的控制&#34;&gt;系统 Capabilities 的控制&lt;/h3&gt;
&lt;p&gt;在某些时候，用户进程需要使用到 Root 用户的某些特权，但是又不想将全部特权都放给容器，这里就用到了 Linux Capabilities，用户可以在在 Container 的 &lt;code&gt;securityContext&lt;/code&gt; 字段中添加 &lt;code&gt;capabilities&lt;/code&gt; 字段。在 &lt;code&gt;capabilities&lt;/code&gt; 字段中，可以添加或移除容器的 Capabilities。&lt;/p&gt;
&lt;p&gt;更多关于 Capabilites 的内容可以在 &lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;capabilities man page &lt;/a&gt; 中查看。&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
Linux Capabilities 的定义的形式为 &lt;code&gt;CAP_XXX&lt;/code&gt;。但是你在 Container 字段使用时，需要将名称中的 &lt;code&gt;CAP_&lt;/code&gt; 部分去掉。例如，要添加 &lt;code&gt;CAP_SYS_TIME&lt;/code&gt;，可在 &lt;code&gt;capabilities&lt;/code&gt; 列表中添加 &lt;code&gt;SYS_TIME&lt;/code&gt;。
&lt;/div&gt;

&lt;h3 id=&#34;只读访问根文件系统&#34;&gt;只读访问根文件系统&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;readOnlyRootFilesystem&lt;/code&gt; 字段，可以配阻止对容器根目录的写入，也十分的实用。&lt;/p&gt;
&lt;h3 id=&#34;selinux&#34;&gt;SELinux&lt;/h3&gt;
&lt;p&gt;可以通过 SELinux 的策略配置控制用户，进程等对文件等访问控制。若要给 Container 设置 SELinux 标签，可以在 Pod 或 Container 清单的 &lt;code&gt;securityContext&lt;/code&gt; 中包含的 &lt;code&gt;seLinuxOptions&lt;/code&gt; 字段进行设置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;seLinuxOptions&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;level&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;s0:c123,c456&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
要指定 SELinux，需要在宿主操作系统中装载 SELinux 安全性模块。
&lt;/div&gt;

&lt;h2 id=&#34;源码分析&#34;&gt;源码分析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SecurityContext&lt;/code&gt; 功能的实现更多是通过 runtime 来完成，kubelet 侧多是进行一些判断，将 &lt;code&gt;SecurityContext&lt;/code&gt; 参数传递给 CRI。&lt;/p&gt;
&lt;h3 id=&#34;禁止容器以-root-身份运行-1&#34;&gt;禁止容器以 Root 身份运行&lt;/h3&gt;
&lt;p&gt;kubelet 在创建容器时，会调用 &lt;code&gt;generateContainerConfig()&lt;/code&gt; 方法来获取容器的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/kubelet/kuberuntime/kuberuntime_container.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (m *kubeGenericRuntimeManager) &lt;span style=&#34;color:#447fcf&#34;&gt;generateContainerConfig&lt;/span&gt;(container *v1.Container, pod *v1.Pod, restartCount &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;, podIP, imageRef &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, podIPs []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, nsTarget *kubecontainer.ContainerID) (*runtimeapi.ContainerConfig, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(), &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
  ...
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Verify RunAsNonRoot. Non-root verification only supports numeric user.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err := &lt;span style=&#34;color:#447fcf&#34;&gt;verifyRunAsNonRoot&lt;/span&gt;(pod, container, uid, username); err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, cleanupAction, err
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而验证 &lt;code&gt;RunAsNonRoot&lt;/code&gt; 配置的就是 &lt;code&gt;verifyRunAsNonRoot()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// verifyRunAsNonRoot verifies RunAsNonRoot.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;verifyRunAsNonRoot&lt;/span&gt;(pod *v1.Pod, container *v1.Container, uid *&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int64&lt;/span&gt;, username &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt; {
  effectiveSc := securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;DetermineEffectiveSecurityContext&lt;/span&gt;(pod, container)
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// If the option is not set, or if running as root is allowed, return nil.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; effectiveSc == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; || effectiveSc.RunAsNonRoot == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; || !*effectiveSc.RunAsNonRoot {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
  }

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; effectiveSc.RunAsUser != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; *effectiveSc.RunAsUser == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;container&amp;#39;s runAsUser breaks non-root policy (pod: %q, container: %s)&amp;#34;&lt;/span&gt;, format.&lt;span style=&#34;color:#447fcf&#34;&gt;Pod&lt;/span&gt;(pod), container.Name)
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
  }

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;switch&lt;/span&gt; {
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; uid != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; *uid == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;container has runAsNonRoot and image will run as root (pod: %q, container: %s)&amp;#34;&lt;/span&gt;, format.&lt;span style=&#34;color:#447fcf&#34;&gt;Pod&lt;/span&gt;(pod), container.Name)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; uid == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(username) &amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;container has runAsNonRoot and image has non-numeric user (%s), cannot verify user is non-root (pod: %q, container: %s)&amp;#34;&lt;/span&gt;, username, format.&lt;span style=&#34;color:#447fcf&#34;&gt;Pod&lt;/span&gt;(pod), container.Name)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;default&lt;/span&gt;:
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的抛错是不是很眼熟？如果 uid 为 0 则返回我们上面说到的 &lt;code&gt;container has runAsNonRoot and image will run as root&lt;/code&gt; 错误，并且阻止容器创建。&lt;/p&gt;
&lt;h3 id=&#34;获取有效-securitycontext&#34;&gt;获取有效 SecurityContext&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;determineEffectiveSecurityContext()&lt;/code&gt; 方法用来确定 Pod 和 Container 中有效的 SecurityContext。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/kubelet/kuberuntime/security_context.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (m *kubeGenericRuntimeManager) &lt;span style=&#34;color:#447fcf&#34;&gt;determineEffectiveSecurityContext&lt;/span&gt;(pod *v1.Pod, container *v1.Container, uid *&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int64&lt;/span&gt;, username &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) *runtimeapi.LinuxContainerSecurityContext {
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 合成有效的 SecurityContext，如果 Pod 和 Container 都设置了，则 Container 优先
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  effectiveSc := securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;DetermineEffectiveSecurityContext&lt;/span&gt;(pod, container)
  synthesized := &lt;span style=&#34;color:#447fcf&#34;&gt;convertToRuntimeSecurityContext&lt;/span&gt;(effectiveSc)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; synthesized == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    synthesized = &amp;amp;runtimeapi.LinuxContainerSecurityContext{
      MaskedPaths:   securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;ConvertToRuntimeMaskedPaths&lt;/span&gt;(effectiveSc.ProcMount),
      ReadonlyPaths: securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;ConvertToRuntimeReadonlyPaths&lt;/span&gt;(effectiveSc.ProcMount),
    }
  }

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 设置 SeccompProfilePath.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.SeccompProfilePath = m.&lt;span style=&#34;color:#447fcf&#34;&gt;getSeccompProfile&lt;/span&gt;(pod.Annotations, container.Name, pod.Spec.SecurityContext, container.SecurityContext)

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 设置 ApparmorProfile.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.ApparmorProfile = apparmor.&lt;span style=&#34;color:#447fcf&#34;&gt;GetProfileNameFromPodAnnotations&lt;/span&gt;(pod.Annotations, container.Name)

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 设置 RunAsUser.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; synthesized.RunAsUser == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; uid != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      synthesized.RunAsUser = &amp;amp;runtimeapi.Int64Value{Value: *uid}
    }
    synthesized.RunAsUsername = username
  }

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 设置 namespace 选项和 Supplemental Groups
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.NamespaceOptions = &lt;span style=&#34;color:#447fcf&#34;&gt;namespacesForPod&lt;/span&gt;(pod)
  podSc := pod.Spec.SecurityContext
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; podSc != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; podSc.FSGroup != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      synthesized.SupplementalGroups = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(synthesized.SupplementalGroups, &lt;span style=&#34;color:#24909d&#34;&gt;int64&lt;/span&gt;(*podSc.FSGroup))
    }

    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; podSc.SupplementalGroups != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; _, sg := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; podSc.SupplementalGroups {
        synthesized.SupplementalGroups = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(synthesized.SupplementalGroups, &lt;span style=&#34;color:#24909d&#34;&gt;int64&lt;/span&gt;(sg))
      }
    }
  }
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; groups := m.runtimeHelper.&lt;span style=&#34;color:#447fcf&#34;&gt;GetExtraSupplementalGroupsForPod&lt;/span&gt;(pod); &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(groups) &amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
    synthesized.SupplementalGroups = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(synthesized.SupplementalGroups, groups...)
  }

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 判断是否应该添加 no_new_privs 选项
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.NoNewPrivs = securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;AddNoNewPrivileges&lt;/span&gt;(effectiveSc)

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 将 ProcMountType 转换为指定或默认的 masked paths
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.MaskedPaths = securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;ConvertToRuntimeMaskedPaths&lt;/span&gt;(effectiveSc.ProcMount)
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 将 ProcMountType 转换为指定或默认的 readonly paths
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  synthesized.ReadonlyPaths = securitycontext.&lt;span style=&#34;color:#447fcf&#34;&gt;ConvertToRuntimeReadonlyPaths&lt;/span&gt;(effectiveSc.ProcMount)

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; synthesized
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;筛选出有效的配置会被用来生成 Linux 容器配置。&lt;/p&gt;
&lt;h3 id=&#34;docker-seccomp-配置&#34;&gt;docker Seccomp 配置&lt;/h3&gt;
&lt;p&gt;如果 runtime 为 docker，在 &lt;code&gt;CreateContainer()&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/kubelet/dockershim/docker_container.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (ds *dockerService) &lt;span style=&#34;color:#447fcf&#34;&gt;CreateContainer&lt;/span&gt;(_ context.Context, r *runtimeapi.CreateContainerRequest) (*runtimeapi.CreateContainerResponse, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
  ...
  securityOpts, err := ds.&lt;span style=&#34;color:#447fcf&#34;&gt;getSecurityOpts&lt;/span&gt;(config.&lt;span style=&#34;color:#447fcf&#34;&gt;GetLinux&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GetSecurityContext&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GetSeccompProfilePath&lt;/span&gt;(), securityOptSeparator)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;failed to generate security options for container %q: %v&amp;#34;&lt;/span&gt;, config.Metadata.Name, err)
  }

  hc.SecurityOpt = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(hc.SecurityOpt, securityOpts...)
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 &lt;code&gt;getSecurityOpts()&lt;/code&gt; 方法就是将 SecurityContext 中 seccomp 有关配置格式化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/kubelet/dockershim/helpers_linux.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (ds *dockerService) &lt;span style=&#34;color:#447fcf&#34;&gt;getSecurityOpts&lt;/span&gt;(seccompProfile &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, separator &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rune&lt;/span&gt;) ([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Apply seccomp options.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  seccompSecurityOpts, err := &lt;span style=&#34;color:#447fcf&#34;&gt;getSeccompSecurityOpts&lt;/span&gt;(seccompProfile, separator)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;failed to generate seccomp security options for container: %v&amp;#34;&lt;/span&gt;, err)
  }

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; seccompSecurityOpts, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// getSeccompSecurityOpts gets container seccomp options from container seccomp profile.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// It is an experimental feature and may be promoted to official runtime api in the future.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;getSeccompSecurityOpts&lt;/span&gt;(seccompProfile &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, separator &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rune&lt;/span&gt;) ([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
  seccompOpts, err := &lt;span style=&#34;color:#447fcf&#34;&gt;getSeccompDockerOpts&lt;/span&gt;(seccompProfile)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, err
  }
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;fmtDockerOpts&lt;/span&gt;(seccompOpts, separator), &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// fmtDockerOpts formats the docker security options using the given separator.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;fmtDockerOpts&lt;/span&gt;(opts []dockerOpt, sep &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rune&lt;/span&gt;) []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; {
  fmtOpts := &lt;span style=&#34;color:#24909d&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(opts))
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; i, opt := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; opts {
    fmtOpts[i] = fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;%s%c%s&amp;#34;&lt;/span&gt;, opt.key, sep, opt.value)
  }
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; fmtOpts
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终通过 &lt;code&gt;createResp, createErr := ds.client.CreateContainer(createConfig)&lt;/code&gt; 传递给 docker runtime client，用来创建容器。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;SecurityContext 相关内容更多是和 Linux 知识挂钩，内容比较庞杂且资料较少，花费了1周多的时间也没能写出令人满意的内容。由于精力有限，只能做一个阶段性的总结，希望今后有空能更深入的解析这部分内容。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 试用阿里网盘内测版-不限速、无广告、隐私安全我全都要</title>
      <link>https://guoxudong.io/post/alibaba-teambition-disk/</link>
      <pubDate>Mon, 02 Nov 2020 09:26:27 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/alibaba-teambition-disk/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Teambition 网盘自开放内测申请以来已经过去了数月，上周五终于收到了心心念念内测码，于是立马上手体验。Teambition 网盘宣称是不限速、不打扰、够安全、易于协作的网盘，属于阿里巴巴工作学习套件 Teambition，提供能够满足日常需求的超大存储空间，有趣、好用的协作等功能。&lt;/p&gt;
&lt;p&gt;从官网可以看出 Teambition 网盘准确的抓到了个人网盘用户的痛点：&lt;strong&gt;上传下载限速&lt;/strong&gt;、&lt;strong&gt;各种广告弹窗&lt;/strong&gt;、&lt;strong&gt;隐私安全&lt;/strong&gt;以及&lt;strong&gt;操作困难&lt;/strong&gt;，而作为工作学习套件的一部分还增加了协作功能，除了分享资源，还提供了各种协作功能，大大提升协作效率。&lt;/p&gt;
&lt;p&gt;目前 Teambition 网盘还处于 Beta 内测版，申请地址：&lt;a href=&#34;https://survey.aliyun.com/apps/zhiliao/jqBinngVQ&#34;&gt;https://survey.aliyun.com/apps/zhiliao/jqBinngVQ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;优势&#34;&gt;优势&lt;/h2&gt;
&lt;p&gt;总的来说优势体现在不限速、无广告、隐私安全和协作方面。&lt;/p&gt;
&lt;h3 id=&#34;速度&#34;&gt;速度&lt;/h3&gt;
&lt;p&gt;经实测 Teambition 网盘的上传下载速度都能达到本地带宽的最大值，上传下载速度都非常丝滑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65ly1gkamt4yh6tj20b604p74d.jpg&#34; alt=&#34;上传速度&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Teambition 网盘背靠阿里巴巴集团，由阿里云提供资源支持，所以 Teambition 可以以极低成本拿到海量的资源，这也就是他们敢于宣传资源上传下载不限速的原因。&lt;/p&gt;
&lt;p&gt;上传下载速度应该是所有功能的核心，也是和友商比较最多的一点。作为一名云资源管理者和维护者，我深知存储和网络带宽消耗成本的巨大，企业为了保证各种图片、视频、文件资源的可用性，会花费不菲的成本来采购 OSS 或 S3 这样的对象存储，这些资源的上传下载自然不会限速，甚至还有配套的加速服务。&lt;/p&gt;
&lt;p&gt;所以对于网盘的限速从情感上是可以接受的，因为这些资源成本巨大，但是如果限速到&lt;strong&gt;几k、几十k/秒&lt;/strong&gt;，那这样的策略就不是基于成本的考虑，而是垄断后的特权了。&lt;/p&gt;
&lt;h3 id=&#34;容量&#34;&gt;容量&lt;/h3&gt;
&lt;p&gt;内测版开放了 2T 的免费容量，这个大小基本满足了个人用户的使用需求，后续应该会开放购买更大的容量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gkasv8u9fzj208n03xglh.jpg&#34; alt=&#34;网盘容量&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;隐私安全&#34;&gt;隐私安全&lt;/h3&gt;
&lt;p&gt;在直接咨询了阿里的开发人员后，得知 Teambition 网盘采用与天猫双十一相同的技术架构，确保用户个人隐私和文件的绝对安全。&lt;/p&gt;
&lt;h3 id=&#34;页面&#34;&gt;页面&lt;/h3&gt;
&lt;p&gt;网盘页面简洁明了，功能一目了然，可以识别众多文件格式。确实也和承诺中的一样，没有广告推送和弹窗，整体保持简洁清新的风格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gkamyvsv50j21h60q7dj9.jpg&#34; alt=&#34;网盘页面&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;协作&#34;&gt;协作&lt;/h3&gt;
&lt;p&gt;除了一般网盘的功能外，Teambition 网盘还突出了协作的功能。&lt;/p&gt;
&lt;h4 id=&#34;讨论功能&#34;&gt;讨论功能&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65ly1gkanbqdngbj20dd09dq3w.jpg&#34; alt=&#34;讨论&#34;&gt;&lt;/p&gt;
&lt;p&gt;参与协作的用户可以使用不同的颜色，将想要讨论的对象&lt;strong&gt;圈出来&lt;/strong&gt;，这样就可以在同一幅图片或者视频中进行多组讨论，不用添加多余的描述。这个功能在视频中效果会更加明显，可以逐帧&lt;strong&gt;圈&lt;/strong&gt;出修改对象并发表意见（剪辑师、设计师狂怒）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gkandlm1cfj21780ppqil.jpg&#34; alt=&#34;圈出讨论&#34;&gt;&lt;/p&gt;
&lt;p&gt;你觉得是狗可爱还是猫可爱呢？：）&lt;/p&gt;
&lt;h4 id=&#34;图像识别&#34;&gt;图像识别&lt;/h4&gt;
&lt;p&gt;文档中并没有提到这个功能，是我在测试时偶然发现的，Teambition 网盘会自动识别你上传图像的内容，并在详情中的 &lt;strong&gt;“包含的事物”&lt;/strong&gt; 中展示，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gkanoe8od2j214l0jo1gt.jpg&#34; alt=&#34;图像识别&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;分享&#34;&gt;分享&lt;/h4&gt;
&lt;p&gt;目前分享功能是关闭的，原因是内测期间有用户利用 Teambition 网盘分享违规文件，所以暂时无法体验 Teambition 网盘的分享功能。不过从 &lt;strong&gt;&lt;a href=&#34;https://thoughts.teambition.com/sharespace/5f72e44becf9290016f85c8c/docs/5f99203decf9290016f85ce3&#34;&gt;「分享」功能升级说明&lt;/a&gt;&lt;/strong&gt; 可以看到目前已经开启了安全升级，同时还增加了更多功能。&lt;/p&gt;
&lt;p&gt;多种分享权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限时分享有效期增加更细致的时间颗粒度（7天、永久、自定义）&lt;/li&gt;
&lt;li&gt;分享支持增加添加密码&lt;/li&gt;
&lt;li&gt;批量分享支持画册、缩略图两种模式查看文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;粒度更细的分享管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持查看分享文件的浏览量和被下载量&lt;/li&gt;
&lt;li&gt;支持查看分享文件的有效期&lt;/li&gt;
&lt;li&gt;分享中的文件支持随时取消&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不足&#34;&gt;不足&lt;/h2&gt;
&lt;p&gt;Teambition 网盘的核心功能确实直击网盘使用的痛点，但还处于 Beta 内测版，有很多不足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前只有 web 端和手机端可以使用，微信小程序、桌面端（Mac 和 Windows）、平板设备端还未开放&lt;/li&gt;
&lt;li&gt;手机端目前还不能删除文件，删除文件要在 web 端操作，而且手机端网盘的加载速度也很慢，且多次出现加载不出来的情况&lt;/li&gt;
&lt;li&gt;分享功能暂时不可用&lt;/li&gt;
&lt;li&gt;暂时还没有与各种设备打通，还没有手机相册/内容备份等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;总的来说，Teambition 网盘抓住了网盘使用的痛点，并以此收获了众多的关注与好评。但要走的路还很长，在海量用户使用下网盘本身的可用性、对各种设备的支持、对违规内容的识别和管控都将是 Teambition 网盘面临的挑战。&lt;/p&gt;
&lt;p&gt;往长远了看 Teambition 网盘的出现给了用户更多的选择，同时打破了目前网盘市场的局面，逼着“一家独大”的同行去改善自己的产品和服务，从用户的角度这都是好事情。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 浅析 Golang 垃圾回收机制</title>
      <link>https://guoxudong.io/post/golang-gc/</link>
      <pubDate>Fri, 16 Oct 2020 14:51:08 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/golang-gc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Google 搜索 &lt;strong&gt;Golang GC&lt;/strong&gt; 排名靠前的文章都讲的不错，从设计到实现，从演进到源码，一应俱全。但是庞杂的信息会给人一种恐惧感，让人望而却步。本文尝试使用较为简单易懂的语言和图像，讲解 Golang 的垃圾回收机制。&lt;/p&gt;
&lt;h2 id=&#34;垃圾回收算法&#34;&gt;垃圾回收算法&lt;/h2&gt;
&lt;p&gt;目前比较常见的垃圾回收算法有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;引用计数：为每个对象维护一个引用计数，当引用该对象的对象销毁时，引用计数 -1，当对象引用计数为 0 时回收该对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表语言：&lt;strong&gt;Python&lt;/strong&gt;、&lt;strong&gt;PHP&lt;/strong&gt;、&lt;strong&gt;Swift&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;优点：对象回收快，不会出现内存耗尽或达到某个阈值时才回收。&lt;/li&gt;
&lt;li&gt;缺点：不能很好的处理循环引用，而实时维护引用计数也是有损耗的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标记-清除：从根变量开始遍历所有引用的对象，标记引用的对象，没有被标记的进行回收。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表语言：&lt;strong&gt;Golang&lt;/strong&gt;（三色标记法）&lt;/li&gt;
&lt;li&gt;优点：解决了引用计数的缺点。&lt;/li&gt;
&lt;li&gt;缺点：需要 STW，暂时停掉程序运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分代收集：按照对象生命周期长短划分不同的代空间，生命周期长的放入老年代，短的放入新生代，不同代有不同的回收算法和回收频率。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表语言：&lt;strong&gt;Java&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;优点：回收性能好&lt;/li&gt;
&lt;li&gt;缺点：算法复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;golang-垃圾回收&#34;&gt;Golang 垃圾回收&lt;/h2&gt;
&lt;p&gt;跳过原理，我们先来介绍 Golang 的三色标记法。&lt;/p&gt;
&lt;h3 id=&#34;三色标记法&#34;&gt;三色标记法&lt;/h3&gt;
&lt;p&gt;三色标记法只是为了叙述方便而抽象出来的一种说法，实际上的对象是没有三色之分的。这里的三色，对应了垃圾回收过程中对象的三种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灰色：对象还在标记队列中等待&lt;/li&gt;
&lt;li&gt;黑色：对象已被标记，&lt;code&gt;gcmarkBits&lt;/code&gt; 对应位为 &lt;code&gt;1&lt;/code&gt; &amp;ndash; 该对象不会在本次 GC 中被回收&lt;/li&gt;
&lt;li&gt;白色：对象未被标记，&lt;code&gt;gcmarkBits&lt;/code&gt; 对应位为 &lt;code&gt;0&lt;/code&gt; &amp;ndash; 该对象将会在本次 GC 中被清理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gjr5wkuzduj20mr0ra15z.jpg&#34; alt=&#34;三色标记法&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;回收原理&#34;&gt;回收原理&lt;/h3&gt;
&lt;p&gt;通过上图，应该对三色标记法有了一个比较直观的了解，那么我们现在来讲讲原理。简单的讲，就是标记内存中那些还在使用中（即被引用了）的部分，而内存中不再使用（即未被引用）的部分，就是要回收的垃圾，需要将其回收，以供后续内存分配使用。上图中的 A、B、D 就是被引用正在使用的内存，而C、F、E 曾经被使用过，但现在没有任何对象引用，就需要被回收掉。&lt;/p&gt;
&lt;p&gt;而 Root 区域主要是程序运行到当前时刻的栈和全局数据区域，是实时正在使用到的内存，当然应该优先标记。而考虑到内存块中存放的可能是指针，所以还需要递归的进行标记，待全部标记完后，就会对未被标记的内存进行回收。&lt;/p&gt;
&lt;h3 id=&#34;内存标记&#34;&gt;内存标记&lt;/h3&gt;
&lt;p&gt;golang 中采用 span 数据结构管理内存，span 中维护了一个个内存块，并由一个位图 &lt;code&gt;allocBits&lt;/code&gt; 表示内存块的分配情况，而上文中提到的 &lt;code&gt;gcmarkBits&lt;/code&gt; 是记录每块内存块被引用情况的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1gjr43y6br8j20mr07aq50.jpg&#34; alt=&#34;内存标记&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图，&lt;code&gt;allocBits&lt;/code&gt; 记录了每块内存的分配情况，而 &lt;code&gt;gcmarkBits&lt;/code&gt; 记录了每块内存的标记情况。在标记阶段会对每块内存进行标记，有对象引用的内存标记为 1，没有对象引用的为 0。而 &lt;code&gt;allocBits&lt;/code&gt; 和 &lt;code&gt;gcmarkBits&lt;/code&gt; 的数据结构是完全一样的，在结束标记后，将 &lt;code&gt;allocBits&lt;/code&gt; 指向 &lt;code&gt;gcmarkBits&lt;/code&gt;，则有标记的才是存活的，这样就完成了内存回收。而 &lt;code&gt;gcmarkBits&lt;/code&gt; 则会在下次标记时重新分配内存。&lt;/p&gt;
&lt;h3 id=&#34;垃圾回收优化&#34;&gt;垃圾回收优化&lt;/h3&gt;
&lt;p&gt;在前文中提到，golang 的垃圾回收算法属于 &lt;strong&gt;标记-清除&lt;/strong&gt;，是需要 STW 的。STW 就是 &lt;strong&gt;Stop The World&lt;/strong&gt; 的意思，在 golang 中就是要停掉所有的 goroutine，专心进行垃圾回收，待垃圾回收结束后再恢复 goroutine。而 STW 时间的长短直接影响了应用的执行，如果时间过长，那将是灾难性的。为了缩短 STW 时间，golang 不对优化垃圾回收算法，其中**写屏障（Write Barrier）&lt;strong&gt;和&lt;/strong&gt;辅助GC（Mutator Assist）**就是两种优化垃圾回收的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;写屏障（Write Barrier）&lt;/strong&gt;：上面说到的 STW 的目的是防止 GC 扫描时内存变化引起的混乱，而写屏障就是让 goroutine 与 GC 同时运行的手段，虽然不能完全消除 STW，但是可以大大减少 STW 的时间。写屏障在 GC 的特定时间开启，开启后指针传递时会把指针标记，即本轮不回收，下次 GC 时再确定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;辅助 GC（Mutator Assist）&lt;/strong&gt;：为了防止内存分配过快，在 GC 执行过程中，GC 过程中 mutator 线程会并发运行，而 mutator assist 机制会协助 GC 做一部分的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;垃圾回收触发机制&#34;&gt;垃圾回收触发机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;内存分配量达到阈值&lt;/strong&gt;：每次内存分配都会检查当前内存分配量是否达到阈值，如果达到阈值则触发 GC。&lt;code&gt;阈值 = 上次 GC 内存分配量 * 内存增长率&lt;/code&gt;，内存增长率由环境变量 &lt;code&gt;GOGC&lt;/code&gt; 控制，默认为 100，即每当内存扩大一倍时启动 GC。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时触发 GC&lt;/strong&gt;：默认情况下，2分钟触发一次 GC，该间隔由 &lt;code&gt;src/runtime/proc.go&lt;/code&gt; 中的 &lt;code&gt;forcegcperiod&lt;/code&gt; 声明。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手动触发 GC&lt;/strong&gt;：在代码中，可通过使用 &lt;code&gt;runtime.GC()&lt;/code&gt; 手动触发 GC。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gc-优化建议&#34;&gt;GC 优化建议&lt;/h3&gt;
&lt;p&gt;由上文可知，GC 性能是与对象数量有关的，对象越多 GC 性能越差，对程序的影响也越大。所以在开发中要尽量减少对象分配个数，采用对象复用、将小对象组合成大对象或采用小数据类型（如使用 &lt;code&gt;int8&lt;/code&gt; 代替 &lt;code&gt;int&lt;/code&gt;）等。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;一门编程语言的垃圾回收机制会直接影响使用其开发应用的性能。在日常开发工作中也因注意到其作用，有助于开发出高性能的应用，这也是 GC 常常在面试中被问到的原因。同时，了解 GC 对了解内存管理也很有帮助。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bookstack.cn/read/GoExpertProgramming/chapter04-4.2-garbage_collection.md&#34;&gt;Go 专家编程 - 4.2 垃圾回收原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 图解 K8S 源码 - QoS 篇</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-qos/</link>
      <pubDate>Wed, 14 Oct 2020 10:28:06 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-qos/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;日常使用 Kubernetes 时，时长会出现 Node 节点中的 Pod 被 OOMKill 掉的情况，但 Node 节点中 Pod 众多，为什么单单选中这个 Pod  Kill 掉呢？这里就引出了 QoS 的概念，本篇文章就会从源码的角度介绍 QoS 的分类、打分机制，并简单介绍不同 QoS 的本质区别。看看这个机制是如何保证运行在 Kubernetes 中服务质量的。&lt;/p&gt;
&lt;h2 id=&#34;qos&#34;&gt;QoS&lt;/h2&gt;
&lt;p&gt;QoS(Quality of Service) 即服务质量，是 Kubernetes 中的一种控制机制，其会对运行在 Kubernetes 中的 Pod 进行一个质量划分，根据 Pod 中 container 的 Limit 和 request 将 Pod 分为 &lt;code&gt;Guaranteed&lt;/code&gt;，&lt;code&gt;Burstable&lt;/code&gt;，&lt;code&gt;BestEffort&lt;/code&gt; 三类并对所有 Pod 进行一个打分。在资源尤其是内存这种不可压缩资源不够时，为保证整体质量的稳定，Kubernetes 就会根据 QoS 的不同优先级，对 Pod 进行资源回收。这也是有时集群中的 Pod 突然被 kill 掉的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gjotxqvm4uj20mr0aw78n.jpg&#34; alt=&#34;Qos&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;qos-分类&#34;&gt;QoS 分类&lt;/h3&gt;
&lt;p&gt;以下代码用来获取 Pod 的 QoS 类，用于区分不同 Pod 的 QoS。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/apis/core/v1/helper/qos/qos.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;GetPodQOS&lt;/span&gt;(pod *v1.Pod) v1.PodQOSClass {
  requests := v1.ResourceList{}
  limits := v1.ResourceList{}
  zeroQuantity := resource.&lt;span style=&#34;color:#447fcf&#34;&gt;MustParse&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;)
  isGuaranteed := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;
  allContainers := []v1.Container{}
  allContainers = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(allContainers, pod.Spec.Containers...)
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// InitContainers 容器也会被加入 QoS 的计算中
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  allContainers = &lt;span style=&#34;color:#24909d&#34;&gt;append&lt;/span&gt;(allContainers, pod.Spec.InitContainers...)
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; _, container := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; allContainers {
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 遍历 requests 中的 CPU 和 memory 值
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; name, quantity := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; container.Resources.Requests {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#447fcf&#34;&gt;isSupportedQoSComputeResource&lt;/span&gt;(name) {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;continue&lt;/span&gt;
      }
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; quantity.&lt;span style=&#34;color:#447fcf&#34;&gt;Cmp&lt;/span&gt;(zeroQuantity) == &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; {
        delta := quantity.&lt;span style=&#34;color:#447fcf&#34;&gt;DeepCopy&lt;/span&gt;()
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; _, exists := requests[name]; !exists {
          requests[name] = delta
        } &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
          delta.&lt;span style=&#34;color:#447fcf&#34;&gt;Add&lt;/span&gt;(requests[name])
          requests[name] = delta
        }
      }
    }
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 遍历 limits 中的 CPU 和 memory 值
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    qosLimitsFound := sets.&lt;span style=&#34;color:#447fcf&#34;&gt;NewString&lt;/span&gt;()
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; name, quantity := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; container.Resources.Limits {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#447fcf&#34;&gt;isSupportedQoSComputeResource&lt;/span&gt;(name) {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;continue&lt;/span&gt;
      }
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; quantity.&lt;span style=&#34;color:#447fcf&#34;&gt;Cmp&lt;/span&gt;(zeroQuantity) == &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; {
        qosLimitsFound.&lt;span style=&#34;color:#447fcf&#34;&gt;Insert&lt;/span&gt;(&lt;span style=&#34;color:#24909d&#34;&gt;string&lt;/span&gt;(name))
        delta := quantity.&lt;span style=&#34;color:#447fcf&#34;&gt;DeepCopy&lt;/span&gt;()
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; _, exists := limits[name]; !exists {
          limits[name] = delta
        } &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
          delta.&lt;span style=&#34;color:#447fcf&#34;&gt;Add&lt;/span&gt;(limits[name])
          limits[name] = delta
        }
      }
    }

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 判断是否同时设置了 limits 和 requests，如果没有则不是 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; !qosLimitsFound.&lt;span style=&#34;color:#447fcf&#34;&gt;HasAll&lt;/span&gt;(&lt;span style=&#34;color:#24909d&#34;&gt;string&lt;/span&gt;(v1.ResourceMemory), &lt;span style=&#34;color:#24909d&#34;&gt;string&lt;/span&gt;(v1.ResourceCPU)) {
      isGuaranteed = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;
    }
  }
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 如果 requests 和 limits 都没有设置，则为 BestEffort
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(requests) == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(limits) == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; v1.PodQOSBestEffort
  }
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 检查所有资源的 requests 和 limits 是否都相等
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; isGuaranteed {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; name, req := &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;range&lt;/span&gt; requests {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; lim, exists := limits[name]; !exists || lim.&lt;span style=&#34;color:#447fcf&#34;&gt;Cmp&lt;/span&gt;(req) != &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
        isGuaranteed = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;break&lt;/span&gt;
      }
    }
  }
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 都设置了 requests 和 limits，则为 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; isGuaranteed &amp;amp;&amp;amp;
    &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(requests) == &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(limits) {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; v1.PodQOSGuaranteed
  }
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; v1.PodQOSBurstable
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;qos-打分&#34;&gt;QoS 打分&lt;/h3&gt;
&lt;p&gt;QoS 会根据不同的分类进行 OOMScore 打分，当宿主机上内存不足时，系统会优先 kill 掉 OOMScore 分数高的进程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65ly1gjoqlfe8cgj20mr0pcqmy.jpg&#34; alt=&#34;QoS 打分&#34;&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是不久之前 &lt;code&gt;guaranteedOOMScoreAdj&lt;/code&gt; 的值还是 &lt;code&gt;-998&lt;/code&gt;，今年 9 月 22 日才合并 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/pull/71269&#34;&gt;PR&lt;/a&gt; 将其修改为 &lt;code&gt;-997&lt;/code&gt;，而修改的 PR 及 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/72294&#34;&gt;相关 ISSUE&lt;/a&gt; 在 2018 年就已经提出了，感兴趣的同学可以去看看。这里附上源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// github/kubernetes/pkg/kubelet/qos/policy.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; (
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// KubeletOOMScoreAdj is the OOM score adjustment for Kubelet
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  KubeletOOMScoreAdj &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; = -&lt;span style=&#34;color:#3677a9&#34;&gt;999&lt;/span&gt;
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// KubeProxyOOMScoreAdj is the OOM score adjustment for kube-proxy
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  KubeProxyOOMScoreAdj  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; = -&lt;span style=&#34;color:#3677a9&#34;&gt;999&lt;/span&gt;
  guaranteedOOMScoreAdj &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; = -&lt;span style=&#34;color:#3677a9&#34;&gt;997&lt;/span&gt;
  besteffortOOMScoreAdj &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt;
)

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;GetContainerOOMScoreAdjust&lt;/span&gt;(pod *v1.Pod, container *v1.Container, memoryCapacity &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int64&lt;/span&gt;) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; {
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 高优先级 Pod 直接返回 guaranteedOOMScoreAdj
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; types.&lt;span style=&#34;color:#447fcf&#34;&gt;IsCriticalPod&lt;/span&gt;(pod) {
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Critical pods should be the last to get killed.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; guaranteedOOMScoreAdj
  }

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 根据 QoS 等级，返回 guaranteedOOMScoreAdj 或 besteffortOOMScoreAdj 的分数，这里只处理 Guaranteed 与 BestEffort
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;switch&lt;/span&gt; v1qos.&lt;span style=&#34;color:#447fcf&#34;&gt;GetPodQOS&lt;/span&gt;(pod) {
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; v1.PodQOSGuaranteed:
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Guaranteed containers should be the last to get killed.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; guaranteedOOMScoreAdj
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; v1.PodQOSBestEffort:
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; besteffortOOMScoreAdj
  }

  memoryRequest := container.Resources.Requests.&lt;span style=&#34;color:#447fcf&#34;&gt;Memory&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;Value&lt;/span&gt;()
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 内存占用越少，分数越高
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  oomScoreAdjust := &lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt; - (&lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt;*memoryRequest)/memoryCapacity
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 保证 Burstable 分数高于 Guaranteed
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(oomScoreAdjust) &amp;lt; (&lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt; + guaranteedOOMScoreAdj) {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt; + guaranteedOOMScoreAdj)
  }
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 保证 Burstable 分数低于 BestEffect
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(oomScoreAdjust) == besteffortOOMScoreAdj {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(oomScoreAdjust - &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(oomScoreAdjust)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;qos-的本质区别&#34;&gt;QoS 的本质区别&lt;/h3&gt;
&lt;p&gt;三种 QoS 在调度和实现都存在着区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度时，调度器只会根据 request 值进行调度，这也就解释了有些 Node 节点 Resource Limit 超出 100% 的情况&lt;/li&gt;
&lt;li&gt;当 OOM 时，系统会根据 &lt;code&gt;oom_score&lt;/code&gt; 值来选择优先 kill 掉的进程，分数越高越先被 kill 掉。&lt;code&gt;oom_score&lt;/code&gt; 由系统计算所得，用户是不能设置的。但是如上文所述，而根据 QoS 的类型，kubelet 会计算出 &lt;code&gt;oom_score_adj&lt;/code&gt; 的值，通过 &lt;code&gt;oom_score_adj&lt;/code&gt; 来调整 &lt;code&gt;oom_score&lt;/code&gt; 的分数，从而影响 OOM 被 kill 进程的优先级。&lt;/li&gt;
&lt;li&gt;对于资源的限制，是由 CGroup 来完成的。kubelet 会为三种 QoS 分别创建 QoS level CGroup：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Guaranteed&lt;/code&gt; Pod Qos 的 CGroup level 会直接创建在 &lt;code&gt;RootCgroup/kubepods&lt;/code&gt; 下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Burstable&lt;/code&gt; Pod Qos 的创建在 &lt;code&gt;RootCgroup/kubepods/burstable&lt;/code&gt; 下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BestEffort&lt;/code&gt; Pod Qos 的创建在 &lt;code&gt;RootCgroup/kubepods/BestEffort&lt;/code&gt;下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而在 Pod level CGroup 中还会创建 Container level CGroup，其结构如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1gjoxdsmfs0j20mr0e8tjg.jpg&#34; alt=&#34;Qos-CGroup&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本文我们讨论了 Kubernetes 中 QoS 机制的分类、打分及其本质，除了这些 QoS 的实现 &lt;code&gt;QOSContainerManager&lt;/code&gt; 中还有三种 QoS 以宿主机上 allocatable 资源量为基础为 Pod 分配资源，并通过多个 level cgroup 进行层层限制的逻辑，由于篇幅有限，就不做详细介绍了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 图解 K8S 源码 - Informer 篇（上）</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-informer/</link>
      <pubDate>Mon, 12 Oct 2020 15:21:14 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-informer/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;众所周知，在 Kubernetes 中各组件是通过 HTTP 协议进行通信的，而组件间的通信也并没有依赖任何中间件，那么如何保证消息的实时性、可靠性、顺序性呢？&lt;strong&gt;Informer 机制&lt;/strong&gt;很好的解决了这个问题。Kubernetes 中各组件与 API Server 的通信都是通过 client-go 的 informer 机制来保证和完成的。&lt;/p&gt;
&lt;h2 id=&#34;控制器模式&#34;&gt;控制器模式&lt;/h2&gt;
&lt;p&gt;控制器模式最核心的就是控制循环的概念。而 Informer 机制，也就是控制循环中负责观察系统的传感器（Sensor）主要由 Reflector、Informer、Indexer 三个组件构成。其与各种资源的 Controller 相配合，就可以完成完整的控制循环，不断的使系统向终态趋近 &lt;code&gt;status&lt;/code&gt; -&amp;gt; &lt;code&gt;spec&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gjme5nhuykj20mr0fmn6j.jpg&#34; alt=&#34;informer 机制&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;informer&#34;&gt;Informer&lt;/h3&gt;
&lt;p&gt;所谓 informer，其实就是一个带有本地缓存和索引机制的，可以注册 EventHandler 的 client，目的是为了减轻频繁通信 API Server 的压力而抽取出来的一层 cache，客户端对 API Server 数据的&lt;strong&gt;读取&lt;/strong&gt;和&lt;strong&gt;监测&lt;/strong&gt;操作都通过本地的 informer 来进行。&lt;/p&gt;
&lt;p&gt;每一个 Kubernetes 资源上都实现了 informer 机制，每一个 informer 上都会实现 &lt;code&gt;Informer()&lt;/code&gt; 和 &lt;code&gt;Lister()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// client-go/informers/core/v1/pod.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; PodInformer &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interface&lt;/span&gt; {
  &lt;span style=&#34;color:#447fcf&#34;&gt;Informer&lt;/span&gt;() cache.SharedIndexInformer
  &lt;span style=&#34;color:#447fcf&#34;&gt;Lister&lt;/span&gt;() v1.PodLister
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义不同资源的 Informer，允许监控不同资源事件。同时为了避免同一资源的 Informer 被实例化多次，而每个 Informer 都会使用一个 Reflector，这样会运行过多相同的 ListAndWatch，从而加重 API Server 的压力，Informer 还提供了共享机制，多个 Informer 可以共享一个 Reflector，从而达到节约资源的目的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// client-go/informers/factory.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; sharedInformerFactory &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
  client           kubernetes.Interface
  namespace        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;
  tweakListOptions internalinterfaces.TweakListOptionsFunc
  lock             sync.Mutex
  defaultResync    time.Duration
  customResync     &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;map&lt;/span&gt;[reflect.Type]time.Duration

  informers &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;map&lt;/span&gt;[reflect.Type]cache.SharedIndexInformer
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// startedInformers is used for tracking which informers have been started.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// This allows Start() to be called multiple times safely.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  startedInformers &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;map&lt;/span&gt;[reflect.Type]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;bool&lt;/span&gt;
}
...
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// InternalInformerFor returns the SharedIndexInformer for obj using an internal client.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (f *sharedInformerFactory) &lt;span style=&#34;color:#447fcf&#34;&gt;InformerFor&lt;/span&gt;(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
  f.lock.&lt;span style=&#34;color:#447fcf&#34;&gt;Lock&lt;/span&gt;()
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;defer&lt;/span&gt; f.lock.&lt;span style=&#34;color:#447fcf&#34;&gt;Unlock&lt;/span&gt;()

  informerType := reflect.&lt;span style=&#34;color:#447fcf&#34;&gt;TypeOf&lt;/span&gt;(obj)
  informer, exists := f.informers[informerType]
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; exists {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; informer
  }

  resyncPeriod, exists := f.customResync[informerType]
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; !exists {
    resyncPeriod = f.defaultResync
  }

  informer = &lt;span style=&#34;color:#447fcf&#34;&gt;newFunc&lt;/span&gt;(f.client, resyncPeriod)
  f.informers[informerType] = informer

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; informer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 map 数据结构实现共享 Informer 机制，在 &lt;code&gt;InformerFor()&lt;/code&gt; 函数添加了不同资源的 Informer，在添加过程中如果已经存在同类型的 Informer，则返回当前 Informer，不再继续添加。如下就是 &lt;code&gt;deployment&lt;/code&gt; 的 &lt;code&gt;Informer()&lt;/code&gt; 方法，其中就调用了 &lt;code&gt;InformerFor()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// client-go/informers/apps/v1beta1/deployment.go
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (f *deploymentInformer) &lt;span style=&#34;color:#447fcf&#34;&gt;Informer&lt;/span&gt;() cache.SharedIndexInformer {
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; f.factory.&lt;span style=&#34;color:#447fcf&#34;&gt;InformerFor&lt;/span&gt;(&amp;amp;appsv1beta1.Deployment{}, f.defaultInformer)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reflector&#34;&gt;Reflector&lt;/h3&gt;
&lt;p&gt;Reflector 用于监测制定 Kubernetes 资源，当资源发生变化时，触发相应的事件，如：Added（资源添加）事件、Update（资源更新）事件、Delete（资源删除）事件，并将事件及资源名称添加到 DeltaFIFO 中。&lt;/p&gt;
&lt;h4 id=&#34;listandwatch&#34;&gt;ListAndWatch&lt;/h4&gt;
&lt;p&gt;在实例化 Reflector 时，必须传入 ListerWatcher 接口对象，其拥有 &lt;code&gt;List()&lt;/code&gt; 和 &lt;code&gt;Watch()&lt;/code&gt; 方法。Reflector 通过 &lt;code&gt;Run()&lt;/code&gt; 方法启动监控并处理事件。在程序第一次运行时，会执行 &lt;code&gt;List()&lt;/code&gt; 方法将所有的对象数据存入 DeltaFIFO 中，每次 Controller 重启，都会执行 &lt;code&gt;List()&lt;/code&gt; 方法；同时，Reflector 实例中还有 &lt;code&gt;resyncPeriod&lt;/code&gt; 参数，如果该参数不为 0，则会根据该参数值周期性的执行 &lt;code&gt;List()&lt;/code&gt; 操作，此时这些资源对象会被设置为 Sync 操作类型（不同于 Add、Update 等）。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;Watch()&lt;/code&gt; 则会根据 Reflector 实例 &lt;code&gt;period&lt;/code&gt; 参数，周期性的监控资源对象是否有变更。如果发生变更，则通过 &lt;code&gt;r.watchHandler&lt;/code&gt; 处理变更事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1gjmkxmiboej20mr0uwh9f.jpg&#34; alt=&#34;Reflector&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;deltafifo&#34;&gt;DeltaFIFO&lt;/h4&gt;
&lt;p&gt;DeltaFIFO 顾名思义，Delta 是一个资源对象存储，可以保持操作类型（Add、Update、Delete、Sync等）；而 FIFO 则是一个先进先出的队列。其是一个生产者与消费者的队列，其中 Reflector 是生产者，消费者则调用 &lt;code&gt;Pop()&lt;/code&gt; 方法取出最早进入队列的对象数据。&lt;/p&gt;
&lt;h3 id=&#34;indexer&#34;&gt;Indexer&lt;/h3&gt;
&lt;p&gt;Indexer 是 client-go 用来存储资源对象并自带索引功能的本地存储，Reflector 从 DeltaFIFO 中将消费出来的资源对象存储至 Indexer。同时 Indexer 中的数据与 Etcd 中的数据保持完全一致。client-go 可以很方便的从本次存储中读取相应的资源对象数据，而无需每次都从远程 Etcd 集群中读取，从而降低了 API Server 和 Etcd 集群的压力。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;要了解 Kubernetes，Informer 是绕不过的内容，其在 Kubernetes 中非常重要。本文主要图解了 Informer 机制以及 Reflector，由于篇幅有限，DeltaFIFO，Indexer 等概念只做了简单介绍，这些内容会在后续的文章中进行详解，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《Kubernetes 源码剖析 - 郑东旭著》&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 图解 K8S 源码 - Deployment Controller 篇</title>
      <link>https://guoxudong.io/post/diagrams-k8s-src-deployment-controller/</link>
      <pubDate>Mon, 28 Sep 2020 15:00:38 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/diagrams-k8s-src-deployment-controller/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Kubernetes 最为云原生领域的绝对 leader，可以说是当下最著名开源项目之一，拥有着庞大的贡献者群体以及更庞大的用户群体。作为使用 Go 语言开发的明星项目，其源码也是非常有趣的。笔者在研究 Kubernetes 源码时，常常发现很多让人眼前一亮的设计和拍案叫绝的逻辑。但由于 Kubernetes 的代码量十分庞大，函数间的调用也十分复杂，在阅读源码时常常被绕的找不着北，正好手边有一本《图解算法》，于是就萌生了图解 Kubernetes 源码的想法。本文为本系列第一篇文章，尝试使用流程图来分析 Kubernetes Controller Manager 中 的 Deployment Controller 逻辑。&lt;/p&gt;
&lt;h2 id=&#34;deployment-controller&#34;&gt;Deployment Controller&lt;/h2&gt;
&lt;p&gt;Deployment Controller 是 Kube-Controller-Manager 中最常用的 Controller 之一管理 Deployment 资源。而 Deployment 的本质就是通过管理 ReplicaSet 和 Pod 在 Kubernetes 集群中部署 &lt;strong&gt;无状态&lt;/strong&gt; Workload。&lt;/p&gt;
&lt;h3 id=&#34;deploymentreplicaset-和-pod&#34;&gt;Deployment、ReplicaSet 和 Pod&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gj6twofn24j20es09s43a.jpg&#34; alt=&#34;deployment-controller&#34;&gt;&lt;/p&gt;
&lt;p&gt;Deployment 通过控制 ReplicaSet，ReplicaSet 再控制 Pod，最终由 Controller 驱动达到期望状态。在控制器模式下，每次操作对象都会触发一次事件，然后 controller 会进行一次 syncLoop 操作，controller 是通过 informer 监听事件以及进行 ListWatch 操作的。&lt;/p&gt;
&lt;p&gt;Deployment Controller 会监听 DeploymentInformer、ReplicaSetInformer、PodInformer 三种资源。这三种资源变化时，都会触发 syncLoop 也就是下面代码 &lt;code&gt;dc.Run()&lt;/code&gt; 中的 &lt;code&gt;dc.syncDeployment&lt;/code&gt; 操作，来进行状态更新逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;startDeploymentController&lt;/span&gt;(ctx ControllerContext) (http.Handler, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; !ctx.AvailableResources[schema.GroupVersionResource{Group: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;apps&amp;#34;&lt;/span&gt;, Version: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;, Resource: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deployments&amp;#34;&lt;/span&gt;}] {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }
    dc, err := deployment.&lt;span style=&#34;color:#447fcf&#34;&gt;NewDeploymentController&lt;/span&gt;(
      ctx.InformerFactory.&lt;span style=&#34;color:#447fcf&#34;&gt;Apps&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;Deployments&lt;/span&gt;(),
      ctx.InformerFactory.&lt;span style=&#34;color:#447fcf&#34;&gt;Apps&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;ReplicaSets&lt;/span&gt;(),
      ctx.InformerFactory.&lt;span style=&#34;color:#447fcf&#34;&gt;Core&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;V1&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;Pods&lt;/span&gt;(),
      ctx.ClientBuilder.&lt;span style=&#34;color:#447fcf&#34;&gt;ClientOrDie&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deployment-controller&amp;#34;&lt;/span&gt;),
    )
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;, fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;error creating Deployment controller: %v&amp;#34;&lt;/span&gt;, err)
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt; dc.&lt;span style=&#34;color:#447fcf&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(ctx.ComponentConfig.DeploymentController.ConcurrentDeploymentSyncs), ctx.Stop)
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deployment-controller-启动流程&#34;&gt;Deployment Controller 启动流程&lt;/h3&gt;
&lt;p&gt;那么先从启动逻辑开始，Kube-Controller-Manager 中所有的 Controller 的启动逻辑都差不多，都是在 &lt;code&gt;Run()&lt;/code&gt; 方法中完成初始化并启动，&lt;code&gt;NewControllerInitializers&lt;/code&gt; 会初始化所有 Controller，而 &lt;code&gt;startXXXXController()&lt;/code&gt; 则会启动对应的 Controller。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gj6rw439nrj20mh12o7wh.jpg&#34; alt=&#34;deployment-controller-启动流程&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;核心逻辑-synchandler&#34;&gt;核心逻辑 syncHandler&lt;/h3&gt;
&lt;p&gt;Deployment Controller 在初始化时指定了 &lt;code&gt;dc.syncHandler = dc.syncDeployment&lt;/code&gt;，所以核心逻辑就是围绕 &lt;code&gt;syncDeployment()&lt;/code&gt; 来展开的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gj6s4tfuynj20my1zq7wi.jpg&#34; alt=&#34;deployment-controller-核心逻辑&#34;&gt;&lt;/p&gt;
&lt;p&gt;从源码可以看出，删除、暂停、回滚、扩缩容、更新策略的优先级为 &lt;code&gt;delete &amp;gt; pause &amp;gt; rollback &amp;gt; scale &amp;gt; rollout&lt;/code&gt;。而最终都不是直接更新或修改对应资源，而是通过 &lt;code&gt;dc.client.AppsV1().Deployments().UpdateStatus()&lt;/code&gt; 更新 Deployment Status。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;以上就是 Deployment Controller 代码逻辑，通过流程图，希望能描述的更加清晰。因为是第一次尝试图解，可能有遗漏和不足，欢迎留言指正。图解 Kubernetes 源码将作为一个系列继续下去，后续会带来更多的源码图解。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 熟悉又陌生的 k8s 字段：finalizers</title>
      <link>https://guoxudong.io/post/k8s-gc-finalizers/</link>
      <pubDate>Fri, 11 Sep 2020 08:47:51 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/k8s-gc-finalizers/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;经常操作 Kubernetes 集群的同学肯定对 &lt;code&gt;finalizers&lt;/code&gt; 字段不陌生，每当删除 namespace 或 pod 等一些 Kubernetes 资源时，有时资源状态会卡在 &lt;code&gt;Terminating&lt;/code&gt;，很长时间无法删除，甚至有时增加 &lt;code&gt;--force&lt;/code&gt; flag 之后还是无法正常删除。这时就需要 &lt;code&gt;edit&lt;/code&gt; 该资源，将 &lt;code&gt;finalizers&lt;/code&gt; 字段设置为 []，之后 Kubernetes 资源就正常删除了。&lt;/p&gt;
&lt;p&gt;这是一个比较常见的操作，但是当有人问 &lt;code&gt;finalizers&lt;/code&gt; 字段的作用是什么的时候，我是懵逼的，我甚至不知道这个熟悉又陌生的单词怎么读！那么这篇文章就来探索一下 &lt;code&gt;finalizers&lt;/code&gt; 这个字段到底是做什么的，在实践中应该怎么应用这个字段。（另外，这个单词读作 &lt;strong&gt;[&amp;lsquo;faɪnəlaɪzər]&lt;/strong&gt;）&lt;/p&gt;
&lt;h2 id=&#34;finalizers&#34;&gt;Finalizers&lt;/h2&gt;
&lt;p&gt;Finalizers 字段属于 Kubernetes GC 垃圾收集器，是一种删除拦截机制，能够让控制器实现异步的删除前（Pre-delete）回调。其存在于任何一个资源对象的 &lt;a href=&#34;https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L246&#34;&gt;Meta&lt;/a&gt; 中，在 k8s 源码中声明为 &lt;code&gt;[]string&lt;/code&gt;，该 Slice 的内容为需要执行的拦截器名称。&lt;/p&gt;
&lt;p&gt;对带有 Finalizer 的对象的第一个删除请求会为其 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 设置一个值，但不会真的删除对象。一旦此值被设置，finalizers 列表中的值就&lt;strong&gt;只能&lt;/strong&gt;被移除。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 字段被设置时，负责监测该对象的各个控制器会通过&lt;strong&gt;轮询&lt;/strong&gt;对该对象的更新请求来执行它们所要处理的所有 Finalizer。 当所有 Finalizer 都被执行过，资源被删除。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;metadata.deletionGracePeriodSeconds&lt;/code&gt; 的取值控制对更新的轮询周期。&lt;/p&gt;
&lt;p&gt;每个控制器要负责将其 Finalizer 从列表中去除。&lt;/p&gt;
&lt;p&gt;每执行完一个就从 &lt;code&gt;finalizers&lt;/code&gt; 中移除一个，直到 &lt;code&gt;finalizers&lt;/code&gt; 为空，之后其宿主资源才会被真正的删除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// field is set by the server when a graceful deletion is requested by the user, and is not
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// directly settable by a client. The resource is expected to be deleted (no longer visible
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// from resource lists, and not reachable by name) after the time in this field, once the
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Once the deletionTimestamp is set, this value may not be unset or be set further into the
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// future, although it may be shortened or the resource may be deleted prior to this time.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// remove the pod from the API. In the presence of network partitions, this object may still
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// exist after this timestamp, until an administrator or automated process can determine the
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// resource is fully terminated.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// If not set, graceful deletion of the object has not been requested.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Populated by the system when a graceful deletion is requested.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Read-only.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// +optional
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;DeletionTimestamp *Time &lt;span style=&#34;color:#ed9d13&#34;&gt;`json:&amp;#34;deletionTimestamp,omitempty&amp;#34; protobuf:&amp;#34;bytes,9,opt,name=deletionTimestamp&amp;#34;`&lt;/span&gt;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Number of seconds allowed for this object to gracefully terminate before
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// it will be removed from the system. Only set when deletionTimestamp is also set.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// May only be shortened.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Read-only.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// +optional
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;DeletionGracePeriodSeconds *&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;`json:&amp;#34;deletionGracePeriodSeconds,omitempty&amp;#34; protobuf:&amp;#34;varint,10,opt,name=deletionGracePeriodSeconds&amp;#34;`&lt;/span&gt;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Must be empty before the object is deleted from the registry. Each entry
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// is an identifier for the responsible component that will remove the entry
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// from the list. If the deletionTimestamp of the object is non-nil, entries
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// in this list can only be removed.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Finalizers may be processed and removed in any order.  Order is NOT enforced
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// because it introduces significant risk of stuck finalizers.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// finalizers is a shared field, any actor with permission can reorder it.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// If the finalizer list is processed in order, then this can lead to a situation
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// in which the component responsible for the first finalizer in the list is
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// waiting for a signal (field value, external system, or other) produced by a
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// component responsible for a finalizer later in the list, resulting in a deadlock.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Without enforced ordering finalizers are free to order amongst themselves and
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// are not vulnerable to ordering changes in the list.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// +optional
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// +patchStrategy=merge
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;Finalizers []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;`json:&amp;#34;finalizers,omitempty&amp;#34; patchStrategy:&amp;#34;merge&amp;#34; protobuf:&amp;#34;bytes,14,rep,name=finalizers&amp;#34;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;在-operator-中的应用&#34;&gt;在 Operator 中的应用&lt;/h2&gt;
&lt;p&gt;知道了 Finalizers 是什么，那么当然也要知道怎么用 Finalizers 了。在实际开发 Operator 时，删除前（Pre-delete）回调是一个比较常见的功能，用于处理一些在资源删除前需要处理的逻辑，如：关联资源释放、释放资源通知、相关数据清理，甚至是阻止资源删除。一般 Finalizers 的处理也是会 &lt;code&gt;Reconcile&lt;/code&gt; 中实现的，下面就使用 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator&#34;&gt;chaosblade-operator&lt;/a&gt; 中的源码，简单介绍一些 Finalizers 的使用方式。&lt;/p&gt;
&lt;p&gt;首先要了解的是 ChaosBlade-Operator 的工作原理：每个实验都会以 CR 的形式部署到 k8s 集群中，之后由 &lt;code&gt;chaosblade-operator&lt;/code&gt; 来操作以 DaemonSet 形式部署 &lt;code&gt;chaosblade-tool&lt;/code&gt; 对具体资源进行混沌实验。停止实验只需删除对应 CR 即可，在删除 CR 时，首先会执行一遍实验恢复逻辑，之后才会将 CR 删除。但如果恢复实验失败，则会将 CR 的 &lt;code&gt;Phase&lt;/code&gt; 设置为 &lt;code&gt;Destroying&lt;/code&gt;，而在 &lt;code&gt;Reconcile&lt;/code&gt; 中观测到 &lt;code&gt;Phase&lt;/code&gt; 状态为 &lt;code&gt;Destroying&lt;/code&gt; 或者 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 不为空时，就会不会移除 &lt;code&gt;finalizers&lt;/code&gt; 中的拦截器名称，阻止该 CR 被删除。&lt;/p&gt;
&lt;p&gt;这样设计的目的是为了在实验恢复失败后，让用户去主动查看实验恢复失败原因，如果是一些意外原因导致的实验恢复失败，及时去处理。在确认原因后，可使用 CLI 工具增加 &lt;code&gt;--force-remove&lt;/code&gt; 进去强制删除，项目维护者在 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/issues/368&#34;&gt;Issue#368&lt;/a&gt; 中也就这个设计给出了解答。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// pkg/controller/chaosblade/controller.go 部分源码
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; chaosbladeFinalizer = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;finalizer.chaosblade.io&amp;#34;&lt;/span&gt;
...
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; (r *ReconcileChaosBlade) &lt;span style=&#34;color:#447fcf&#34;&gt;Reconcile&lt;/span&gt;(request reconcile.Request) (reconcile.Result, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
    reqLogger := logrus.&lt;span style=&#34;color:#447fcf&#34;&gt;WithField&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Request.Name&amp;#34;&lt;/span&gt;, request.Name)
    forget := reconcile.Result{}
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Fetch the RC instance
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    cb := &amp;amp;v1alpha1.ChaosBlade{}
    err := r.client.&lt;span style=&#34;color:#447fcf&#34;&gt;Get&lt;/span&gt;(context.&lt;span style=&#34;color:#447fcf&#34;&gt;TODO&lt;/span&gt;(), request.NamespacedName, cb)
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; forget, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(cb.Spec.Experiments) == &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; forget, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Destroyed-&amp;gt;delete
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Remove the Finalizer if the CR object status is destroyed to delete it
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; cb.Status.Phase == v1alpha1.ClusterPhaseDestroyed {
      cb.&lt;span style=&#34;color:#447fcf&#34;&gt;SetFinalizers&lt;/span&gt;(&lt;span style=&#34;color:#447fcf&#34;&gt;remove&lt;/span&gt;(cb.&lt;span style=&#34;color:#447fcf&#34;&gt;GetFinalizers&lt;/span&gt;(), chaosbladeFinalizer))
      err := r.client.&lt;span style=&#34;color:#447fcf&#34;&gt;Update&lt;/span&gt;(context.&lt;span style=&#34;color:#447fcf&#34;&gt;TODO&lt;/span&gt;(), cb)
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
        reqLogger.&lt;span style=&#34;color:#447fcf&#34;&gt;WithError&lt;/span&gt;(err).&lt;span style=&#34;color:#447fcf&#34;&gt;Errorln&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;remove chaosblade finalizer failed at destroyed phase&amp;#34;&lt;/span&gt;)
      }
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; forget, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; cb.Status.Phase == v1alpha1.ClusterPhaseDestroying || cb.&lt;span style=&#34;color:#447fcf&#34;&gt;GetDeletionTimestamp&lt;/span&gt;() != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
      err := r.&lt;span style=&#34;color:#447fcf&#34;&gt;finalizeChaosBlade&lt;/span&gt;(reqLogger, cb)
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
        reqLogger.&lt;span style=&#34;color:#447fcf&#34;&gt;WithError&lt;/span&gt;(err).&lt;span style=&#34;color:#447fcf&#34;&gt;Errorln&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;finalize chaosblade failed at destroying phase&amp;#34;&lt;/span&gt;)
      }
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; forget, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
    }
    ...
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; forget, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果 &lt;code&gt;Phase&lt;/code&gt; 状态为 &lt;code&gt;Destroyed&lt;/code&gt;，则从 Finalizers 中移除 &lt;code&gt;finalizer.chaosblade.io&lt;/code&gt;，之后正常删除 CR。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;在实际工作中，像 Finalizers 这样的东西太多了，很多平时挂在嘴边的东西，深究起来我们可能对其并不了解，甚至原本的理解就是错误的。在今后的文章中，除了各种实践干货，笔者还会将更多的精力投注到基本原理、底层实现、源码剖析中，更聚焦于技术本身，在不重复造轮子的基础上，学习和了解更多产品背后的代码设计和实现原理。最后在分享一句&lt;strong&gt;弗兰西斯·培根&lt;/strong&gt;的话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“人生如同道路。最近的捷径通常是最坏的路。”&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#finalizers&#34;&gt;使用 CustomResourceDefinition 扩展 Kubernetes API - kubernetes.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 听说，阿里云给它的 OpenAPI 开发了一套编程语言</title>
      <link>https://guoxudong.io/post/aliyun-darabonba/</link>
      <pubDate>Tue, 01 Sep 2020 11:49:12 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aliyun-darabonba/</guid>
      <description>
        
        
        &lt;h2 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h2&gt;
&lt;p&gt;熟悉公有云的同学对 OpenAPI 都不会陌生，OpenAPI 可以称之为公有云与用户之间的一座桥梁。直接使用公有云的大多是技术人员，而对于技术人员，尤其是开发者来说，往往并不满足于只使用 Web UI 界面来与公有云交互，尤其是当使用的公有云产品日益增多时。由于 Web UI 是面向全体用户设计，并不能满足用户的全部需求。这时 OpenAPI 就出现了，用户通过 OpenAPI 将自己的系统直接对接公有云，并根据自己的使用场景和需求进行设计，开发出一套满足自己需求的公有云管理系统或流程，这样既提高了用户本身的自动化水平，还降低了误操作带来的风险。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;最早的 OpenAPI 往往是云厂商开放出来的一系列 RESTful API 接口，用户需要根据接口要求自己封装认证方法、传入参数，但是由于部分 OpenAPI 并不是 RESTful 风格、产品升级导致的接口参数变化、文档更新不及时等问题，导致云厂商开始寻求新的解决办法。SDK 就是一种解决办法，通过云厂商自己封装的 SDK，可以提高用户体验并屏蔽部分直接使用 OpenAPI 带来的麻烦，但是随着云产品的增加，需要开发的 SDK 越来越多，并且由于 SDK 往往是多语言的，云厂商需要投入大量人手来维护这些 SDK，导致某些产品由于人力资源有限并没有提供 SDK 或者 SDK 语言不全。&lt;/p&gt;
&lt;p&gt;在这种背景下，阿里云的同学提出了一种新办法：他们重新定义了一门 DSL 语言 Darabonba 来描述各种各样的 OpenAPI，就如题目所说给 OpenAPI 开发了一种编程语言，从某种程度上来说，可以称之为：&lt;strong&gt;OpenAPI as code&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;darabonba&#34;&gt;Darabonba&lt;/h2&gt;
&lt;p&gt;Darabonba(原名 TeaDSL)，是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1giba4r6z4aj20rs0ci400.jpg&#34; alt=&#34;Darabonba 设计理念&#34;&gt;&lt;/p&gt;
&lt;p&gt;在笔者看来，操作云产品的功能是开发者的目的，而 OpenAPI 是实现这个目的的手段，SDK 则简化了这种手段，Darabonba 的作用则降低了开发 SDK 的成本，并提高了开发 SDK 的速度，对云厂商的效率会有非常明显的提升。同时 Darabonba 也为使用多种编程语言的团队提供了一条捷径，原先需要每种编程语言都要出人来参加 OpenAPI 的集成，现在只需要公有云维护团队出一名或几名同学即可完成全语言 SDK 的生成。而如果公司本身有需要开发大量的 OpenAPI，甚至可以直接使用 Darabonba，开发符合自己系统 OpenAPI 的工具，&lt;a href=&#34;https://github.com/aliyun/darabonba&#34;&gt;Darabonba&lt;/a&gt; 目前已经开源，使用 &lt;a href=&#34;https://github.com/aliyun/darabonba/blob/master/LICENSE&#34;&gt;Apache-2.0 LICENSE&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;组件&#34;&gt;组件&lt;/h3&gt;
&lt;p&gt;Darabonba 目前支持：&lt;strong&gt;Java&lt;/strong&gt;、&lt;strong&gt;C#&lt;/strong&gt;、&lt;strong&gt;TypeScript&lt;/strong&gt;、&lt;strong&gt;PHP&lt;/strong&gt;、&lt;strong&gt;Golang&lt;/strong&gt; 和 &lt;strong&gt;Python&lt;/strong&gt; 代码的生成，除了解析器和多语言生成器，还提供了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aliyun/darabonba-vscode&#34;&gt;VS Code 插件&lt;/a&gt;：提供语法高亮、代码提示、代码格式化、语法检查等功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aliyun/darabonba-cli&#34;&gt;CLI&lt;/a&gt;：命令行工具，快速在本地拉起一个 Darabonba 项目。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://darabonba.api.aliyun.com/module&#34;&gt;Darabonba 模块仓库&lt;/a&gt;：模块仓库，提供 Darabonba 模块的发布和下载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;darabonba-语言优势&#34;&gt;Darabonba 语言优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;更宽泛的风格支持：支持 RESTful 风格的 OpenAPI，及其他所有基于 HTTP 协议的 OpenAPI。对非 RESTful 风格的 OpenAPI 更友好。&lt;/li&gt;
&lt;li&gt;编程逻辑化：将 OpenAPI 从元数据定义走向编程化，封装复杂的 HTTP 处理过程为简单的方法接口。&lt;/li&gt;
&lt;li&gt;运行时事务性支持：支持配置或设置 OpenAPI 的幂等、重试、超时、退避，将复杂的 OpenAPI 调用过程收敛在方法中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速上手&#34;&gt;快速上手&lt;/h2&gt;
&lt;p&gt;下图可以看到完整的 Darabonba 运行流程，现在我们就来快速制作一套 Code Sample 吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1gibatrt4puj21ao1e8tet.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;阿里云提供了Darabonba 的 Web UI 界面，但是在网页上不好调试，我们选择本地安装 CLI 命令行工具。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Darabonba CLI 是由 Node.js 开发的，使用 npm 来安装&lt;/span&gt;
$ npm install -g @darabonba/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构建-darabonba-模块&#34;&gt;构建 Darabonba 模块&lt;/h3&gt;
&lt;p&gt;我们假设要创建一个模块为 &lt;code&gt;sample_ecs&lt;/code&gt;，用来生成查询 ECS 信息的 SDK 代码。首先创建一个目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ mkdir sample_ecs
$ &lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; sample_ecs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化模块，输入相关信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara init
package scope: guoxudong.io
package name: sample_ecs
package version: 0.0.1
main entry: main.dara
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成初始化后，会新建 2 个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Darafile&lt;/code&gt;：包描述文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.dara&lt;/code&gt;：入口文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装-vs-code-插件&#34;&gt;安装 VS Code 插件&lt;/h3&gt;
&lt;p&gt;打开 VS Code，按 &lt;code&gt;F1&lt;/code&gt; 或 &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; 打开命令面板，选择 Install Extension 并输入 &lt;code&gt;darabonba&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;或启动VS Code 快速打开（&lt;code&gt;Ctrl + P&lt;/code&gt;），粘贴以下命令，然后按 Enter。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ext install darabonba.darabonba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就可以使用语法高亮、代码提示、代码格式化、语法检查等功能了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gibbkgjhc5j20q80l3wh7.jpg&#34; alt=&#34;代码高亮&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装依赖模块&#34;&gt;安装依赖模块&lt;/h3&gt;
&lt;p&gt;首先需要设置依赖仓库地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara config &lt;span style=&#34;color:#24909d&#34;&gt;set&lt;/span&gt; registry https://darabonba.api.aliyun.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就是将依赖写入 &lt;code&gt;Darafile&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudong.io&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;sample_ecs&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0.0.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;main.dara&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;libraries&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Console&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;darabonba:Console:*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;ECS&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;alibabacloud:Ecs20140526:*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;RPC&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;alibabacloud:RPC:*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Util&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;darabonba:Util:*&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;aliyun.com.alibabacloud.sample&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;csharp&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Alibabacloud.Sample&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;php&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Alibabacloud.Sample&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;alibabacloud_sample&amp;#34;&lt;/span&gt;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里引入了4个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Console&lt;/code&gt;：打印输出模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ECS&lt;/code&gt;：ECS 模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RPC&lt;/code&gt;：RPC Client 模块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Util&lt;/code&gt;：工具模块&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
值得注意的的是 &lt;code&gt;libraries&lt;/code&gt; 中内容的 key，就是 &lt;code&gt;.dara&lt;/code&gt; 文件中 import 导入依赖的名称，所以这里可以将 key 修改为好理解的值，然后 import 相应值就可以了。
&lt;/div&gt;

&lt;p&gt;修改完 &lt;code&gt;Darafile&lt;/code&gt; 之后，安装这些依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就可以看到多了一个 &lt;code&gt;.libraries.json&lt;/code&gt; 文件和一个 &lt;code&gt;libraries&lt;/code&gt; 目录，需要的所有依赖模块就都已经安装好了。&lt;/p&gt;
&lt;h3 id=&#34;查看模块内容&#34;&gt;查看模块内容&lt;/h3&gt;
&lt;p&gt;更多的模块，可在&lt;a href=&#34;https://darabonba.api.aliyun.com/module&#34;&gt;模块仓库&lt;/a&gt;中搜索。这里以 ECS 模块为例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gic1orwhjoj21h70q3gr4.jpg&#34; alt=&#34;ECS 模块&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以在 &lt;code&gt;Detail&lt;/code&gt; 中看到所有可以调用的接口，通过还可以点击其他 tab 可以查看版本、安装方法等内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65ly1gibbruwd1zj21at0pqadt.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可通过命令单独安装模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara install alibabacloud:Ecs20140526
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代码编写&#34;&gt;代码编写&lt;/h3&gt;
&lt;p&gt;现在就可以编写 Darabonba 代码了，Darabonba 代码的整体风格偏向于 Java，不是很难懂，这里贴上一段简单的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;ECS&lt;/span&gt;;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;RPC&lt;/span&gt;;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;Util&lt;/span&gt;;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;Console&lt;/span&gt;;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;* Initialization  初始化公共请求参数
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;static&lt;/span&gt; function &lt;span style=&#34;color:#447fcf&#34;&gt;Initialization&lt;/span&gt;(regionId: string)&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;throws&lt;/span&gt; : ECS{

    var config = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt; RPC.&lt;span style=&#34;color:#bbb&#34;&gt;Config&lt;/span&gt;{};
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 您的AccessKey ID
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    config.&lt;span style=&#34;color:#bbb&#34;&gt;accessKeyId&lt;/span&gt; = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;lt;accessKeyId&amp;gt;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 您的AccessKey Secret
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    config.&lt;span style=&#34;color:#bbb&#34;&gt;accessKeySecret&lt;/span&gt; = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;lt;accessKeySecret&amp;gt;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 您的可用区ID
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    config.&lt;span style=&#34;color:#bbb&#34;&gt;regionId&lt;/span&gt; = regionId;

    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt; ECS(config);
}

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;* DescribeZones    查询一个阿里云地域下的可用区
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;static&lt;/span&gt; async function &lt;span style=&#34;color:#447fcf&#34;&gt;DescribeZones&lt;/span&gt;(client: ECS, regionId: string)&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;throws&lt;/span&gt;: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt;{
    var req = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt; ECS.&lt;span style=&#34;color:#bbb&#34;&gt;DescribeZonesRequest&lt;/span&gt;{};
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 可用区所在的地域ID。您可以调用DescribeRegions查看最新的阿里云地域列表
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    req.&lt;span style=&#34;color:#bbb&#34;&gt;regionId&lt;/span&gt; = regionId;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 根据汉语、英语和日语筛选返回结果。更多详情，请参见RFC7231
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 取值范围：
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// zh-CN
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// en-US
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// ja
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 默认值：zh-CN。
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    req.&lt;span style=&#34;color:#bbb&#34;&gt;acceptLanguage&lt;/span&gt; = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;zh-CN&amp;#34;&lt;/span&gt;;
    var resp = client.&lt;span style=&#34;color:#bbb&#34;&gt;describeZones&lt;/span&gt;(req);
    Console.&lt;span style=&#34;color:#bbb&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--------------------查询地域下的可用区--------------------&amp;#34;&lt;/span&gt;);
    Console.&lt;span style=&#34;color:#bbb&#34;&gt;log&lt;/span&gt;(Util.&lt;span style=&#34;color:#bbb&#34;&gt;toJSONString&lt;/span&gt;(resp));
}


&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;static&lt;/span&gt; async function &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;(args: [string]) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;throws&lt;/span&gt;: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;void&lt;/span&gt; {
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 可用区域Id （请自行配置）
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    var regionId = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;lt;regionId&amp;gt;&amp;#34;&lt;/span&gt;;

    var client = Initialization(regionId);

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 查询阿里云地域下的可用区
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    DescribeZones(client, regionId)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码注释很完善，这里就不多讲解了，本示例在官网有&lt;a href=&#34;https://api.aliyun.com/?spm=a2c6h.17640777.J_1935739830.2.8f9a54e1V4j8vN#/codesample&#34;&gt;完整示例&lt;/a&gt;，有兴趣的同学可以研究一下。而 Darabonba 的文档，可以在 &lt;a href=&#34;https://github.com/aliyun/darabonba&#34;&gt;Github&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;h3 id=&#34;代码生成&#34;&gt;代码生成&lt;/h3&gt;
&lt;p&gt;现在就可以生成代码了，下面以生成 Python 代码为例，执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara codegen python ./tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令执行成功后，就可以看到 Python 代码已经生成了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gic21suu35j208a05h3yh.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果代码还没有写完，想检查是否有语法错误，可以使用 &lt;code&gt;check&lt;/code&gt; 命令检查：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ dara check main.dara
Check success !
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这我们的代码就生成成功了，但是这还不是结束，我们需要去测试一下生成的代码能否正常运行，在实践中就出现过代码生成成功，但是运行报错的情况。&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
如果生成的是 Python 代码，这里推荐使用 &lt;code&gt;Python 3.6&lt;/code&gt;，经测 3.8 版本不支持 sdk 的一些语法。
&lt;/div&gt;

&lt;p&gt;同样的，也可以在 &lt;a href=&#34;https://darabonba.api.aliyun.com/sample&#34;&gt;OpenAPI Explorer Code Sample&lt;/a&gt;，通过 Web UI 来生成代码，除了调试速度比较慢之外，其余体验都十分不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gic2hxwdtaj21ha0qb441.jpg&#34; alt=&#34;Code Sample&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;code-sample-全民赛码&#34;&gt;Code Sample 全民赛码&lt;/h2&gt;
&lt;p&gt;最近阿里云还推出了这么一个比赛，看了下奖品有机械键盘、无人机、双肩包和内推资格，有兴趣的同学可以关注一下，还是挺好玩的：&lt;a href=&#34;https://developer.aliyun.com/topic/codesample/active1?spm=dara_code_sample.home.0.0.2ee614e5L9uDCw&#34;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gic2ef0fxgj21o00hyh65.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;阿里云开放平台携手开发者社区、内容设计部，联合举办“OpenAPI 开发者挑战赛第三期—— CodeSample 全民赛码 ”，面向数万开发者，招募阿里云 OpenAPI 示例代码（CodeSample）。无论您是入门开发，或是运维大神，无论是利用 OpenAPI 解决一个轻量场景，或是满足一个小功能，通通到碗里来！&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;在这个项目叫 TeaDSL 的时候笔者就开始关注 Darabonba 了，由于笔者是 OpenAPI SDK 的重度使用用户，之前开发的 devops 平台以及 &lt;a href=&#34;https://github.com/sunny0826/cms-grafana-builder&#34;&gt;cms-grafana-builder&lt;/a&gt; 项目都大量使用了阿里云 SDK。在4月份看到朴灵的&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247495266&amp;amp;idx=1&amp;amp;sn=64177bf3fc7f4068c14733dc77b5383f&amp;amp;chksm=e92ad36dde5d5a7bf6a0ddd821a3cdee6ee063eb221623c6c8333cf68787b3118bd0a8653f17&amp;amp;scene=21#wechat_redirect&#34;&gt;《TeaDSL：支持任意 OpenAPI 网关的多语言 SDK 方案》&lt;/a&gt;时，认为其只是解决云厂商 OpenAPI 开发的多语言困局，提升研发效率，和 OpenAPI 的使用者关系不大。但是在这次进行深入研究之后发现，Darabonba 甚至可以用来生成自己系统的 OpenAPI 多语言 SDK，并不是只能用于生成阿里云的 SDK，非常的惊艳。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: OpenKruise：Kubernetes 核心控制器 Plus</title>
      <link>https://guoxudong.io/post/openkruise-summary/</link>
      <pubDate>Thu, 27 Aug 2020 11:51:25 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/openkruise-summary/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在去年的 KubeCon 上海 2019，我有幸在现场见证了 &lt;a href=&#34;https://github.com/openkruise/kruise&#34;&gt;OpenKruise&lt;/a&gt; 项目的开源，当时在台下的我非常兴奋，因为找到了一套让我的 Kubernetes 集群的核心资源 Pod 升级和发布更自动更简单的方案。如今一年多过去了，前不久 Openkruise 刚发布了最新的 &lt;code&gt;v0.6.0&lt;/code&gt; 版本，目前已经有很多企业在生产环境应用了 OpenKruise，借助 OpenKruise 提供的自动化能力，大大提升了部署升级效率与质量。&lt;/p&gt;
&lt;h2 id=&#34;kruise&#34;&gt;Kruise&lt;/h2&gt;
&lt;p&gt;Kruise 是 OpenKruise 中的核心项目之一，Kruise 是 cruise的谐音，字面意义巡航，豪华游艇（&amp;lsquo;K&amp;rsquo; for Kubernetes）。寓意 Kubernetes 上应用的自动巡航，如果把原生 Kubernetes 资源 Deployment 或 StatefulSet 比作小船，那 Kruise 确实就是豪华游艇了。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gi6knwioawj20ge0dp0ty.jpg&#34;&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;Kruise 提供一套在 Kubernetes 核心控制器之外的扩展 workload，但我更愿意称之为核心控制器 plus。因为目前 Kruise 提供的一系列 workload，更像是核心控制器资源（Deployment、 StatefulSet、Job 和 DaemonSet）的增强版。比如：Advanced StatefulSet 的介绍里就写着是 StatefulSet 的增强版本，在原生 StatefulSet 的基础上增加了诸多功能。下面笔者就来简单介绍一下 Kruise 目前提供的所有 workload 控制器，由于篇幅限制每个 workload 的详细介绍及使用示例将在后续文章中做单独介绍，本篇只是简单介绍各个 workload 可能的使用场景及用途。&lt;/p&gt;
&lt;h3 id=&#34;cloneset&#34;&gt;CloneSet&lt;/h3&gt;
&lt;p&gt;记得 Kruise 最早还没有 CloneSet 这个 Workload，所以我之前还是将其归类为有状态应用的控制器增强（最早放出来的是 Advanced StatefulSet），但是自 &lt;code&gt;v0.4.0&lt;/code&gt; 版本推出之后，CloneSet 一跃成为了最受欢迎，使用率最高的 Kruise 控制器之一，同时也补齐了 Kruise 没有无状态应用控制器这个短板。&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gi6knhrsvlj20d00ae0sy.jpg&#34;&gt;
&lt;/center&gt;
&lt;p&gt;CloneSet 其实就是 Deployment plus，其提供更加高效、稳定可控的无状态应用管理和部署能力，支持优雅原地升级、指定删除、发布顺序、并行/灰度发布等丰富的策略，可以满足更多样化的应用场景。CloneSet 也是目前使用最广的一类 Kruise 控制器，是 OAM 官方 Kubernetes 套件 &lt;a href=&#34;https://github.com/crossplane/oam-kubernetes-runtime&#34;&gt;crossplane/oam-kubernetes-runtime&lt;/a&gt; 支持的 Workload 之一。&lt;/p&gt;
&lt;p&gt;CloneSet 的增强分为两类：&lt;strong&gt;扩缩容功能增强&lt;/strong&gt;和&lt;strong&gt;升级功能增强&lt;/strong&gt;。扩缩容功能增强包括：支持 PVC 模板、指定 Pod 缩容等；升级功能增强包括：原地升级、分批灰度、控制最大不可用数量、控制最大弹性数量、按照不同测控顺序升级、发布暂停等功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：代替原生的 Deployment，将升级过程控制的更加精细、自动和优雅，利用原地升级可以大大降低由于原来重建升级导致的网络、存储等方面的损耗，同时还能加快升级速度。&lt;/p&gt;
&lt;h3 id=&#34;advanced-statefulset&#34;&gt;Advanced StatefulSet&lt;/h3&gt;
&lt;p&gt;Advanced StatefulSet 是 Kruise 最早发布的控制器之一，是原生 StatefulSet 的增强版本，默认行为与原生完全一致，在此之外提供了原地升级、并行发布（最大不可用）、发布暂停等功能。因为是在原生基础上进行开发的，所以只需将原生
StatefulSet 的 &lt;code&gt;apiVersion&lt;/code&gt; 由 &lt;code&gt;apps/v1&lt;/code&gt; 改为 &lt;code&gt;apps.kruise.io/v1alpha1&lt;/code&gt; 即可完成迁移，非常直接。&lt;/p&gt;
&lt;p&gt;Advanced StatefulSet 为 StatefulSet 提供了和 Deployment 一样的 &lt;code&gt;MaxUnavailable&lt;/code&gt; 策略，可以并行发布 Pod，而不再像原生 StatefulSet 一样 one by one 的串行发布；支持原地升级策略，无需重建 Pod，即可原地升级镜像，同时也提供了优雅原地升级的策略，控制器在升级前将 Pod status 改为 not-ready，等待指定时间再升级镜像，这就为将 Pod 从 endpoints 端点列表中去除留出了充足的时间（CloneSet 也支持该策略）；还支持指定升级顺序、发布暂停等策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：代替原生 StatefulSet，有效利用原地升级、并行发布等功能，提升有状态应用的发布速度，为其配置合适的升级策略，提升发布速度。&lt;/p&gt;
&lt;h3 id=&#34;sidecarset&#34;&gt;SidecarSet&lt;/h3&gt;
&lt;center&gt;
  &lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi6kn5e9t8j20cu0b5gm2.jpg&#34;&gt;
&lt;/center&gt;
&lt;p&gt;SidecarSet 的作用就是对 Sidecar 容器做统一管理，支持在一个单独的 CR 中定义 Sidecar 容器，向将满足条件的 Pod 中注入指定的 Sidecar 容器，同时 SidecarSet 也支持 Sidecar 容器原地升级。这样就可以将业务容器和 Sidecar 容器的管理分离，更有利于分工合作，不同的团队只需关心和自己业务有关的容器，免去了大量的沟通成本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：将所有 Sidecar 进行统一管理，一个 CR 管理一类 Sidecar，真正做到业务容器和 Sidecar 容器管理分离，权责清晰。&lt;/p&gt;
&lt;h3 id=&#34;uniteddeployment&#34;&gt;UnitedDeployment&lt;/h3&gt;
&lt;center&gt;
  &lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gi6kmw2uy3j20b707m74o.jpg&#34;&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;UnitedDeployment 为由多个区域组成的集群中实现高可用部署提供了一种新模式，在一个 Kubernetes 集群中可能存在不同的 node 类型，比如多个可用区、或不同的节点技术（比如 Virtual kueblet）等，这些不同类型的 node 上都有 label/taint 标识。UnitedDeployment 控制器可以提供一个模板来定义应用，每个 UnitedDeployment 下每个区域的 workload 被称为 &lt;code&gt;subset&lt;/code&gt;，有一个期望的 &lt;code&gt;replicas&lt;/code&gt; Pod 数量。目前 subset 支持使用 &lt;code&gt;StatefulSet&lt;/code&gt; 和 &lt;code&gt;Advanced StatefulSet&lt;/code&gt;。通过 UnitedDeployment 可以同时管理位于多个可用区的同一应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：用于管理跨可用区的有状态应用，做到管理更精细，过程更自动。&lt;/p&gt;
&lt;h3 id=&#34;broadcastjob&#34;&gt;BroadcastJob&lt;/h3&gt;
&lt;p&gt;BroadcastJob 更像 Job 和 DaemonSet 的组合，BroadcastJob 控制器将 Pod 分发到集群中每个 node 上，类似于 DaemonSet， 但是 BroadcastJob 管理的 Pod 并不是长期运行的 daemon 服务，而是类似于 Job 的任务类型 Pod。最终在每个 node 上的 Pod 都执行完成退出后，BroadcastJob 和这些 Pod 并不会占用集群资源。 这个控制器非常有利于做升级基础软件、巡检等过一段时间需要在整个集群中跑一次的工作。此外，BroadcastJob 还可以维持每个 node 跑成功一个 Pod 任务。如果采取这种模式，当后续集群中新增 node 时 BroadcastJob 也会分发 Pod 任务上去执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：用于管理升级基础软件、巡检等需要在集群中所有节点或指定类型节点执行的单次任务。&lt;/p&gt;
&lt;h3 id=&#34;advanced-daemonset&#34;&gt;Advanced DaemonSet&lt;/h3&gt;
&lt;p&gt;Advanced DaemonSet 是 &lt;code&gt;v0.6.0&lt;/code&gt; 新增的控制器，是原生 DaemonSet 的增强版本，默认行为与原生一致，在此之外提供了灰度分批、按 Node label 选择、暂停、热升级等发布策略。迁移方式同 StatefulSet 类似，将 DaemonSet 的 &lt;code&gt;apiVersion&lt;/code&gt; 由 &lt;code&gt;apps/v1&lt;/code&gt; 改为 &lt;code&gt;apps.kruise.io/v1alpha1&lt;/code&gt; 即可完成迁移。&lt;/p&gt;
&lt;p&gt;Advanced DaemonSet 也有 &lt;code&gt;RollingUpdateDaemonSet&lt;/code&gt; 的增强策略，同时也提供了多种升级方式如：按照 Selector 标签选择升级、分批灰度升级、热升级和暂停升级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：代替原生 DaemonSet，利用原地升级、灰度升级、选择性升级以及热升级等增强特性，更好的维护和管理 DaemonSet 资源。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;Kruise 项目源自于阿里巴巴多年的大规模应用部署、发布与管理的最佳实践，以 &lt;strong&gt;automate everything on Kubernetes&lt;/strong&gt; 为目标。经过了一年多的发展，OpenKruise 的大部分功能都经过了各种生产环境的洗礼，应用在越来越多的 Kubernetes 系统中，代替原生核心控制器，使应用的升级和管理更加的方便高效。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://openkruise.io&#34;&gt;OpenKruise - openkruise.io&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Grabana：使用 Golang 或 Yaml 生成 Grafana Dashboard</title>
      <link>https://guoxudong.io/post/grabana-create-grafana-dashboard/</link>
      <pubDate>Wed, 26 Aug 2020 09:35:23 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/grabana-create-grafana-dashboard/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在之前的一篇文章&lt;a href=&#34;./how-to-configure-grafana-as-code&#34;&gt;《如何使 Grafana as code》&lt;/a&gt;中介绍了使用 &lt;a href=&#34;http://jsonnet.org/&#34;&gt;Jsonnet&lt;/a&gt; 实现 Grafana as code，通过代码来批量、动态、可复用的生成 Grafana Dashboard。但毕竟 &lt;code&gt;Jsonnet&lt;/code&gt; 是一门小众的编程语言，可用文档不多且示例较少，那么有没有使用我们熟悉的编程语言来生成 Grafana Dashboard 的办法呢？答案是肯定的，本篇文章就介绍一款用于生成 Grafana Dashboard 的 Golang 库：&lt;a href=&#34;https://github.com/K-Phoen/grabana&#34;&gt;Grabana&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;grabana&#34;&gt;Grabana&lt;/h2&gt;
&lt;p&gt;Grabana 提供了一种面向开发人员友好的创建 Grafana Dashboard 的方式，也就是俗称的 Grafana as code。&lt;/p&gt;
&lt;p&gt;不止于此，Grabana 还支持使用 yaml 文件来生成 Dashboard。并且完全不需要像 Jsonnet 那样先生成 json 配置，再将配置导入 Grafana，而是直接基于写好的代码或者 yaml 文件，通过封装好的 Grafana API 直接将 Dashboard 发布到指定 Grafana 中，省去了繁琐的操作，实现了完全的自动化。&lt;/p&gt;
&lt;h3 id=&#34;dashboard-as-code&#34;&gt;Dashboard as code&lt;/h3&gt;
&lt;p&gt;使用 Golang 可以通过如下方式构建 Dashboard 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;builder := dashboard.&lt;span style=&#34;color:#447fcf&#34;&gt;New&lt;/span&gt;(
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Awesome dashboard&amp;#34;&lt;/span&gt;,
    dashboard.&lt;span style=&#34;color:#447fcf&#34;&gt;AutoRefresh&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;5s&amp;#34;&lt;/span&gt;),
    dashboard.&lt;span style=&#34;color:#447fcf&#34;&gt;Tags&lt;/span&gt;([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;generated&amp;#34;&lt;/span&gt;}),
    dashboard.&lt;span style=&#34;color:#447fcf&#34;&gt;VariableAsInterval&lt;/span&gt;(
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;interval&amp;#34;&lt;/span&gt;,
        interval.&lt;span style=&#34;color:#447fcf&#34;&gt;Values&lt;/span&gt;([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;30s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;5m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;30m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1h&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6h&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;12h&amp;#34;&lt;/span&gt;}),
    ),
    dashboard.&lt;span style=&#34;color:#447fcf&#34;&gt;Row&lt;/span&gt;(
        &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Prometheus&amp;#34;&lt;/span&gt;,
        row.&lt;span style=&#34;color:#447fcf&#34;&gt;WithGraph&lt;/span&gt;(
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;HTTP Rate&amp;#34;&lt;/span&gt;,
            graph.&lt;span style=&#34;color:#447fcf&#34;&gt;DataSource&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;prometheus-default&amp;#34;&lt;/span&gt;),
            graph.&lt;span style=&#34;color:#447fcf&#34;&gt;WithPrometheusTarget&lt;/span&gt;(
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;rate(prometheus_http_requests_total[30s])&amp;#34;&lt;/span&gt;,
                prometheus.&lt;span style=&#34;color:#447fcf&#34;&gt;Legend&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{handler}} - {{ code }}&amp;#34;&lt;/span&gt;),
            ),
        ),
    ),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置构建好之后，只需调用 Grabana 的 &lt;code&gt;client&lt;/code&gt;，传入 Grafana 的地址，以及事先创建的 Grafana API Key 即可一键发布 Dashboard。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tips&lt;/h4&gt;
&lt;p&gt;API Key 的创建方法 &lt;code&gt;Configuration&lt;/code&gt; - &lt;code&gt;API Keys&lt;/code&gt; - &lt;code&gt;Add API Keys&lt;/code&gt; 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi41u4pq30j21h10pn76o.jpg&#34; alt=&#34;新建 API Key&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gi41y39kz1j20li0biaaz.jpg&#34; alt=&#34;获得 API Key&#34;&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;创建好 API Key 之后，将其填入 &lt;code&gt;grabana.WithAPIToken()&lt;/code&gt; 中即可，创建/更新 Dashboard 代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ctx := context.&lt;span style=&#34;color:#447fcf&#34;&gt;Background&lt;/span&gt;()
client := grabana.&lt;span style=&#34;color:#447fcf&#34;&gt;NewClient&lt;/span&gt;(&amp;amp;http.Client{}, grafanaHost, grabana.&lt;span style=&#34;color:#447fcf&#34;&gt;WithAPIToken&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;such secret, much wow&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// create the folder holding the dashboard for the service
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;folder, err := client.&lt;span style=&#34;color:#447fcf&#34;&gt;FindOrCreateFolder&lt;/span&gt;(ctx, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Test Folder&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not find or create folder: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; _, err := client.&lt;span style=&#34;color:#447fcf&#34;&gt;UpsertDashboard&lt;/span&gt;(ctx, folder, builder); err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not create dashboard: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然官方还提供了一个比较完整的 &lt;a href=&#34;https://github.com/K-Phoen/grabana/blob/master/cmd/example&#34;&gt;example&lt;/a&gt;，直接使用 &lt;code&gt;go run main.go&lt;/code&gt; 即可体验一键创建 Dashboard。&lt;/p&gt;
&lt;h3 id=&#34;dashboard-as-yaml&#34;&gt;Dashboard as YAML&lt;/h3&gt;
&lt;p&gt;Grabana 的特别之处还在于他还提供了使用 yaml 创建 Dashboard 的方式，作为一名资深 yaml 工程师，每当看到 yaml 都会感到格外的亲切。&lt;/p&gt;
&lt;p&gt;同样的 Dashboard ，yaml 配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# dashboard.yaml&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;title&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Awesome&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dashboard&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;editable&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tags&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[generated]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;auto_refresh&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;5s&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;variables&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interval&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;label&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Interval&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;values&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;30s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1m&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;5m&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10m&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;30m&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1h&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6h&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;12h&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rows&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Prometheus&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;panels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;graph&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;title&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;HTTP&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Rate&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;height&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;400px&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;datasource&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;prometheus-default&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;targets&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;prometheus&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;query&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;rate(promhttp_metric_handler_requests_total[$interval])&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;legend&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{{handler}} - {{ code }}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前官方还没有提供类似 &lt;code&gt;grabana apply -f dashboard.yaml&lt;/code&gt; 这样的 CLI 命令来发布 Dashboard，还是要使用 Golang 代码才能将其发布，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;content, err := ioutil.&lt;span style=&#34;color:#447fcf&#34;&gt;ReadFile&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;dashboard.yaml&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Fprintf&lt;/span&gt;(os.Stderr, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not read file: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}

dashboard, err := decoder.&lt;span style=&#34;color:#447fcf&#34;&gt;UnmarshalYAML&lt;/span&gt;(bytes.&lt;span style=&#34;color:#447fcf&#34;&gt;NewBuffer&lt;/span&gt;(content))
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Fprintf&lt;/span&gt;(os.Stderr, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not parse file: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}

ctx := context.&lt;span style=&#34;color:#447fcf&#34;&gt;Background&lt;/span&gt;()
client := grabana.&lt;span style=&#34;color:#447fcf&#34;&gt;NewClient&lt;/span&gt;(&amp;amp;http.Client{}, grafanaHost, grabana.&lt;span style=&#34;color:#447fcf&#34;&gt;WithAPIToken&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;such secret, much wow&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// create the folder holding the dashboard for the service
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;folder, err := client.&lt;span style=&#34;color:#447fcf&#34;&gt;FindOrCreateFolder&lt;/span&gt;(ctx, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Test Folder&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not find or create folder: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; _, err := client.&lt;span style=&#34;color:#447fcf&#34;&gt;UpsertDashboard&lt;/span&gt;(ctx, folder, dashboard); err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
    fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not create dashboard: %s\n&amp;#34;&lt;/span&gt;, err)
    os.&lt;span style=&#34;color:#447fcf&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样也可以找到比较完整的 &lt;a href=&#34;https://github.com/K-Phoen/grabana/tree/master/cmd/yaml&#34;&gt;example&lt;/a&gt;，这些示例都可以在官方 GitHub 仓库中找到，有兴趣的同学可以看一下。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;总的来说，这是一个挺有意思的项目，使用 Golang 代码或 yaml 文件来生成 Grafana Dashboard，方便易用不繁琐。美中不足的是，使用 yaml 生成 Dashboard 并没有完全脱离 Golang 代码。就像笔者上文中提到的，其实可以将项目包装成一个 CLI 工具，使用类似 &lt;code&gt;grabana apply -f dashboard.yaml&lt;/code&gt; 的方式来发布 yaml 配置可能会更好，并且实现起来也并不困难：）。&lt;/p&gt;
&lt;p&gt;生成 Grafana Dashboard 其实还有很多其他语言的实现方式，比如使用 Python 实现的 &lt;a href=&#34;https://github.com/weaveworks/grafanalib&#34;&gt;grafanalib&lt;/a&gt;，与 Grabana 相比 grafanalib 的来头更大，贡献者和 star 数也更多，有兴趣的朋友可以关注一下，这里就不展开详细介绍了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 云中谁寄锦书来，免费生成一封七夕情书吧</title>
      <link>https://guoxudong.io/post/love-letter-aliyun/</link>
      <pubDate>Tue, 25 Aug 2020 16:19:09 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/love-letter-aliyun/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天是七夕节，但对我来时只是”平凡“的一天，上午认识的一个阿里云的小姐姐给我发来一个可疑链接，说是有好玩的活动，推荐我参加一下。于是在午休时间，闲来无事的我点开了这个链接，没想到事情并不简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gi34yex8kgj20al05qmxm.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;云效-devops&#34;&gt;云效 DevOps&lt;/h2&gt;
&lt;p&gt;点开之后，原来是使用云效 DevOps 来体验发布一个为朋友、爱人定制的“情书”。年初时，我和云效的开发人员有聊过，他们对云效 DevOps 非常有信心，相信会做出一个和原来的云效完全不同的更好用的产品，正好借着这个机会，我来免费体验一把云效 DevOps。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gi352mu9k4j212w0q0wmi.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;整体感觉&#34;&gt;整体感觉&lt;/h3&gt;
&lt;p&gt;UI 的整体感觉非常棒，完全不像是“阿里云”的 UI，风格简洁清爽。云效 DevOps 将整个 DevOps 生命周期都做了出来，从代码仓库，静态代码扫描，CI/CD，到文档和任务的管理都有，还改善了之前只能使用阿里云代码仓库的缺点，可以使用自建代码仓库，同时还支持云有云、公有云和混合云的部署方式。同时&lt;strong&gt;云效还为小微企业提供了扶持计划，30人以下团队可以免费使用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi359oqgh9j21h20q97a5.jpg&#34; alt=&#34;活动页&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里就不过多介绍云效，有兴趣的朋友可以上阿里云官方，搜索&lt;strong&gt;云效&lt;/strong&gt;就能了解更多内容了。&lt;/p&gt;
&lt;h2 id=&#34;制作情书&#34;&gt;制作情书&lt;/h2&gt;
&lt;p&gt;与其说是是制作，不如说是修改制作好的代码，将自己想说的话放进去，然后在通过云效一键发布。&lt;/p&gt;
&lt;h3 id=&#34;克隆七夕代码&#34;&gt;克隆七夕代码&lt;/h3&gt;
&lt;p&gt;新用户注册好之后选择&lt;code&gt;导入代码库&lt;/code&gt;-&lt;code&gt;URL导入&lt;/code&gt;，贴入示例代码库地址 &lt;code&gt;https://code.aliyun.com/yunxiao2020/letter.git&lt;/code&gt; 点击 &lt;code&gt;确定&lt;/code&gt; 即可完成示例代码的导入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gi35ntu6avj212m0k2dgv.jpg&#34; alt=&#34;云效 DevOps&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改情书内容&#34;&gt;修改情书内容&lt;/h3&gt;
&lt;p&gt;编辑代码修改情书内容，地址&lt;code&gt;app/service/data.js&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gi35q45ru3j21hc0pfmy3.jpg&#34; alt=&#34;修改内容&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以修改以下字段来实现内容的定制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;：情书模板，提供了爱人、朋友、同事三种模板，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi35sch68xj210g0jb0xy.jpg&#34; alt=&#34;爱人、朋友、同事&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt;：寄信人，上学时候写过情书的同学都懂~&lt;/li&gt;
&lt;li&gt;&lt;code&gt;To&lt;/code&gt;：收信人，同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avatar&lt;/code&gt;：寄信人头像，我这里使用的是图床的 URL，没有图床的 github 上的图片地址也是可以的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;question&lt;/code&gt;：开信问题：设置一个只有你的他/她知道答案的问题，防止被别人看到你的真心话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;answer&lt;/code&gt;：上面问题的答案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: 情书正文，说出你想和他/她说的话吧！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在情书内容就写完了，点击&lt;code&gt;保存&lt;/code&gt;-&lt;code&gt;确定&lt;/code&gt;，将代码提交到 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gi35y8l234j20fe0880sw.jpg&#34; alt=&#34;保存&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置流水线&#34;&gt;配置流水线&lt;/h3&gt;
&lt;p&gt;代码写好了，现在就可以使用流水线将情书的 H5 发布出去了。点击左上角九宫格，选择 &lt;code&gt;流水线&lt;/code&gt; - &lt;code&gt;新建流水线&lt;/code&gt;，选择模板：&lt;code&gt;其他&lt;/code&gt; - &lt;code&gt;云效七夕活动&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gi362uhnv8j21hc0pfmye.jpg&#34; alt=&#34;选择模板&#34;&gt;&lt;/p&gt;
&lt;p&gt;之后就可以配置流水线了，点击 &lt;code&gt;添加代码源&lt;/code&gt;，选择 &lt;code&gt;云效Codeup&lt;/code&gt; 代码源，选择刚刚克隆的 &lt;code&gt;letter&lt;/code&gt; 代码库，选择 &lt;code&gt;master&lt;/code&gt; 分支，开启 &lt;code&gt;代码源触发&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gi36917of6j21h70q7wie.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置 Docker 镜像构建，点击 &lt;code&gt;Docker 镜像构建&lt;/code&gt; - &lt;code&gt;镜像构建并推送至自定义镜像仓库&lt;/code&gt;，填入以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像仓库地址: &lt;code&gt;registry.cn-hangzhou.aliyuncs.com/yunxiao-letter/yunxiao-letter:${BUILD_JOB_ID}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户名:&lt;code&gt;yunxiao-letter@1515906102291199&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;密码: &lt;code&gt;yunxiao2020&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置 Kubernetes 发布，点击 &lt;code&gt;Kubernetes 发布&lt;/code&gt; - &lt;code&gt;Kubectl发布&lt;/code&gt; - &lt;code&gt;新建连接&lt;/code&gt; - &lt;code&gt;自定义集群&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后进入 &lt;code&gt;https://research.devops.aliyun.com/kube.config.yml&lt;/code&gt; 页面，将页面配置文件复制到集群配置文件中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gi36dhtzfxj21070jgt9j.jpg&#34; alt=&#34;连接 Kubernetes&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置好连接后，填写其他配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名空间填: &lt;code&gt;yunxiao&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;YAML路径填: &lt;code&gt;deployment.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建变量1    选择&lt;code&gt;上游输出&lt;/code&gt;，&lt;code&gt;YUNXIAO_LETTER_IMAGE&lt;/code&gt;=&lt;code&gt;镜像仓库地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建变量2    选择&lt;code&gt;自定义&lt;/code&gt;，&lt;code&gt;PIPELINE_ID&lt;/code&gt;=&lt;code&gt;${PIPELINE_ID}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36f8xxffj20w70icdgb.jpg&#34; alt=&#34;其他配置&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成所有配置后，点击 &lt;code&gt;保存并运行&lt;/code&gt; - &lt;code&gt;运行&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36hajgyuj20fd08s746.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;修复问题&#34;&gt;修复问题&lt;/h3&gt;
&lt;p&gt;这里为了让用户体验质量卡点 &lt;code&gt;JavaScript 单元测试&lt;/code&gt; 功能，他们还在项目中埋了一个小坑，让首次构建失败，原因是：测试通过率小于100%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gi36jr1kwjj21090a7t9h.jpg&#34; alt=&#34;质量卡点&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看报错信息，发现是 &lt;code&gt;expect&lt;/code&gt; 值被设置为 &lt;code&gt;400&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gi36k3n45mj212g0e4tad.jpg&#34; alt=&#34;报错信息&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入对应的单元测试文件，修改代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gi36md5twaj21h40pzn10.jpg&#34; alt=&#34;修复问题&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改完成后，点击 &lt;code&gt;保存&lt;/code&gt; - &lt;code&gt;提交&lt;/code&gt;，由于之前设置了流水线 &lt;code&gt;提交源代码触发&lt;/code&gt;，流水线在提交后会自动触发，并发布成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gi36npelasj210109l3zc.jpg&#34; alt=&#34;发布成功&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;预览&lt;/code&gt;或者扫面二维码就可以看到你的情书了。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;通过这次七夕活动，体验了一把云效 DevOps，整体来说用户体验很好，同时还提供了30人一下团队免费使用的政策，可以为小团队省出不少搭建和开发 DevOps 环境和流程的时间和经历，非常推荐大家都来尝试一下，制作一封云上情书送给你的他/她吧。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;活动地址：&lt;a href=&#34;https://developer.aliyun.com/adc/series/devops/?spm=a2c6h.12883283.1362932.3.2785201ctOUs0C&amp;amp;accounttraceid=fd6b3040ada34768aa78f84a9f645c46kouc&#34;&gt;https://developer.aliyun.com/adc/series/devops/?spm=a2c6h.12883283.1362932.3.2785201ctOUs0C&amp;amp;accounttraceid=fd6b3040ada34768aa78f84a9f645c46kouc&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/adc/scenario/exp/8464960ac980400d95ff092b95e1a97e&#34;&gt;云效DevOps七夕云中密书 - developer.aliyun.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 如何使 Grafana as code</title>
      <link>https://guoxudong.io/post/how-to-configure-grafana-as-code/</link>
      <pubDate>Wed, 19 Aug 2020 11:51:17 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/how-to-configure-grafana-as-code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Grafana Dashboard 可以做很多事情，但您知道其实是可以通过代码来配置管理 Grafana Dashboard 的吗？本文是 Grafana Labs 软件开发工程师 Malcolm Holmes 和 Inuits 的开源顾问 Julien Pivotto 在 FOSDEM 2020 上的 topic 演讲记录。 演讲中，两人讨论了如何使用代码来管理您的 Grafana 实例，并介绍了一些使用 &lt;a href=&#34;http://jsonnet.org/&#34;&gt;Jsonnet&lt;/a&gt; 的秘诀和技巧以及 &lt;a href=&#34;https://github.com/grafana/grafonnet-libs&#34;&gt;Grafonnet&lt;/a&gt;（一个用于生成 Grafana Dashboard 的 &lt;a href=&#34;http://jsonnet.org/&#34;&gt;Jsonnet&lt;/a&gt; 库）。&lt;/p&gt;
&lt;h2 id=&#34;铺天盖地的-dashboard&#34;&gt;铺天盖地的 Dashboard&lt;/h2&gt;
&lt;p&gt;Pivotto 在演讲中首先肯定了 Grafana 丰富的 UI，创建一个漂亮的 Dashboard 非常简单。因此用户会创建大量的 Dashboard：当拥有的 Dashboard 越多，也就能越快地了解基础设施的情况。&lt;/p&gt;
&lt;p&gt;这一切看起来都很棒，直到一段时间后，因为习惯和目标的冲突不得不需要去维护这套 Dashboard 时；或者处理不同的 graph 使用不同的颜色表示错误而引发的混乱时；又或者需要修改 50 个 Dashboard 才能使用 Grafana 的一个新功能时。这些时候，确保 Dashboard 正常工作且好看不再是一个简单的过程了。&lt;/p&gt;
&lt;p&gt;从开发到运维，看到相同的 Dashboard 并对 Dashboard 具有相同的理解是很重要的，但是实现这个目标却很困难，这也就是您需要 Grafana as code 的原因。&lt;/p&gt;
&lt;p&gt;Grafana Dashboard 可以通过很多方式创建：通过 Grafana UI、通过 Grafana REST API、Terraform，甚至可以直接将数据推送到 Grafana 数据库。&lt;/p&gt;
&lt;p&gt;不仅如此，现在 Grafana 还支持开箱即用的文件配置，这意味着您可以对 Grafana 说，“嘿，请进入指定的目录，检查里面所有的 JSON 文件，并将它们作为 Dashboard 加载到 Grafana 中。”而当更新那些文件时，Grafana 会自动读取它们并更新 Dashboard，这真的很棒，您可以对文件进行编码并使  Dashboard 内容与的文件配置保持一致。&lt;/p&gt;
&lt;p&gt;Grafana Dashboard 面板中的所有内容均为 JSON，非常简单易懂。但 JSON 本身“并不够好”，很难使用传统的模板系统为其制作模板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghw6c59vh8j22bc1avwlg.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;jsonnet&#34;&gt;Jsonnet&lt;/h2&gt;
&lt;p&gt;“对此我们能做些什么？” Holmes 在演讲开始时提出了这个问题。&lt;/p&gt;
&lt;p&gt;之后他提出了一种使用 JSON 更好的办法：一种名为 &lt;strong&gt;Jsonnet&lt;/strong&gt; 编程语言，其也可用于将资源部署到 Kubernetes，Jsonnet 脚本的输出结果就是 JSON。&lt;/p&gt;
&lt;p&gt;“Jsonnet 具有许多种语言功能，这使得生成 JSON 以及与他人合作生成 JSON 成为一种乐趣。” Holmes 补充到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1ghw6vj3mn3j22bc1av450.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面这个示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义一个局部变量，稍后引用该变量。&lt;/li&gt;
&lt;li&gt;不必使用引号即可获得“不错的语法糖”。&lt;/li&gt;
&lt;li&gt;双冒号语法意味着 &lt;code&gt;hidden&lt;/code&gt; 可以在程序的其他地方使用，但不会最终出现在最终的 JSON 输出中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于语言&#34;&gt;关于语言&lt;/h2&gt;
&lt;p&gt;Holmes 还强调了 Jsonnet 三个与众不同之处。&lt;/p&gt;
&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghw76mjmj8j22bc1av0yt.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个简化的示例中，定义了一个名为 &lt;code&gt;dashboard()&lt;/code&gt; 的函数，包含两个参数：&lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;uid&lt;/code&gt;。Jsonnet 可以将很长的 JSON 内容封装在非常简单的命令中。&lt;/p&gt;
&lt;p&gt;但在上面的示例中，&lt;code&gt;schemaVersion&lt;/code&gt; 字段是写死的，如果想使用 &lt;code&gt;schemaVersion:22&lt;/code&gt; 而不是函数中提供的 &lt;code&gt;schemaVersion:20&lt;/code&gt;，&lt;code&gt;dashboard()&lt;/code&gt;函数就没法解决这个问题的。&lt;/p&gt;
&lt;h3 id=&#34;patches&#34;&gt;Patches&lt;/h3&gt;
&lt;p&gt;而 Jsonnet 的 patches 功能，可以解决这个问题。在调用 Jsonnet 函数时可以为其添加 JSON 代码段，从而达到添加/覆盖指定字段的目的。&lt;/p&gt;
&lt;p&gt;如下所示，&lt;code&gt;schemaVersion&lt;/code&gt; 字段值被覆盖了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1ghw7lembckj22bc1av0y8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些代码“功能非常强大”，其使您拥有了拓展更多内容的能力。&lt;/p&gt;
&lt;h3 id=&#34;imports&#34;&gt;Imports&lt;/h3&gt;
&lt;p&gt;Jsonnet 不仅可以创建函数，还可以将写好的函数 Import 到文件中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ghw8jfq0s1j22bc1avjyc.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上述示例中，事先已经写好了一个函数，并将该函数放入名为 &lt;code&gt;dashboard.libsonnet&lt;/code&gt; 的文件中。然后在 &lt;code&gt;main.jsonnet&lt;/code&gt; 文件中，将该 Dashboard 文件加载到名为 &lt;code&gt;dashboard&lt;/code&gt; 的局部变量中，并调用 &lt;code&gt;new()&lt;/code&gt; 方法。然后添加&lt;code&gt;schemaVersion: 22&lt;/code&gt; 字段，获得与之前相同的结果。&lt;/p&gt;
&lt;p&gt;通过 Import 我们可以复用大量代码，最终生成更多的 Dashboard。&lt;/p&gt;
&lt;p&gt;Jsonnet 还有有一个名为 Jsonnet bundler 的工具，有点类似于 Golang 的 vendor，它可以从 GitHub 或者类似的地方获取 Jsonnet 库，因此您可以与其他人分享 Dashboard 和资源，这使得协作更加有效。&lt;/p&gt;
&lt;h3 id=&#34;现成的轮子&#34;&gt;现成的轮子&lt;/h3&gt;
&lt;p&gt;这是两个现成的库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafonnet-lib&#34;&gt;https://github.com/grafana/grafonnet-lib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grafana/jsonnet-libs/tree/master/grafana-builder&#34;&gt;https://github.com/grafana/jsonnet-libs/tree/master/grafana-builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中最突出的是 Grafonnet，也是 Holmes 和 Pivotto 在演示中使用的，这是一个非常简洁的库，提供了：创建 Dashboard ，创建 panel，创建 single stat panel 等基本功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ghw9403k2zj22bc1avk2w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;演示&#34;&gt;演示&lt;/h2&gt;
&lt;p&gt;然后他们进行了快速演示。&lt;/p&gt;

&lt;div style=&#34;position: relative; width: 100%; height: 0; padding-bottom: 75%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?aid=796818511&amp;amp;bvid=BV18C4y1t7rZ&amp;amp;cid=226548812&amp;amp;page=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;style=&#34;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&#34;&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;
&lt;p&gt;Holmes 说，在 Grafana Lab 内部已经有不少关于如何能让 Grafana 实例作为代码被管理得更好的讨论。我们相信这很有用，讨论已经带来了很多点子。比如，如果 Grafana 本身带有原生 Jsonnet 功能，那么就可以不用运行 Jsonnet 来生成 JSON，而是只要使用 Grafana 本身的能力就可以了。&lt;/p&gt;
&lt;p&gt;我们可以预先对应用程序进行包装，其中既嵌入了代码又包含 Dashboard 和监视的配置。这样的话， Dashboard（及其附带的所有内容）的运行方式将与其余代码相同。这是特别有用的，因为人们喜欢把 Dashboard 放在 CI/CD pipline 的版本控制和集成中，就像他们其他的代码一样。&lt;/p&gt;
&lt;p&gt;Grafonnet 是一个开源项目，在未来一年左右的时间里，Grafonnet 将会快速的发展。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://grafana.com/blog/2020/02/26/how-to-configure-grafana-as-code/&#34;&gt;https://grafana.com/blog/2020/02/26/how-to-configure-grafana-as-code/&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Post: 使用 Golang 和 HTML5 开发一个 MacOS App</title>
      <link>https://guoxudong.io/post/go-h5-codeing-mac-app/</link>
      <pubDate>Tue, 18 Aug 2020 09:23:28 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/go-h5-codeing-mac-app/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Go语言（也称为Golang）是 google 在 2009 年推出的一种编译型编程语言。相对于其他编程语言，golang 具有编写并发程序或网络交互简单、数据类型丰富、编译速度快等特点，比较适合于高性能、高并发场景。Go 语言一直在网络编程、云平台开发、分布式系统等领域占据着重要的地位，尤其在云原生领域，杀手级项目 Docker 和 Kubernetes 都是采用 Go 语言开发的。而在其他领域，比如桌面应用开发，也有一些框架可以使用，本篇文章就来介绍如何使用 Go 语言 和 HTML5 来开发一个 MacOS App。&lt;/p&gt;
&lt;h2 id=&#34;框架选择&#34;&gt;框架选择&lt;/h2&gt;
&lt;p&gt;这里我选用了 &lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;echo&lt;/a&gt; 作为 web 框架，当然也可以选择其他的 web 框架，选择 echo 只不过因为其比较轻量。要做桌面应用，还需要一个 GUI 框架来构建应用，这里我选择的是 &lt;a href=&#34;https://github.com/zserge/lorca&#34;&gt;Lorca&lt;/a&gt;，使用 Lorca 可以用 Go 编写 HTML5 桌面程序，依赖 Chrome 进行 UI 渲染，但却不需要把 Chrome 打包到应用中，也就是说使用应用的电脑，需要安装 Chrome。&lt;/p&gt;
&lt;h3 id=&#34;lorca&#34;&gt;lorca&lt;/h3&gt;
&lt;p&gt;echo 的使用方式中规中矩，没有什么需要介绍的。这里简要介绍一下 lorca，其的使用方法和原理都很简单，可以将其看做是一个浏览器，可在其上运行 web 应用，lorca 可直接将 web 应用包装成桌面应用。这里提供一个简单的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ui, _ := lorca.&lt;span style=&#34;color:#447fcf&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#3677a9&#34;&gt;480&lt;/span&gt;, &lt;span style=&#34;color:#3677a9&#34;&gt;320&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;defer&lt;/span&gt; ui.&lt;span style=&#34;color:#447fcf&#34;&gt;Close&lt;/span&gt;()

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Bind Go function to be available in JS. Go function may be long-running and
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// blocking - in JS it&amp;#39;s represented with a Promise.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ui.&lt;span style=&#34;color:#447fcf&#34;&gt;Bind&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(a, b &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;int&lt;/span&gt; { &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; a + b })

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Call JS function from Go. Functions may be asynchronous, i.e. return promises
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;n := ui.&lt;span style=&#34;color:#447fcf&#34;&gt;Eval&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;`Math.random()`&lt;/span&gt;).&lt;span style=&#34;color:#447fcf&#34;&gt;Float&lt;/span&gt;()
fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Println&lt;/span&gt;(n)

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Call JS that calls Go and so on and so on...
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;m := ui.&lt;span style=&#34;color:#447fcf&#34;&gt;Eval&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;`add(2, 3)`&lt;/span&gt;).&lt;span style=&#34;color:#447fcf&#34;&gt;Int&lt;/span&gt;()
fmt.&lt;span style=&#34;color:#447fcf&#34;&gt;Println&lt;/span&gt;(m)

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Wait for the browser window to be closed
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;&amp;lt;-ui.&lt;span style=&#34;color:#447fcf&#34;&gt;Done&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;制作-macos-app&#34;&gt;制作 MacOS App&lt;/h2&gt;
&lt;p&gt;在完成基本的编码后，接下来的工作才是重点：将应用包装成一个 MacOS APP。&lt;/p&gt;
&lt;h3 id=&#34;制作图标&#34;&gt;制作图标&lt;/h3&gt;
&lt;p&gt;一个 MacOS APP 首先需要一个图标，这里请选择一个 1024 X 1024 分辨率，背景透明的 PNG 图片。这里假设该图片名为 &lt;code&gt;logo.png&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建一个名为 &lt;code&gt;tmp.iconset&lt;/code&gt; 的临时目录，用于存放不同大小的临时图片&lt;/li&gt;
&lt;li&gt;执行如下命令，将原图转为不同大小的图片并放入临时目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;16&lt;/span&gt;     logo.png --out tmp.iconset/icon_16x16.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;32&lt;/span&gt;     logo.png --out tmp.iconset/icon_16x16@2x.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;32&lt;/span&gt;     logo.png --out tmp.iconset/icon_32x32.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt;     logo.png --out tmp.iconset/icon_32x32@2x.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;128&lt;/span&gt;   logo.png --out tmp.iconset/icon_128x128.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;256&lt;/span&gt;   logo.png --out tmp.iconset/icon_128x128@2x.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;256&lt;/span&gt;   logo.png --out tmp.iconset/icon_256x256.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;512&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;512&lt;/span&gt;   logo.png --out tmp.iconset/icon_256x256@2x.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;512&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;512&lt;/span&gt;   logo.png --out tmp.iconset/icon_512x512.png
$ sips -z &lt;span style=&#34;color:#3677a9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;1024&lt;/span&gt;   logo.png --out tmp.iconset/icon_512x512@2x.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://developer.apple.com/library/content/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html#//apple_ref/doc/uid/TP40012302-CH7-SW2&#34;&gt;iconutil&lt;/a&gt; 生成图标&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ iconutil -c icns tmp.iconset -o icon.icns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;icon.icns&lt;/code&gt; 就是制作好的 MacOS App 图标。&lt;/p&gt;
&lt;h3 id=&#34;制作-app-bundle&#34;&gt;制作 .app bundle&lt;/h3&gt;
&lt;p&gt;macOS 上安装的可运行程序是一个 &lt;code&gt;.app&lt;/code&gt; 的目录，里面包含了应用的二进制文件、资源文件以及清单文件。其的目录结构为（也可以通过”右键-显示包内容“来查看 &lt;code&gt;.app&lt;/code&gt; 文件内容）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tree Kustomize.app
Kustomize.app
└── Contents
    ├── Info.plist
    ├── MacOS
    │   └── kustomize
    └── Resources
        ├── assets
        │   ├── css
        │   │   ├── page.css
        │   │   ├── prism.css
        │   │   └── weui.min.css
        │   ├── images
        │   │   └── favicon.ico
        │   └── js
        │       ├── jquery.min.js
        │       ├── prism.js
        │       └── weui.min.js
        ├── icon.icns
        └── views
            ├── copyreght.html
            ├── footer.html
            ├── header.html
            ├── index.html
            └── yaml.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Info.plist&lt;/code&gt; 为清单文件，存储应用信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MacOS&lt;/code&gt; 中存放二进制可执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resources&lt;/code&gt; 存放静态资源文件和图标&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;infoplist-文件&#34;&gt;Info.plist 文件&lt;/h3&gt;
&lt;p&gt;这是一个清单文件，根据自己应用的内容对齐进行修改，更多内容可以参考 &lt;a href=&#34;https://github.com/shurcooL/trayhost&#34;&gt;trayhost&lt;/a&gt; 项目的说明。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span style=&#34;color:#bbb&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleExecutable&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;kustomize&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleIconFile&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;icon.icns&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleIdentifier&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;io.guoxudong.kustomize-remote-observer&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSHighResolutionCapable&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LSUIElement&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用脚本构建-app&#34;&gt;使用脚本构建 App&lt;/h3&gt;
&lt;p&gt;上面的这些只不过是介绍一下原理及手动修改方式，实际应用中可以使用脚本来完成这些工作。使用如下脚本，可以一键完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.app&lt;/code&gt; 应用的构建&lt;/li&gt;
&lt;li&gt;go 应用的打包&lt;/li&gt;
&lt;li&gt;清单文件的生成&lt;/li&gt;
&lt;li&gt;静态资源的拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#cd2828;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#40ffff&#34;&gt;APP&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Kustomize.app&amp;#34;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/{MacOS,Resources}
go build -o &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/MacOS/kustomize
cat &amp;gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/Info.plist &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;dict&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;string&amp;gt;kustomize&amp;lt;/string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;key&amp;gt;CFBundleIconFile&amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;string&amp;gt;icon.icns&amp;lt;/string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;string&amp;gt;io.guoxudong.kustomize-remote-observer&amp;lt;/string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;key&amp;gt;NSHighResolutionCapable&amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  &amp;lt;true/&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;	&amp;lt;key&amp;gt;LSUIElement&amp;lt;/key&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  &amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;/dict&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;lt;/plist&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;EOF&lt;/span&gt;
cp icons/icon.icns &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/Resources/icon.icns
cp -r assets &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/Resources/assets
cp -r views &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;/Contents/Resources/views
find &lt;span style=&#34;color:#40ffff&#34;&gt;$APP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
&lt;p&gt;在 MacOS 中，当您运行 App bundle 时，进程的工作目录是根目录（&lt;code&gt;/&lt;/code&gt;），而不是 &lt;code&gt;Contents/Resources&lt;/code&gt; 目录。如果需要从 &lt;code&gt;Resources&lt;/code&gt; 加载资源，则需要进行如下更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ep, err := os.&lt;span style=&#34;color:#447fcf&#34;&gt;Executable&lt;/span&gt;()
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
	log.&lt;span style=&#34;color:#447fcf&#34;&gt;Fatalln&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;os.Executable:&amp;#34;&lt;/span&gt;, err)
}
err = os.&lt;span style=&#34;color:#447fcf&#34;&gt;Chdir&lt;/span&gt;(filepath.&lt;span style=&#34;color:#447fcf&#34;&gt;Join&lt;/span&gt;(filepath.&lt;span style=&#34;color:#447fcf&#34;&gt;Dir&lt;/span&gt;(ep), &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Resources&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
	log.&lt;span style=&#34;color:#447fcf&#34;&gt;Fatalln&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;os.Chdir:&amp;#34;&lt;/span&gt;, err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;制作-dmg-文件&#34;&gt;制作 DMG 文件&lt;/h3&gt;
&lt;p&gt;DMG 文件用于分发应用程序，将 &lt;code&gt;.app&lt;/code&gt; 文件压缩制成镜像，可以很方便的通过拖拽的形式完成安装。&lt;/p&gt;
&lt;h4 id=&#34;制作模板&#34;&gt;制作模板&lt;/h4&gt;
&lt;p&gt;制作 DMG 文件首先需要制作模板。打开&lt;code&gt;磁盘工具 - 文件 - 新建映象 - 空白映象&lt;/code&gt;（或直接按 &lt;code&gt;⌘N&lt;/code&gt;）创建一个新的磁盘镜像。给它取个名字，设置足够的空间空间，分区选择&lt;code&gt;CD/DVD&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghuwoma7w4j20bd09odig.jpg&#34; alt=&#34;新建模板&#34;&gt;&lt;/p&gt;
&lt;p&gt;制作好后，打开该镜像，进行文件夹视图定制（按&lt;code&gt;⌘J&lt;/code&gt;），选择展示图标的大小及背景图片，这里可以隐藏工具栏&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1ghuwwafpr1j20uy0jhb29.jpg&#34; alt=&#34;文件夹视图定制&#34;&gt;&lt;/p&gt;
&lt;p&gt;右键&lt;code&gt;应用程序&lt;/code&gt;选择制作替身，将替身移动到镜像中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1ghuwthtnxqj20bh05xwey.jpg&#34; alt=&#34;制作替身&#34;&gt;&lt;/p&gt;
&lt;p&gt;将打包好的 app 加入到 DMG 镜像中就完成了 DMG 模板的定制&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghuwzoih10j20lo0cqtof.jpg&#34; alt=&#34;定制好的视图&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;转换-dmg-文件&#34;&gt;转换 DMG 文件&lt;/h4&gt;
&lt;p&gt;目前的 DMG 模板文件还没有经过压缩并且是可写的状态，这样是不能作为程序发布的，所以这里需要对模板进行转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux3e65ngj20ct04676t.jpg&#34; alt=&#34;转换&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;磁盘工具 - 映象 - 转换&lt;/code&gt;，然后选择压缩后存储的目录就完成了最后一步 DMG 文件的转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux55kyzdj20pn0fqgt6.jpg&#34; alt=&#34;转换成功&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在点开 DMG 文件，将应用拖动到应用程序中，就可以在启动台中看到我们的应用程序了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghux7e0g5tj20hn0fq7e7.jpg&#34; alt=&#34;启动台&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;自动化&#34;&gt;自动化&lt;/h4&gt;
&lt;p&gt;上面只是展示了如何手动制作 DMG 镜像，实际使用当然是要将这些步骤自动化的。我将这部分内容做成了一个 go 脚本，原理其实就是使用 &lt;code&gt;hdiutil&lt;/code&gt; 这个命令行工具，有兴趣的同学可以文末找到项目地址，&lt;code&gt;Makefile&lt;/code&gt; 中有详细构建的命令。&lt;/p&gt;
&lt;h2 id=&#34;项目展示&#34;&gt;项目展示&lt;/h2&gt;
&lt;p&gt;我使用 Go + HTML5 制作了一个 &lt;code&gt;Kustomize Remote&lt;/code&gt; 的项目，可以从远程 kustomize 项目中获取配置，并 build 成 yaml 文件，UI样式为微信风格，支持 public 和 private 项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ghuxhffoe1j20dc0h8wf1.jpg&#34; alt=&#34;kustomize-remote-observer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1ghuxk4zxv2j20dc0h83zl.jpg&#34; alt=&#34;yaml result&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/sunny0826/kustomize-remote-observer&#34;&gt;https://github.com/sunny0826/kustomize-remote-observer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以直接在 &lt;a href=&#34;https://github.com/sunny0826/kustomize-remote-observer/releases&#34;&gt;release 页面&lt;/a&gt; 下载 DMG 文件安装试用，只需 Mac 上有 Chrome 即可。&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;Go 语言一直在网络编程、云平台开发、分布式系统等领域占据着重要的地位，但是像桌面应用或者机器学习这样的领域，同样也能做出不错的效果。作为一门受欢迎的编程语言 Golang 已经有十多年的历史了，相信它在将来还能在更多的领域焕发生机，创造辉煌。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Cobra 命令自动补全指北</title>
      <link>https://guoxudong.io/post/cobra-shell-completions/</link>
      <pubDate>Wed, 12 Aug 2020 16:48:34 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/cobra-shell-completions/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;用过类 Unix 系统中 Unix shell(Shell/Bash/Zsh) 的同学都应该对 &lt;kbd&gt;TAB&lt;/kbd&gt; 键印象深刻，因为它可以帮忙补全或提示后续的命令，用户不用记住完整的命令，只需输入前几个字符，按 &lt;kbd&gt;TAB&lt;/kbd&gt; 键，就会提示后续的命令供用户选择，用户体验极佳。目前流行的一些使用 Go 语言开发的 CLI 工具，如 &lt;code&gt;kubectl&lt;/code&gt; 和 &lt;code&gt;helm&lt;/code&gt;，他们也都有 &lt;code&gt;completion&lt;/code&gt; 也就是命令自动补全功能，通过将 &lt;code&gt;source &amp;lt;(kubectl completion zsh)&lt;/code&gt; 加入 &lt;code&gt;.zshrc&lt;/code&gt; 文件中，就可以在每次启动 shell 时自动加载自动补全脚本，之后就可以体验到与原生 shell 相同的自动补全功能了。这些 CLI 工具，都是基于 &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt; 库开发，命令自动补全功能也是该库提供的一个功能，本篇文章就来讲讲如何使用 Cobra 实现命令自动补全的。&lt;/p&gt;
&lt;h2 id=&#34;cobra-shell-completion&#34;&gt;Cobra Shell Completion&lt;/h2&gt;
&lt;p&gt;Cobra 可以作为一个 Golang 包，用来构建功能强大的命令行程序；同时也可以作为 CLI 工具，用来生成应用程序和命令文件。&lt;/p&gt;
&lt;p&gt;由于文本主要介绍 Cobra 的命令自动补全功能，更多内容请查阅&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gho68w1h0sj20tn09e0td.jpg&#34; alt=&#34;Cobra&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基础用法&#34;&gt;基础用法&lt;/h3&gt;
&lt;p&gt;Cobra 当前的最新版本为 &lt;code&gt;v1.0.0&lt;/code&gt;，支持生成多种 Shell 的自动补全脚本，目前支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;li&gt;Zsh&lt;/li&gt;
&lt;li&gt;Fish&lt;/li&gt;
&lt;li&gt;PowerShell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上所述，Cobra 不但是一个功能强大的 Golang 包，还是一个 CLI 工具，可以用来生成应用程序和命令文件。使用如下命令，即可生成用于命令自动补全的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cobra add completion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者也可以创建 &lt;code&gt;cmd/completion.go&lt;/code&gt; 文件，来放置用于生成命令自动补全脚本的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt; completionCmd = &amp;amp;cobra.Command{
    Use:                   &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;completion [bash|zsh|fish|powershell]&amp;#34;&lt;/span&gt;,
    Short:                 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Generate completion script&amp;#34;&lt;/span&gt;,
    Long: &lt;span style=&#34;color:#ed9d13&#34;&gt;`To load completions:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Bash:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;$ source &amp;lt;(yourprogram completion bash)
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# To load completions for each session, execute once:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Linux:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  $ yourprogram completion bash &amp;gt; /etc/bash_completion.d/yourprogram
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;MacOS:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  $ yourprogram completion bash &amp;gt; /usr/local/etc/bash_completion.d/yourprogram
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Zsh:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# If shell completion is not already enabled in your environment you will need
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# to enable it.  You can execute the following once:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;$ echo &amp;#34;autoload -U compinit; compinit&amp;#34; &amp;gt;&amp;gt; ~/.zshrc
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# To load completions for each session, execute once:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;$ yourprogram completion zsh &amp;gt; &amp;#34;${fpath[1]}/_yourprogram&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# You will need to start a new shell for this setup to take effect.
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;Fish:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;$ yourprogram completion fish | source
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;# To load completions for each session, execute once:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;$ yourprogram completion fish &amp;gt; ~/.config/fish/completions/yourprogram.fish
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;`&lt;/span&gt;,
    DisableFlagsInUseLine: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;,
    ValidArgs:             []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;zsh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fish&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;powershell&amp;#34;&lt;/span&gt;},
    Args:                  cobra.&lt;span style=&#34;color:#447fcf&#34;&gt;ExactValidArgs&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;),
    Run: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(cmd *cobra.Command, args []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;switch&lt;/span&gt; args[&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;] {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;:
        cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;Root&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GenBashCompletion&lt;/span&gt;(os.Stdout)
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;zsh&amp;#34;&lt;/span&gt;:
        cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;Root&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GenZshCompletion&lt;/span&gt;(os.Stdout)
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;fish&amp;#34;&lt;/span&gt;:
        cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;Root&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GenFishCompletion&lt;/span&gt;(os.Stdout, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;)
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;powershell&amp;#34;&lt;/span&gt;:
        cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;Root&lt;/span&gt;().&lt;span style=&#34;color:#447fcf&#34;&gt;GenPowerShellCompletion&lt;/span&gt;(os.Stdout)
      }
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方推荐将生成内容输出到 &lt;code&gt;os.Stdout&lt;/code&gt;，只需上面这些简单的命令，即可在你的 CLI 工具中新增 &lt;code&gt;completion&lt;/code&gt; 子命令，执行该命令即可生成相应 Shell 的命令自动补全脚本，将其插入或保存到相应 Shell 的指定位置即可实现命令自动补全功能。&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
如果加载了配置文件，&lt;code&gt;os.Stdout&lt;/code&gt; 可能会打印多余的信息，这会导致自动补全脚本失效，所以请避免这种情况。
&lt;/div&gt;

&lt;h3 id=&#34;进阶用法&#34;&gt;进阶用法&lt;/h3&gt;
&lt;p&gt;上面的这些只是基本用法，完成的只是命令补全的基本功能，但一些定制化的需求是无法实现的。比如，&lt;code&gt;kubectl get [tab]&lt;/code&gt; 这里的预期内容是返回所有 k8s 资源名称，但是只靠上面的代码是无法实现的。这里就需要用到自定义补全，通过为每个命令增加不同的参数或方法，可以实现静态和动态补全等功能。&lt;/p&gt;
&lt;h4 id=&#34;名称补全&#34;&gt;名称补全&lt;/h4&gt;
&lt;p&gt;名称补全其实也分静态名称和动态名称，静态名称就像 &lt;code&gt;kubectl completion [tab]&lt;/code&gt; 预期返回的多种 shell 名称，内容为事先在代码中已经定义好的内容；而动态名称，就是像 &lt;code&gt;helm status [tab]&lt;/code&gt; 预期返回的所有 release 名称，并不是以静态内容体现，而是通过函数动态获取的内容。&lt;/p&gt;
&lt;h5 id=&#34;静态名称补全&#34;&gt;静态名称补全&lt;/h5&gt;
&lt;p&gt;静态名称补全比较简单，只要在想要自动补全的子命令中加入 &lt;code&gt;ValidArgs&lt;/code&gt; 字段，传入一组包含预期结果的字符串数组即可，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;validArgs []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; = { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;replicationcontroller&amp;#34;&lt;/span&gt; }

cmd := &amp;amp;cobra.Command{
    Use:     &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;get [(-o|--output=)json|yaml|template|...] (RESOURCE [NAME] | RESOURCE/NAME ...)&amp;#34;&lt;/span&gt;,
    Short:   &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Display one or many resources&amp;#34;&lt;/span&gt;,
    Long:    get_long,
    Example: get_example,
    Run: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(cmd *cobra.Command, args []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) {
      err := &lt;span style=&#34;color:#447fcf&#34;&gt;RunGet&lt;/span&gt;(f, out, cmd, args)
      util.&lt;span style=&#34;color:#447fcf&#34;&gt;CheckErr&lt;/span&gt;(err)
    },
    ValidArgs: validArgs,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里是模仿 kubectl 的 &lt;code&gt;get&lt;/code&gt; 子命令，在执行该命令时效果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get [tab][tab]
node   pod   replicationcontroller   service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果命令有别名（Aliases）的话，则可以使用 &lt;code&gt;ArgAliases&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;argAliases []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; = { &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;nodes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;services&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;svc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;replicationcontrollers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;rc&amp;#34;&lt;/span&gt; }

cmd := &amp;amp;cobra.Command{
    ...
    ValidArgs:  validArgs,
    ArgAliases: argAliases
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
别名不会在按 &lt;kbd&gt;TAB&lt;/kbd&gt; 时提示给用户，但如果手动输入，则补全算法会将其视为有效参数，并提供后续的补全。
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get rc [tab][tab]
backend        frontend       database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里如果不声明 &lt;code&gt;rc&lt;/code&gt; 为别名，则补全算法将无法补全后续的内容。&lt;/p&gt;
&lt;h5 id=&#34;动态名称补全&#34;&gt;动态名称补全&lt;/h5&gt;
&lt;p&gt;如果需要补全的名称是动态生成的，例如 &lt;code&gt;helm status [tab]&lt;/code&gt; 这里的 &lt;code&gt;release&lt;/code&gt; 值，就需要用到 &lt;code&gt;ValidArgsFunction&lt;/code&gt; 字段，将需要返回的内容以 function 的形式声明在 &lt;code&gt;cobra.Command&lt;/code&gt; 中，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cmd := &amp;amp;cobra.Command{
    Use:   &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;status RELEASE_NAME&amp;#34;&lt;/span&gt;,
    Short: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Display the status of the named release&amp;#34;&lt;/span&gt;,
    Long:  status_long,
    RunE: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(cmd *cobra.Command, args []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) {
      &lt;span style=&#34;color:#447fcf&#34;&gt;RunGet&lt;/span&gt;(args[&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;])
    },
    ValidArgsFunction: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(cmd *cobra.Command, args []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, toComplete &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) ([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, cobra.ShellCompDirective) {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;len&lt;/span&gt;(args) != &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt;, cobra.ShellCompDirectiveNoFileComp
      }
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;getReleasesFromCluster&lt;/span&gt;(toComplete), cobra.ShellCompDirectiveNoFileComp
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码是 &lt;code&gt;helm&lt;/code&gt; 的源码，也是 Cobra 的官方示例代码，很好的展示了这个 function 的结构及返回格式，有兴趣的同学可以去看一下 &lt;code&gt;helm&lt;/code&gt; 的源码，也是很有意思的。&lt;code&gt;getReleasesFromCluster&lt;/code&gt; 方法是用来获取 Helm release 列表，在执行命令时，效果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ helm status [tab][tab]
harbor notary rook thanos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cobra.ShellCompDirective&lt;/code&gt; 可以控制自动补全的特定行为，你可以用或运算符来组合它们，像这样 &lt;code&gt;cobra.ShellCompDirectiveNoSpace | cobra.ShellCompDirectiveNoFileComp&lt;/code&gt;，下面是它们的介绍（摘自官方文档）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates that the shell will perform its default behavior after completions
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// have been provided (this implies none of the other directives).
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveDefault

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates an error occurred and completions should be ignored.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveError

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates that the shell should not add a space after the completion,
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// even if there is a single completion provided.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveNoSpace

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates that the shell should not provide file completion even when
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// no completion is provided.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveNoFileComp

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates that the returned completions should be used as file extension filters.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// For example, to complete only files of the form *.json or *.yaml:
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//    return []string{&amp;#34;yaml&amp;#34;, &amp;#34;json&amp;#34;}, ShellCompDirectiveFilterFileExt
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// For flags, using MarkFlagFilename() and MarkPersistentFlagFilename()
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// is a shortcut to using this directive explicitly.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveFilterFileExt

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Indicates that only directory names should be provided in file completion.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// For example:
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//    return nil, ShellCompDirectiveFilterDirs
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// For flags, using MarkFlagDirname() is a shortcut to using this directive explicitly.
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// To request directory names within another directory, the returned completions
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// should specify a single directory name within which to search. For example,
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// to complete directories within &amp;#34;themes/&amp;#34;:
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//    return []string{&amp;#34;themes&amp;#34;}, ShellCompDirectiveFilterDirs
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;ShellCompDirectiveFilterDirs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
&lt;code&gt;ValidArgs&lt;/code&gt; 和 &lt;code&gt;ValidArgsFunction&lt;/code&gt; 同时只能存在一个。在使用 &lt;code&gt;ValidArgsFunction&lt;/code&gt; 时，Cobra 将在解析了命令行中提供的所有 flag 和参数之后才会调用您的注册函数。
&lt;/div&gt;

&lt;h4 id=&#34;flag-补全&#34;&gt;Flag 补全&lt;/h4&gt;
&lt;h5 id=&#34;指定必选-flag&#34;&gt;指定必选 flag&lt;/h5&gt;
&lt;p&gt;大多时候，名字补全只会提示子命令的补全，但如果一些 flag 是必须的，也可以在用户按 &lt;kbd&gt;TAB&lt;/kbd&gt; 键时进行自动补全，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;MarkFlagRequired&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;)
cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;MarkFlagRequired&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;container&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在执行命令时，就可以看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; [tab][tab]
-c            --container=  -p            --pod=  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;动态-flag&#34;&gt;动态 flag&lt;/h5&gt;
&lt;p&gt;同名称补全类似，Cobra 提供了一个字段来完成该功能，需要使用 &lt;code&gt;command.RegisterFlagCompletionFunc()&lt;/code&gt; 来注册自动补全的函数，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;flagName := &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;
cmd.&lt;span style=&#34;color:#447fcf&#34;&gt;RegisterFlagCompletionFunc&lt;/span&gt;(flagName, &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(cmd *cobra.Command, args []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, toComplete &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;) ([]&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;, cobra.ShellCompDirective) {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;}, cobra.ShellCompDirectiveDefault
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;RegisterFlagCompletionFunc()&lt;/code&gt; 是通过 &lt;code&gt;command&lt;/code&gt; 与该 flag 的进行关联的，在本示例中可以看到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ helm status --output [tab][tab]
json table yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用方式和名称补全相同，这里就不做详细介绍了。&lt;/p&gt;
&lt;h4 id=&#34;debug&#34;&gt;Debug&lt;/h4&gt;
&lt;p&gt;命令自动补全与其他功能不同，调试起来比较麻烦，所以 Cobra 提供了调用隐藏命令，模拟自动补全脚本的方式来帮助调试代码，你可以直接使用以下隐藏命令来模拟触发：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ helm __complete status har[ENTER]
harbor
:4
Completion ended with directive: ShellCompDirectiveNoFileComp &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# This is on stderr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;注意&lt;/h4&gt;
如果需要提示名称而非补全（就是输入命令后直接按 &lt;kbd&gt;TAB&lt;/kbd&gt; 键），则必须将空参数传递给 &lt;code&gt;__complete&lt;/code&gt; 命令：
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ helm __complete status &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;[ENTER]
harbor
notary
rook
thanos
:4
Completion ended with directive: ShellCompDirectiveNoFileComp &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# This is on stderr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样可以用来调试 flag 的自动补全：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ helm __complete status --output &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;[ENTER]
json
table
yaml
:4
Completion ended with directive: ShellCompDirectiveNoFileComp &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# This is on stderr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;以上内容是作者挑选的一些较为常用的功能，更多的内容详见&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;官方文档&lt;/a&gt;。如果想看示例的话，推荐 &lt;a href=&#34;https://github.com/kubernetes/kubectl&#34;&gt;kubectl&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/helm/helm&#34;&gt;helm&lt;/a&gt; 的源码。&lt;/p&gt;
&lt;p&gt;当然 Cobra 还不是完美的，比如生成的 Zsh 脚本有些问题，&lt;code&gt;kubectl&lt;/code&gt; 和 &lt;code&gt;helm&lt;/code&gt; 都是使用将其生成的 Bash 自动补全脚本转化为 Zsh 的自动补全脚本的方式。但不得不承认，Cobra 是一个非常好用的 CLI 工具构建框架，很多流行的 CLI 工具都是使用它来构建的，这也是为什么使用 GO 语言编写的 CLI 工具如雨后春笋般快速的出现并占据了云原生工具的关键位置。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: ChaosBlade：从零开始的混沌工程（五）</title>
      <link>https://guoxudong.io/post/start-chaosblade-4/</link>
      <pubDate>Thu, 06 Aug 2020 16:34:23 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-chaosblade-4/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上篇文章中，我们介绍了如何使用 &lt;strong&gt;ChaosBlade Operator&lt;/strong&gt; 对 node 资源进行混沌实验。从本章将继续对 Kubernetes Container 资源的混沌实验进行讲解，同时也配套了 &lt;a href=&#34;https://katacoda.com/&#34;&gt;katacode&lt;/a&gt; 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade，同时本篇也是系列文章的倒数第二篇，实践内容的最后一篇。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chaosblade.io/&#34;&gt;chaosblade.io&lt;/a&gt; 官网已经正式上线，在官网的&lt;a href=&#34;https://chaosblade.io/try/&#34;&gt;互动教程&lt;/a&gt;模块，也可以找到 ChaosBlade 的 KataCoda 教程，目前官网由我维护，有任何问题，欢迎在 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-website/issues&#34;&gt;ISSUE&lt;/a&gt; 中进行反馈。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;KataCoda 教程：《ChaosBlade Container 实验场景》&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-container-experiment&#34;&gt;https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-container-experimentt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;

&lt;h2 id=&#34;实验对象container&#34;&gt;实验对象：Container&lt;/h2&gt;
&lt;p&gt;Pod 由一个或多个容器（Container）组成。容器（Container）是一种用来打包已经编译好的代码以及运行时需要的各个依赖项的技术。您运行的每个容器都是可以重复运行的；包含依赖项的标准化意味着您在任何地点运行它都会得到相同的结果。&lt;/p&gt;
&lt;h2 id=&#34;container-实验场景&#34;&gt;Container 实验场景&lt;/h2&gt;
&lt;p&gt;同&lt;a href=&#34;../start-chaosblade-2&#34;&gt;之前的文章&lt;/a&gt;，本篇默认已安装 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34;&gt;guestbook&lt;/a&gt; 应用和 ChaosBlade Operator。&lt;/p&gt;
&lt;h3 id=&#34;container-资源自身的场景&#34;&gt;container 资源自身的场景&lt;/h3&gt;
&lt;h4 id=&#34;删除-container&#34;&gt;删除 container&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：删除 chaosblade 命名空间下，Pod 名为 &lt;code&gt;guestbook-7b87b7459f-cqkq2&lt;/code&gt; 中 container id 是 &lt;code&gt;c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed&lt;/code&gt; 的容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove_container_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;remove-container-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;remove&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;remove container by id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# pod name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guestbook-7b87b7459f-cqkq2&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 container 名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod guestbook-7b87b7459f-cqkq2 -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;remove_container_by_id.yaml&lt;/code&gt; 中的 &lt;code&gt;container-ids&lt;/code&gt; 和 &lt;code&gt;names&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f remove_container_by_id.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade remove-container-by-id -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看容易 ID，可以看到容器ID发生了变化，旧容器被删除了，拉起了新容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1ghh7lolrl9g20xq0g67wh.gif&#34; alt=&#34;删除 container&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f remove_container_by_id.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade remove-container-by-id&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-内cpu负载场景&#34;&gt;container 内CPU负载场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：指定 chaosblade 命名空间下 Pod 名为 &lt;code&gt;guestbook-7b87b7459f-cqkq2&lt;/code&gt;，container id 为 2ff814b246f86，使其 CPU 负载为 100%。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验准备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于使用 helm 安装的 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34;&gt;guestbook&lt;/a&gt; 没有对资源进行限制，进行负载实验的话，会导致整个节点的故障，所以在实验之前需要&lt;strong&gt;对资源进行限制&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl patch deployment redis-slave --patch &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;template&amp;#34;: {&amp;#34;spec&amp;#34;: {&amp;#34;containers&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;redis-slave&amp;#34;,&amp;#34;resources&amp;#34;: {&amp;#34;limits&amp;#34;:{&amp;#34;cpu&amp;#34;:&amp;#34;300m&amp;#34;,&amp;#34;memory&amp;#34;:&amp;#34;512Mi&amp;#34;} }}]}}}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;increase_container_cpu_load_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;increase-container-cpu-load-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cpu&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;fullload&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;increase container cpu load by id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cpu-percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# pod names&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-slave-55d8c8ffbd-jd8sm&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 container 名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod redis-slave-55d8c8ffbd-jd8sm -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;increase_container_cpu_load_by_id.yaml&lt;/code&gt; 中的 &lt;code&gt;container-ids&lt;/code&gt; 和 &lt;code&gt;names&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl get blade increase-container-cpu-load-by-id -o json&lt;/code&gt;，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可从监控系统观测到结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1ghh7p4zsblj20ct07eaac.jpg&#34; alt=&#34;container 内CPU负载场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f increase_container_cpu_load_by_id.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade increase-container-cpu-load-by-id&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-内网络实验场景&#34;&gt;container 内网络实验场景&lt;/h3&gt;
&lt;p&gt;该场景与 Pod 实验场景类似。&lt;/p&gt;
&lt;h4 id=&#34;container-网络延迟场景&#34;&gt;container 网络延迟场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：对 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-hknb6&lt;/code&gt; Pod 中 container id 是 &lt;code&gt;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&lt;/code&gt; 的容器的 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验参数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;destination-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 &amp;ndash;local-port 或者 &amp;ndash;remote-port 参数一起使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;interface&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;网卡设备，例如 eth0 (必要参数)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;offset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;延迟时间上下浮动的值, 单位是毫秒。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remote-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;延迟时间，单位是毫秒 (必要参数)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;force&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore-peer-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;针对添加 &amp;ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;设定运行时长，单位是秒，通用参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delay_container_network_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay-container-network-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay container network by container id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;local-port&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6379&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;offset&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 Pod 名称和 container id：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod redis-master-68857cd57c-hknb6 -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;delay_container_network_by_id.yaml&lt;/code&gt; 中的 &lt;code&gt;container-ids&lt;/code&gt; 和 &lt;code&gt;names&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f delay_container_network_by_id.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade delay-container-network-by-id -o json&lt;/code&gt; 命令，查看实验状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取实验 pod ip&lt;/span&gt;
$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..status.podIP}
10.42.0.19
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-55d8c8ffbd-jd8sm bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 在 pod 中安装 telnet&lt;/span&gt;
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 测试时间&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; | telnet 10.42.0.19 &lt;span style=&#34;color:#3677a9&#34;&gt;6379&lt;/span&gt;
Trying 10.42.0.19...
Connected to 10.42.0.19.
Escape character is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
Connection closed by foreign host.

real    0m3.790s
user    0m0.007s
sys     0m0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7s2brmxg20si05w16r.gif&#34; alt=&#34;container 网络延迟场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delay_container_network_by_id.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delay-container-network-by-id&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;container-网络丢包场景&#34;&gt;container 网络丢包场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：对 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-hknb6&lt;/code&gt; Pod 中 container id 是 &lt;code&gt;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&lt;/code&gt; 的容器注入丢包率 100% 的故障，只针对 IP 为 &lt;code&gt;10.42.0.26&lt;/code&gt; 的 pod 生效，也就是除 &lt;code&gt;10.42.0.26&lt;/code&gt; 以外的 pod 都能正常访问 &lt;code&gt;redis-master-68857cd57c-hknb6&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验参数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;destination-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 &amp;ndash;local-port 或者 &amp;ndash;remote-port 参数一起使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude-ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;interface&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;网卡设备，例如 eth0 (必要参数)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;percent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;丢包百分比，取值在[0, 100]的正整数 (必要参数)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remote-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;force&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore-peer-port&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;针对添加 &amp;ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;设定运行时长，单位是秒，通用参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loss_container_network_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss-container-network-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;loss container network by container id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;timeout&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;destination-ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10.42.0.26&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 pod 名称和 container id 内容同上。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f loss_container_network_by_id.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade loss-container-network-by-id -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取实验 pod ip&lt;/span&gt;
$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..status.podIP}
10.42.0.19
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod，IP为：10.42.0.26（被设置丢包率 100%）&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-55d8c8ffbd-jd8sm bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping 实验Pod ip&lt;/span&gt;
$ ping 10.42.0.19
PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data.
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 无响应&lt;/span&gt;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod，该 pod 未被指定丢包&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-55d8c8ffbd-22tsc bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping 实验Pod ip&lt;/span&gt;
$ ping 10.42.0.19
PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data.
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.0.19: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.065 ms
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.0.19: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.051 ms
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.0.19: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.078 ms
...
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 响应正常&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh7th88pmg20si06au0x.gif&#34; alt=&#34;container 网络丢包场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里在配置中还将 &lt;code&gt;timeout&lt;/code&gt; 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 &lt;code&gt;exclude-port&lt;/code&gt;，该配置用来指定排除掉的丢包端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f loss_container_network_by_id.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade loss-container-network-by-id&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;container-域名访问异常场景&#34;&gt;container 域名访问异常场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：本实验通过修改本地的 hosts，篡改域名地址映射，模拟 container 内域名访问异常场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验参数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;域名 (必要参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;映射的 ip (必要参数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;设定运行时长，单位是秒，通用参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tamper_container_dns_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;tamper-container-dns-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dns&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;tamper container dns by id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;domain&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;www.baidu.com&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10.0.0.1&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# pod names&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-hknb6&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# or use pod labels&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 pod 名称和 container id 内容同上。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f tamper_container_dns_by_id.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade tamper-container-dns-by-id -o json&lt;/code&gt; 命令，查看实验状态.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-master-68857cd57c-hknb6 bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping www.baidu.com&lt;/span&gt;
$ ping www.baidu.com
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 无响应&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1ghh7wcg01ng20si06ah3v.gif&#34; alt=&#34;container 域名访问异常场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 Pod 的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件被修改，模拟了 dns 解析异常的场景。&lt;/p&gt;
&lt;h3 id=&#34;container-内进程场景&#34;&gt;container 内进程场景&lt;/h3&gt;
&lt;h4 id=&#34;杀-container-内指定进程&#34;&gt;杀 container 内指定进程&lt;/h4&gt;
&lt;p&gt;此实验会删除指定容器中的 &lt;code&gt;redis-server&lt;/code&gt; 进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;process&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;进程关键词，会在整个命令行中查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;process-cmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;进程命令，只会在命令中查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;count&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;限制杀掉进程的数量，0 表示无限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;指定杀进程的信号量，默认是 9，例如 &amp;ndash;signal 15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;设定运行时长，单位是秒，通用参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill_container_process_by_id.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kill-container-process-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kill&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kill container process by id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-server&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-slave-55d8c8ffbd-4pz8m&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选择一个 pod，获取容器 ID ，修改 &lt;code&gt;kill_container_process_by_id.yaml&lt;/code&gt; 中的 &lt;code&gt;container-ids&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f kill_container_process_by_id.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade kill-container-process-by-id -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 开始实验前查看容器 id&lt;/span&gt;
$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
POD_NAME                        CONTAINER      ID
redis-slave-55d8c8ffbd-4pz8m   redis-master   docker://bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 实验后查看容器 id&lt;/span&gt;
$ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID
POD_NAME                       CONTAINER     ID
redis-slave-55d8c8ffbd-4pz8m   redis-slave   docker://94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ghh7y7r2nmg20r0068wxo.gif&#34; alt=&#34;杀 container 内指定进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;容器 id 变化，主进程被杀掉后容器进行了重启，符合实验逾期。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis-server&lt;/code&gt; 的进程号发生改变，说明被杀掉后，又被重新拉起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f kill_container_process_by_id.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade kill-container-process-by-id&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;挂起-container-内指定进程&#34;&gt;挂起 container 内指定进程&lt;/h4&gt;
&lt;p&gt;此实验会挂起指定容器中的 &lt;code&gt;redis-server&lt;/code&gt; 进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;process&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;进程关键词，会在整个命令行中查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;process-cmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;进程命令，只会在命令中查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;设定运行时长，单位是秒，通用参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stop_container_process_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;stop-container-process-by-id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;stop&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kill container process by id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;container-ids&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-server&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-slave-55d8c8ffbd-4pz8m&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选择一个节点，修改 &lt;code&gt;stop_container_process_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f stop_container_process_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade stop-container-process-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-55d8c8ffbd-4pz8m bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看 redis-server 进程号&lt;/span&gt;
$ ps aux| grep redis-server
root      &lt;span style=&#34;color:#3677a9&#34;&gt;5632&lt;/span&gt;  0.0  0.0  &lt;span style=&#34;color:#3677a9&#34;&gt;41520&lt;/span&gt;  &lt;span style=&#34;color:#3677a9&#34;&gt;4168&lt;/span&gt; ?        Tl   06:28   0:06 redis-server *:6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 &lt;code&gt;redis-server&lt;/code&gt; 此刻进程处于暂停状态了（T）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1ghh8090cr1g20t406y1kx.gif&#34; alt=&#34;挂起 container 内指定进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f stop_container_process_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade stop-container-process-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;仔细看过前面几篇文章的同学获取会发现，不同场景的混沌实验中的参数与操作方式有些类似。其实对于这些在不同场景，比如 Pod、Node 和 Container 中进行混沌实验的实现是一致的，都是基于 &lt;code&gt;blade&lt;/code&gt; 这个 CLI 工具，只对对其在不同场景进行了不同的封装，这就涉及到了混沌工程实验规范，下篇文章我们就来谈谈&lt;strong&gt;混沌工程模型&lt;/strong&gt;和&lt;strong&gt;混沌工程实验规范&lt;/strong&gt;，看看混沌工程的实现应该遵循怎么样的模型和规范。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 读完《云原生架构白皮书》，我们来谈谈开放应用模型（OAM）</title>
      <link>https://guoxudong.io/post/the-cloud-native-architecture-white-paper-oam/</link>
      <pubDate>Fri, 24 Jul 2020 10:53:04 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/the-cloud-native-architecture-white-paper-oam/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;7月21日阿里云发布了《云原生架构白皮书》，该书由阿里云众多技术专家共同编撰而成，从云原生定义、技术、架构、产品、实践和发展趋势几个方面详细介绍了云原生这一近些年来大火的技术概念。受阿里云邀请，我有幸在该书发布前试读了该书，但是由于最近比较忙，现在才有空和大家分享我的试读感受。&lt;/p&gt;
&lt;p&gt;熟悉我的朋友肯定知道，去年开放应用模型（OAM）概念一经提出，我就十分关注这一技术模型，最近更是参与到了该模型的实现项目 &lt;a href=&#34;https://github.com/crossplane/oam-kubernetes-runtime&#34;&gt;Crossplane&lt;/a&gt; 中，同社区中的同学共同实现云原生技术“以应用为中心”这一终极愿景。但是苦于社区中的资料都是英文，同时自己的理解又比较片面，在向身边同事和其他不了解该项技术的同学科普 OAM 时，往往很难准确表达我的观点。&lt;/p&gt;
&lt;p&gt;OAM 是什么？OAM 能做什么？我们为什么需要 OAM？每每被同事进行灵魂拷问时，总是不能拿出完整、条理、有说服力的东西，只能根据自己的理解以及一些零零散散的技术文章来说明我的观点，很是不爽。但是当我读到《云原生架构白皮书》第三章中的开放应用模型（OAM）章节时，我知道我的问题解决了。该章系统的介绍了 OAM 这项技术的背景、定义、概念、实现和未来，读者只要对云原生稍有理解，就能轻松从这章中找到前面那些问题的答案。&lt;/p&gt;
&lt;h2 id=&#34;那么-oam-到底是什么&#34;&gt;那么 OAM 到底是什么？&lt;/h2&gt;
&lt;p&gt;从《云原生架构白皮书》的内容出发，结合我的理解，大致将 OAM 的特点分为以下三点：&lt;/p&gt;
&lt;h3 id=&#34;以应用为中心&#34;&gt;以应用为中心&lt;/h3&gt;
&lt;p&gt;今年是 Kubernetes 项目诞生的第六年，在这六年中，以 Kubernetes 为首的云原生技术快速的改变着我们的技术架构，一个又一个的应用被拆分成微服务，打包成容器，运行在 Kubernetes 上。然而随着微服务越拆越多，管理微服务的难度也呈指数型增长，Kubernetes 中并没有”应用“这一概念，提供给我们的只有 deployment、StatefulSet 这样工作负载粒度的资源，而一个应用，可能由多个 Deployment、Service、以及各种相关配套资源组成（如：HPA 用于弹性伸缩、Ingress 用于外部访问等）。Kubernetes 并没有提供给我们一个统一的资源或者说是方法来管理这些相关资源，各个公司只能开发自己的 PaaS 平台或设立规范约束自己的应用。&lt;/p&gt;
&lt;p&gt;OAM 的出现补充了“应用”这一概念，建立对应用和它所需的运维能力定义与描述的标准规范。换言之，OAM 既是标准“应用定义”同时也是帮助封装、组织和管理 Kubernetes 中各种“运维能力”的工具。通过 OAM 中应用的可交付对象 - Application Configuration，我们可以轻松的掌握我们的应用到底有那些 Kubernetes 工作负载组成，这些工作负载都使用了哪些运维特性，这些内容都会以 Kubernetes API 对象的形式展示，查看起来和查看 Deployment 与 Service 资源一样方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gh3bn5n23zj20t80f0myj.jpg&#34; alt=&#34;Application Configuration&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;关注点分离&#34;&gt;关注点分离&lt;/h3&gt;
&lt;p&gt;在实践中，如果基础架构和应用是由不同团队维护的，由于各个团队的关注点不同、对 Kubernetes 了解的程度不同、使用习惯不同，很容易产生混乱。实际上，对于业务研发人员和运维人员而言，他们并不想配置这些如此底层的资源信息，而希望有更高维度的抽象。这就要求一个真正面向最终用户侧的应用定义，一个能够为业务研发和应用运维人员提供各自所需的应用定义原语。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gh3cl2hzsaj20w80gmgnl.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过组件（Component）和运维特征（Trait）将业务研发人员与运维人员关注的不同特征进行分离，再将不同的运维特征（Trait）与业务组件（Component）进行绑定，最终再由OAM 可交付物 – Application Configuration 将所有组件组装为一个统一的应用。研发与运维对资源的控制进行细粒度的划分，可以有效的解决实际情况中存在的类似”我比你更懂 Kubernetes，要听我的“的现象，避免了研发与运维之间的甩锅与扯皮的情况。&lt;/p&gt;
&lt;h3 id=&#34;面向最终用户的应用管理平台&#34;&gt;面向最终用户的应用管理平台&lt;/h3&gt;
&lt;p&gt;这部分白皮书中并未详细提及，但这也是我们现阶段的主要工作和努力方向，经过不到一年的时间，OAM 的概念、思想已经基本成熟，而基于 OAM 的实现也已经出现 -  Crossplane 项目，该项目目前为 CNCF 的 &lt;a href=&#34;https://www.cncf.io/sandbox-projects/&#34;&gt;Sandbox&lt;/a&gt; 项目。&lt;/p&gt;
&lt;p&gt;Crossplane 的出现解决了平台维护者，也就是负责维护 Kubernetes 的基础设施工程师的难题。但是对于应用研发和运维人员，也就是 OAM 的最终用户，操作起来并不是十分的友好。基础设施工程师为他们提供了一堆 CRD，他们必须逐个去挑选、测试和甄别，尤其是一些运维特征（Trait）可能存在功能冲突，不能同时与一个业务组件（Component）绑定，这都都要应用研发和运维人员自己去学习和测试，虽然可以通过文档来规范，但显然这样做并不优雅，这时 OAM App Engine（暂定名 RdurX）就出现了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gh3da963ouj20sj0at0ux.jpg&#34; alt=&#34;OAM App Engine 所在位置&#34;&gt;&lt;/p&gt;
&lt;p&gt;OAM App Engine 的目标用户群体是应用开发者，是希望终端开发者用户可以感受到 OAM 提倡的各类应用管理理念带来的价值。相比于其他基于 K8s 的应用管理平台（如 &lt;a href=&#34;https://github.com/rancher/rio&#34;&gt;rio&lt;/a&gt; ），OAM App Engine 将至少具备如下三大核心价值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插件系统：App Engine 可以通过 OAM 具备快速纳管 operator 的能力，轻松扩展各种能力。&lt;/li&gt;
&lt;li&gt;用户体验：贴近开发者，一切设计以最终开发者使用体验至上，复杂的概念做抽象，用户熟悉的概念不隐藏。&lt;/li&gt;
&lt;li&gt;最佳实践：App Engine 将成为 OAM 实现的最佳实践。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gh3cutnty0j227415w1kx.jpg&#34; alt=&#34;OAM 架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;OAM App Engine 由 CLI 命令行工具、 Dashboard UI 管理页面和一系列编排文件/DSL 组成，目前还处于功能设计与开发当中，预计在8月底会和用户见面。OAM App Engine 的开发者均来自 OAM 中国社区，来自不同的公司和组织，是真正的从社区中来，服务社区用户。&lt;/p&gt;
&lt;p&gt;欢迎对 OAM 有兴趣的朋友加入，社区每双周都会进行视频例会，欢迎大家发表自己的见解或提出相关疑问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/wap360/ad5fbf65gy1gh3cx41p0gj20nc0uqtfu.jpg&#34; alt=&#34;OAM 中国社区&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;《云原生架构白皮书》的编写集合了阿里云众多技术专家，基于这些年阿里云海量的技术实践，对云原生这一当下十分火爆概念进行了十分深入的剖析，在分享知识和实践经验的同时还对云原生相关技术、架构设计和发展趋势等内容进行分析和描述，为那些对于云原生这一概念还十分陌生和迷茫的开发者/管理者提供了一份干货满满的参考资料。这里借用白皮书序言里的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;云计算的下一站，就是云原生；&lt;/p&gt;
&lt;p&gt;IT 架构的下一站，就是云原生架构 ;&lt;/p&gt;
&lt;p&gt;希望所有的开发者、架构师和技术决策者们，共同定义、共同迎接云原生时代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《云原生架构白皮书》下载链接 ： &lt;a href=&#34;https://developer.aliyun.com/topic/download?id=721&#34;&gt;https://developer.aliyun.com/topic/download?id=721&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/topic/download?id=721&#34;&gt;《云原生架构白皮书》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基 Kubernetes 与 OAM 构建统一、标准化的应用管理平台&lt;/li&gt;
&lt;li&gt;OAM App Engine CLI 设计文档【实现基准】&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: ChaosBlade：从零开始的混沌工程（四）</title>
      <link>https://guoxudong.io/post/start-chaosblade-3/</link>
      <pubDate>Wed, 22 Jul 2020 17:30:53 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-chaosblade-3/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上篇文章中，我们介绍了如何使用 &lt;strong&gt;ChaosBlade Operator&lt;/strong&gt; 对 pod 资源进行混沌实验。从本章将继续对 Kubernetes Node 资源的混沌实验进行讲解，同时也配套了 &lt;a href=&#34;https://katacoda.com/&#34;&gt;katacode&lt;/a&gt; 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chaosblade.io/&#34;&gt;chaosblade.io&lt;/a&gt; 官网已经正式上线，在官网的&lt;a href=&#34;https://chaosblade.io/try/&#34;&gt;互动教程&lt;/a&gt;模块，也可以找到 ChaosBlade 的 KataCoda 教程，目前官网由我维护，有任何问题，欢迎在 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-website/issues&#34;&gt;ISSUE&lt;/a&gt; 中进行反馈。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;KataCoda 教程：《ChaosBlade Node 实验场景》&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-node-experiment&#34;&gt;https://katacoda.com/guoxudong/courses/chaosblade/chaosblade-node-experiment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;

&lt;h2 id=&#34;实验对象node&#34;&gt;实验对象：Node&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，节点（Node）是执行工作的机器，以前叫做 minion。根据你的集群环境，节点可以是一个虚拟机或者物理机器。每个节点都包含用于运行 pods 的必要服务，并由主控组件管理。节点上的服务包括 容器运行时、kubelet 和 kube-proxy。&lt;/p&gt;
&lt;h2 id=&#34;node-实验场景&#34;&gt;Node 实验场景&lt;/h2&gt;
&lt;p&gt;同&lt;a href=&#34;../start-chaosblade-2&#34;&gt;上篇文章&lt;/a&gt;，本篇默认已安装 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34;&gt;guestbook&lt;/a&gt; 应用和 ChaosBlade Operator。&lt;/p&gt;
&lt;h3 id=&#34;节点资源相关场景&#34;&gt;节点资源相关场景&lt;/h3&gt;
&lt;h4 id=&#34;节点-cpu-负载实验场景&#34;&gt;节点 CPU 负载实验场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：指定一个节点，做 CPU 负载 80% 实验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node_cpu_load.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cpu-load&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cpu&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;fullload&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;increase node cpu load by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cpu-percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;选择一个节点，修改 &lt;code&gt;node_cpu_load.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f node_cpu_load.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade cpu-load -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入该 Node 节点，可以看到该节点 CPU 达到预期效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzw9xq77mg20qg06i4qp.gif&#34; alt=&#34;节点 CPU 负载实验&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f node_cpu_load.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade cpu-load&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点网络相关场景&#34;&gt;节点网络相关场景&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;实验前，请先登录 node 节点，使用 &lt;code&gt;ifconfig&lt;/code&gt; 命令查看网卡信息，不是所有系统默认的网卡名称都是 &lt;code&gt;eth0&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;节点网络延迟场景&#34;&gt;节点网络延迟场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：指定节点的本地 32436 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;delay_node_network_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;对 docker20 节点本地端口 32436 访问丢包率 100%。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delay_node_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay-node-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay node network loss&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ens33&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;local-port&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;32436&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;offset&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f delay_node_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade delay-node-network-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 从实验节点访问 Guestbook&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; | telnet 192.168.1.129 &lt;span style=&#34;color:#3677a9&#34;&gt;32436&lt;/span&gt;
Trying 192.168.1.129...
Connected to 192.168.1.129.
Escape character is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
Connection closed by foreign host.
&lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;  0.00s user 0.00s system 35% cpu 0.003 total
telnet 192.168.1.129 &lt;span style=&#34;color:#3677a9&#34;&gt;32436&lt;/span&gt;  0.01s user 0.00s system 0% cpu 3.248 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwhc0n0yg20qg070dou.gif&#34; alt=&#34;节点网络延迟场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delay_node_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delay-node-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;节点网络丢包场景&#34;&gt;节点网络丢包场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：指定节点的 &lt;code&gt;32436&lt;/code&gt; 端口注入丢包率 100% 的故障。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;loss_node_network_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loss_node_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss-node-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;node network loss&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ens33&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;local-port&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;32436&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f loss_node_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade loss-node-network-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该端口为 &lt;code&gt;Guestbook&lt;/code&gt; nodeport 的端口，访问实验端口无响应，但是访问未开启实验的端口可以正常使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取节点 IP&lt;/span&gt;
$ kubectl get node -o wide
NAME       STATUS   ROLES                      AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION       CONTAINER-RUNTIME
docker20   Ready    worker                     3d16h   v1.17.6   192.168.1.129   &amp;lt;none&amp;gt;        Ubuntu 18.04.4 LTS   4.15.0-101-generic   docker://19.3.11
kk         Ready    controlplane,etcd,worker   4d16h   v1.17.6   192.168.4.210   &amp;lt;none&amp;gt;        Ubuntu 18.04.4 LTS   4.15.0-101-generic   docker://19.3.11
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 从实验节点访问 Guestbook - 无法访问&lt;/span&gt;
$ telnet 192.168.1.129 &lt;span style=&#34;color:#3677a9&#34;&gt;32436&lt;/span&gt;
Trying 192.168.1.129...
telnet: connect to address 192.168.1.129: Operation timed out
telnet: Unable to connect to remote host
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 从非实验节点访问 Guestbook - 正常访问&lt;/span&gt;
$ telnet 192.168.4.210 &lt;span style=&#34;color:#3677a9&#34;&gt;32436&lt;/span&gt;
Trying 192.168.4.210...
Connected to 192.168.4.210.
Escape character is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1ggzwjjyj67g20qg07c4az.gif&#34; alt=&#34;节点网络丢包场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;同样也可以直接从浏览器访问地址，验证实验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f loss_node_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade loss-node-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;节点域名访问异常场景&#34;&gt;节点域名访问异常场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：本实验通过修改 Node 的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;dns_node_network_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dns_node_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dns-node-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dns&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;dns node network by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;domain&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;www.baidu.com&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10.0.0.1&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f dns_node_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade dns-node-network-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 node&lt;/span&gt;
$ ssh kk@192.168.1.129
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping www.baidu.com&lt;/span&gt;
$ ping www.baidu.com
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 无响应&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwluapg5g20qg07011a.gif&#34; alt=&#34;节点域名访问异常场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 Node 的 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件被修改，模拟了 dns 解析异常的场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f dns_node_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade dns-node-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点磁盘相关场景&#34;&gt;节点磁盘相关场景&lt;/h3&gt;
&lt;p&gt;kubernetes 节点磁盘场景。&lt;/p&gt;
&lt;h4 id=&#34;节点磁盘填充场景&#34;&gt;节点磁盘填充场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：指定节点磁盘占用 80%&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;fill_node_disk_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fill_node_disk_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;fill-node-disk-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;disk&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;fill&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;node disk fill&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f fill_node_disk_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade fill-node-disk-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以看到磁盘占用 80%。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 node&lt;/span&gt;
$ ssh kk@192.168.1.129
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看磁盘使用率&lt;/span&gt;
$ df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            7.9G     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;  7.9G   0% /dev
tmpfs           1.6G  2.2M  1.6G   1% /run
/dev/sda2        98G   73G   20G  79% /
tmpfs           7.9G     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;  7.9G   0% /dev/shm
tmpfs           5.0M     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;  5.0M   0% /run/lock
tmpfs           7.9G     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;  7.9G   0% /sys/fs/cgroup
/dev/loop1       90M   90M     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; 100% /snap/core/8268
tmpfs           1.6G     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;  1.6G   0% /run/user/1000
/dev/loop0       98M   98M     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; 100% /snap/core/9289
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1ggzwq8gdtrg20t406k7fr.gif&#34; alt=&#34;节点磁盘填充场景&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f fill_node_disk_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade fill-node-disk-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点进程相关场景&#34;&gt;节点进程相关场景&lt;/h3&gt;
&lt;p&gt;kubernetes 节点进程相关场景。&lt;/p&gt;
&lt;h4 id=&#34;杀节点上指定进程&#34;&gt;杀节点上指定进程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：此实验会删除指定节点上的 &lt;code&gt;redis-server&lt;/code&gt; 进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;kill_node_process_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill_node_process_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kill-node-process-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kill&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kill node process by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-server&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f kill_node_process_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade kill-node-process-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 node&lt;/span&gt;
$ ssh kk@192.168.1.129
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看 redis-server 进程号&lt;/span&gt;
$ ps -ef | grep redis-server
root     &lt;span style=&#34;color:#3677a9&#34;&gt;31327&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;31326&lt;/span&gt;  &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; 06:15 ?        00:00:00 redis-server *:6379
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 可以看到进程号发生了变化&lt;/span&gt;
$ ps -ef | grep redis-server
root      &lt;span style=&#34;color:#3677a9&#34;&gt;2873&lt;/span&gt;  &lt;span style=&#34;color:#3677a9&#34;&gt;2872&lt;/span&gt;  &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; 06:23 ?        00:00:00 redis-server *:6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;redis-server&lt;/code&gt; 的进程号发生改变，说明被杀掉后，又被重新拉起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65ly1ggzwsx3sbig20t407a4d6.gif&#34; alt=&#34;杀节点上指定进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f kill_node_process_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade kill-node-process-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;挂起节点上指定进程&#34;&gt;挂起节点上指定进程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：此实验会挂起指定节点上的 &lt;code&gt;redis-server&lt;/code&gt; 进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择一个节点，修改 &lt;code&gt;stop_node_process_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;names&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stop_node_process_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;stop-node-process-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;node&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;stop&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kill node process by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker20&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;process&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-server&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f stop_node_process_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade stop-node-process-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 node&lt;/span&gt;
$ ssh kk@192.168.1.129
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看 redis-server 进程号&lt;/span&gt;
$ ps aux| grep redis-server
root      &lt;span style=&#34;color:#3677a9&#34;&gt;5632&lt;/span&gt;  0.0  0.0  &lt;span style=&#34;color:#3677a9&#34;&gt;41520&lt;/span&gt;  &lt;span style=&#34;color:#3677a9&#34;&gt;4168&lt;/span&gt; ?        Tl   06:28   0:06 redis-server *:6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 &lt;code&gt;redis-server&lt;/code&gt; 此刻进程处于暂停状态了（T）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggzwuoz52eg20t407w7m0.gif&#34; alt=&#34;挂起节点上指定进程&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f stop_node_process_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade stop-node-process-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本篇我们使用 ChaosBlade Operator 对 Kubernetes Node 资源进行混沌工程实验，可以看到对于 Node 节点，ChaosBlade 依旧有简单的配置及操作来完成复杂的实验，可以通过自由组合，实现各种 Node 节点级别的复杂故障，验证 Kubernetes 集群的稳定性及可用性。同时当真正的故障来临时，由于早已模拟了各种故障情况，可以快速定位故障源，做到处变不惊，轻松处理故障。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Istio 升级新方式：金丝雀升级</title>
      <link>https://guoxudong.io/post/istio-upgrade/</link>
      <pubDate>Wed, 08 Jul 2020 15:08:09 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/istio-upgrade/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;自 1.5 版本开始，Istio 就弃用了之前使用 &lt;code&gt;Helm&lt;/code&gt; 的安装方式。而 1.6 发布也有一段时间了，目前都已经到了 &lt;code&gt;1.6.4&lt;/code&gt; 版本，就升级部分，Istio 1.6 推出了渐进式的升级方式：金丝雀升级，为相对头疼的 Istio 升级问题提供了一种解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Istio 不支持跨版本升级。本文仅讲解从 1.5 版本升级到 1.6 版本。如果您使用的是旧版本，请先升级到 1.5 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;金丝雀升级&#34;&gt;金丝雀升级&lt;/h2&gt;
&lt;p&gt;顾名思义，金丝雀升级可以让新老版本的 &lt;code&gt;istiod&lt;/code&gt; 同时存在，并允许将所有流量在由新版控制平面 &lt;code&gt;istiod-canary&lt;/code&gt; 控制之前，先将一小部分工作负载交由新版本 &lt;code&gt;istiod-canary&lt;/code&gt; 控制，并进行监控，渐进式的完成升级。该方式比原地升级安全的多，也是现在推荐的升级方式。&lt;/p&gt;
&lt;h3 id=&#34;控制平面升级&#34;&gt;控制平面升级&lt;/h3&gt;
&lt;p&gt;首先需要&lt;a href=&#34;https://github.com/istio/istio/releases&#34;&gt;下载新版本 Istio&lt;/a&gt; 并切换目录为新版本目录。&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;canary&lt;/code&gt;版本，将&lt;code&gt;revision&lt;/code&gt;字段设置为&lt;code&gt;canary&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl install --set &lt;span style=&#34;color:#40ffff&#34;&gt;revision&lt;/span&gt;=canary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里会部署新的 &lt;code&gt;istiod-canary&lt;/code&gt;，但并不会对原有的控制平面造成影响，部署成功后会看到两个并行的 &lt;code&gt;istiod&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods -n istio-system
NAME                                        READY   STATUS    RESTARTS   AGE
pod/istiod-85745c747b-knlwb                 1/1     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          33m
pod/istiod-canary-865f754fdd-gx7dh          1/1     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          3m25s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里还可以看到新版的 &lt;code&gt;sidecar injector&lt;/code&gt; 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get mutatingwebhookconfigurations
NAME                            CREATED AT
istio-sidecar-injector          2020-07-07T08:39:37Z
istio-sidecar-injector-canary   2020-07-07T09:06:24Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数据平面升级&#34;&gt;数据平面升级&lt;/h3&gt;
&lt;p&gt;只安装 &lt;code&gt;canary&lt;/code&gt; 版本的控制平面并不会对现有的代理造成影响，要升级数据平面，并将他们指向新的控制平面，就需要在 namespace 中插入 &lt;code&gt;istio.io/rev&lt;/code&gt; 标签。&lt;/p&gt;
&lt;p&gt;例如，想要要升级 &lt;code&gt;default&lt;/code&gt; namespace 的数据平面，需要添加 &lt;code&gt;istio.io/rev&lt;/code&gt; 标签并删除&lt;code&gt;istio-injection&lt;/code&gt;标签，以指向 &lt;code&gt;canary&lt;/code&gt; 版本的控制平面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl label namespace default istio-injection- istio.io/rev=canary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：&lt;code&gt;istio-injection&lt;/code&gt; 标签必须删除，因为该标签的优先级高于 &lt;code&gt;istio.io/rev&lt;/code&gt; 标签，保留该标签将导致无法升级数据平面。&lt;/p&gt;
&lt;p&gt;在 namespace 更新成功后，需要重启 Pod 来重新注入 Sidecar：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl rollout restart deployment -n default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当重启成功后，该 namespace 的 pod 将被配置指向新的&lt;code&gt;istiod-canary&lt;/code&gt;控制平面，使用如下命令查看启用新代理的 Pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods -n default -l istio.io/rev=canary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时可以使用如下命令验证新 Pod 的控制平面为&lt;code&gt;istiod-canary&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ istioctl proxy-config endpoints &lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;pod_name&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;.default --cluster xds-grpc -ojson | grep hostname
    &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;istiod-canary.istio-system.svc&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时 &lt;code&gt;default&lt;/code&gt; namespace 内的 Pod 就完成了金丝雀升级，接下来就可以进行验证，确定这些 Pod 有没有因为 Istio 升级而导致功能异常。&lt;/p&gt;
&lt;h2 id=&#34;原地升级--降级&#34;&gt;原地升级 &amp;amp; 降级&lt;/h2&gt;
&lt;p&gt;目前原地升级有很大的概率通不过升级检测，导致无法升级，不推荐这种升级方式，这里就不做介绍了，详情见&lt;a href=&#34;https://istio.io/latest/docs/setup/upgrade/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;并且虽然 Istio 提供了降级方式，但是经过测试降级的体验并不好，并且出现了由于不支持的 CRD &lt;code&gt;apiVersion&lt;/code&gt; 导致无法降级的情况，所以请谨慎升级。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总体来说，金丝雀升级的出现很好的解决了控制平面渐进式升级的需求，但是由于&lt;code&gt;istioctl upgrade&lt;/code&gt;命令支持的场景和版本太少以及 Istio 整体架构的更改，目前的原地升级体验很差。最近还爆出了谷歌将把 Istio 捐给一个新成立基金会的消息，看来 Istio 要走的路还很长。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/setup/upgrade/&#34;&gt;Upgrade Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 基于 Flagger 和 Nginx-Ingress 实现金丝雀发布</title>
      <link>https://guoxudong.io/post/flagger-nginx-ingress/</link>
      <pubDate>Thu, 02 Jul 2020 13:51:14 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/flagger-nginx-ingress/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;很久之前我写过一篇介绍使用 Nginx-Ingress 实现蓝绿部署和金丝雀发布的文章，但那篇文章只是介绍了 nginx-ingress 具备这些能力，真正应用还要很多额外的配置和操作，况且现在能实现这些功能的并不只有 nginx-ingress，Service Mesh 工具如：Istio，App Mesh，Linkerd；Ingress Controller 如：Contour，Gloo，NGINX 都能实现，而我们需要的更多是进行金丝雀发布之后指标的监控，流量的调整以及出现问题后的及时回滚。而 Flagger 就是这样一个帮助我们解决上面这些问题的开源工具。&lt;/p&gt;
&lt;h2 id=&#34;flagger&#34;&gt;Flagger&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/weaveworks/flagger&#34;&gt;Flagger&lt;/a&gt; 是一种渐进式交付工具，可自动控制 Kubernetes 上应用程序的发布过程。通过指标监控和运行一致性测试，将流量逐渐切换到新版本，降低在生产环境中发布新软件版本导致的风险。&lt;/p&gt;
&lt;p&gt;Flagger 使用 Service Mesh（App Mesh，Istio，Linkerd）或 Ingress Controller（Contour，Gloo，NGINX）来实现多种部署策略（金丝雀发布，A/B 测试，蓝绿发布）。对于发布分析，Flagger 可以查询 Prometheus、Datadog 或 CloudWatch，并使用 Slack、MS Teams、Discord 和 Rocket 来发出告警通知。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要介绍 Flagger 使用 Nginx-Ingress 进行金丝雀发布并监控发布状态，更多内容见&lt;a href=&#34;https://docs.flagger.app/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1ggclsv45tqj21ok0skwfb.jpg&#34; alt=&#34;Flagger NGINX Ingress Controller&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;h4 id=&#34;版本要求&#34;&gt;版本要求&lt;/h4&gt;
&lt;p&gt;安装 Flagger 需要 Kubernetes 版本高于 &lt;strong&gt;v1.14&lt;/strong&gt;，NGINX ingress 版本高于 &lt;strong&gt;0.24&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;安装-nginx-ingress&#34;&gt;安装 NGINX ingress&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create ns ingress-nginx
$ helm upgrade -i nginx-ingress stable/nginx-ingress &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--namespace ingress-nginx &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set controller.metrics.enabled=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set controller.podAnnotations.&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;prometheus\.io/scrape&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set controller.podAnnotations.&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;prometheus\.io/port&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;10254&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装部署&#34;&gt;安装部署&lt;/h3&gt;
&lt;h4 id=&#34;flagger-安装&#34;&gt;Flagger 安装&lt;/h4&gt;
&lt;p&gt;Flagger 提供了 Hlem 和 Kustomize 两种安装方式，这里使用 Helm 3 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm repo add flagger https://flagger.app
$ helm upgrade -i flagger flagger/flagger &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--namespace ingress-nginx &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set prometheus.install=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set &lt;span style=&#34;color:#40ffff&#34;&gt;meshProvider&lt;/span&gt;=nginx &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set slack.url=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set slack.channel=flagger &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set slack.user=flagger
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是这里我选择了 Slack 作为通知软件，需要在自己的 &lt;code&gt;#channel&lt;/code&gt; 内新增一个 APP，并将该 APP 的 &lt;code&gt;url&lt;/code&gt;、&lt;code&gt;channel&lt;/code&gt;、&lt;code&gt;user&lt;/code&gt; 填入上面的命令中。这里设置的是全局通知，集群中的 Flagger 被触发后都会进行通知，当然也可以为单个 Flagger 配置专门的通知，这里就不做过多介绍，详情见&lt;a href=&#34;https://docs.flagger.app/usage/alerting&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;示例安装&#34;&gt;示例安装&lt;/h4&gt;
&lt;p&gt;新建测试 namespace：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create ns &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署示例 deployment 和 horizontal pod autoscaler：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -k github.com/weaveworks/flagger//kustomize/podinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署负载测试器，以便在金丝雀发布时进行流量分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm upgrade -i flagger-loadtester flagger/loadtester --namespace=&lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;部署 ingress，这里的 &lt;code&gt;app.example.com&lt;/code&gt; 需要改成你自己的域名，如果是在本地进行测试，则修改本机和负载测试器所在节点的 &lt;code&gt;/ect/hosts&lt;/code&gt;，将其指向你的 ADDRESS，否则将无法进行流量分析，导致部署失败。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;networking.k8s.io/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rules&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;host&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;app.example.com&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;http&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;paths&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;backend&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;serviceName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;servicePort&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将以上内容另存为 &lt;code&gt;podinfo-ingress.yaml&lt;/code&gt;，然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f ./podinfo-ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建一个 Canary 资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;flagger.app/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Canary&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;provider&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# deployment reference&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;targetRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ingress reference&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;ingressRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;networking.k8s.io/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# HPA reference (optional)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;autoscalerRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;autoscaling/v2beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;HorizontalPodAutoscaler&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# the maximum time in seconds for the canary deployment&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# to make progress before it is rollback (default 600s)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;progressDeadlineSeconds&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;service&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ClusterIP port number&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# container port number or name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;9898&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;analysis&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 时间间隔 (默认 60s)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;10s&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 回滚前的最大失败指标检查次数&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;threshold&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 路由到金丝雀副本的最大流量百分比&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 百分比 (0-100)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;maxWeight&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 金丝雀每次递增的百分比&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 百分比 (0-100)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;stepWeight&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# NGINX Prometheus checks&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metrics&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;request-success-rate&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# minimum req success rate (non 5xx responses)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# percentage (0-100)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;thresholdRange&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;min&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# testing (optional)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;webhooks&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;acceptance-test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pre-rollout&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;http://flagger-loadtester.test/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;30s&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;bash&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cmd&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;curl -sd &amp;#39;test&amp;#39; http://podinfo-canary/token | grep token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;load-test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;http://flagger-loadtester.test/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;5s&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cmd&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hey -z 1m -q 10 -c 2 http://app.example.com/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将以上内容另存为 &lt;code&gt;podinfo-canary.yaml&lt;/code&gt;，然后应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f ./podinfo-canary.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目前可以看到示例应用 &lt;code&gt;podinfo&lt;/code&gt; 已经安装完毕，并出现了 &lt;code&gt;podinfo&lt;/code&gt; 和 &lt;code&gt;podinfo-primary&lt;/code&gt; 两个版本，并且 &lt;code&gt;http://app.example.com/&lt;/code&gt; 已经可以访问：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy,svc,ing -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;
NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/flagger-loadtester   1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           29h
deployment.apps/podinfo              0/0     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;           29h
deployment.apps/podinfo-primary      2/2     &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;           29s

NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
service/flagger-loadtester   ClusterIP   10.43.116.74    &amp;lt;none&amp;gt;        80/TCP    29h
service/podinfo              ClusterIP   10.43.155.193   &amp;lt;none&amp;gt;        80/TCP    9s
service/podinfo-canary       ClusterIP   10.43.194.226   &amp;lt;none&amp;gt;        80/TCP    29s
service/podinfo-primary      ClusterIP   10.43.254.13    &amp;lt;none&amp;gt;        80/TCP    29s

NAME                                HOSTS             ADDRESS                       PORTS   AGE
ingress.extensions/podinfo          app.example.com   192.168.1.129,192.168.4.210   &lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;      5h17m
ingress.extensions/podinfo-canary   app.example.com                                 &lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;      9s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个页面会展示 &lt;code&gt;podinfo&lt;/code&gt; 的版本已经其正在访问的 pod 名称：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcndtuqzsj21ha0q940s.jpg&#34; alt=&#34;app.example.com&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动金丝雀发布&#34;&gt;自动金丝雀发布&lt;/h3&gt;
&lt;p&gt;现在起发布由 Flagger 控制，在部署新版本后，Flagger 自动将流量按照比例切换到新版本上，同时监控性能指标，例如 HTTP 请求的成功率、请求的平均持续时间和 pod 运行状态，经过分析后提升流量或者回滚，并通知到 Slack。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1ggcng8c8vnj21q40t6q3n.jpg&#34; alt=&#34;自动金丝雀发布&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过更新镜像版本触发金丝雀部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;set&lt;/span&gt; image deployment/podinfo &lt;span style=&#34;color:#40ffff&#34;&gt;podinfod&lt;/span&gt;=stefanprodan/podinfo:3.1.1
deployment.apps/podinfo image updated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到初始化完成后已经有 5% 的流量切换到新版本了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; describe canary/podinfo
...
Status:
  Canary Weight:  &lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt;
  Conditions:
    Last Transition Time:  2020-07-02T07:21:26Z
    Last Update Time:      2020-07-02T07:21:26Z
    Message:               New revision detected, progressing canary analysis.
    Reason:                Progressing
    Status:                Unknown
    Type:                  Promoted
  Failed Checks:           &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;
  Iterations:              &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;
  Last Applied Spec:       c8bdf98d5
  Last Transition Time:    2020-07-02T07:22:05Z
  Phase:                   Progressing
  Tracked Configs:
Events:
  Type     Reason  Age                From     Message
  ----     ------  ----               ----     -------
  Warning  Synced  10m                flagger  podinfo-primary.test not ready: waiting &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; rollout to finish: observed deployment generation less &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;then&lt;/span&gt; desired generation
  Warning  Synced  10m                flagger  podinfo-primary.test not ready: waiting &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; rollout to finish: &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; of &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; updated replicas are available
  Normal   Synced  10m (x3 over 10m)  flagger  all the metrics providers are available!
  Normal   Synced  10m                flagger  Initialization &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;done&lt;/span&gt;! podinfo.test
  Normal   Synced  41s                flagger  New revision detected! Scaling up podinfo.test
  Warning  Synced  31s                flagger  canary deployment podinfo.test not ready: waiting &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; rollout to finish: &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; of &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; updated replicas are available
  Warning  Synced  21s                flagger  canary deployment podinfo.test not ready: waiting &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; rollout to finish: &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; of &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; updated replicas are available
  Warning  Synced  11s                flagger  canary deployment podinfo.test not ready: waiting &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; rollout to finish: &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; of &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; updated replicas are available
  Normal   Synced  1s                 flagger  Starting canary analysis &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; podinfo.test
  Normal   Synced  1s                 flagger  Pre-rollout check acceptance-test passed
  Normal   Synced  1s                 flagger  Advance podinfo.test canary weight &lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;watch&lt;/code&gt; 也能实时看到部署流量的权重，根据上面的设置，新版本权重大于 50% 就认为部署成功，流量将全部切换到新版本，并完成金丝雀部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces                                     guoxudongdeMacBook-Pro.local: Thu Jul  &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; 15:23:35 &lt;span style=&#34;color:#3677a9&#34;&gt;2020&lt;/span&gt;

NAMESPACE   NAME      STATUS        WEIGHT   LASTTRANSITIONTIME
&lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;        podinfo   Progressing   &lt;span style=&#34;color:#3677a9&#34;&gt;45&lt;/span&gt;       2020-07-02T07:23:25Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开始部署时的 Slack 通知：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65ly1ggcnsojp0kj20kj07kdgc.jpg&#34; alt=&#34;Slack 通知&#34;&gt;&lt;/p&gt;
&lt;p&gt;页面上也能看出变化，访问到新版本的概率会越来越高，以蓝色和绿色的圆代表新版本和老版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65ly1ggco0nxzdrj21h80q8gnu.jpg&#34; alt=&#34;金丝雀发布&#34;&gt;&lt;/p&gt;
&lt;p&gt;发布成功后，会收到 Slack 通知：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1ggco2mdlphj20kq01h0sn.jpg&#34; alt=&#34;Slack 通知&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动回滚&#34;&gt;自动回滚&lt;/h3&gt;
&lt;p&gt;当然，有自动发布就会有自动回滚，下面就通过手动触发状态码 500 异常，演示暂停发布并回滚。&lt;/p&gt;
&lt;p&gt;部署一个新版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;set&lt;/span&gt; image deployment/podinfo &lt;span style=&#34;color:#40ffff&#34;&gt;podinfod&lt;/span&gt;=stefanprodan/podinfo:3.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;触发状态码 500 异常：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ watch curl http://app.example.com/status/500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待一会儿，就可以看到部署失败并回滚：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ watch kubectl get canaries --all-namespaces
Every 2.0s: kubectl get canaries --all-namespaces                                     guoxudongdeMacBook-Pro.local: Thu Jul  &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; 15:45:24 &lt;span style=&#34;color:#3677a9&#34;&gt;2020&lt;/span&gt;

NAMESPACE   NAME      STATUS   WEIGHT   LASTTRANSITIONTIME
&lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;        podinfo   Failed   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;        2020-07-02T07:45:16Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发布失败，也会收到 Slack 通知：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1ggcobt1f0bj20kd01vmx1.jpg&#34; alt=&#34;失败 Slack 通知&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ab-测试&#34;&gt;A/B 测试&lt;/h3&gt;
&lt;p&gt;除了加权路由，Flagger 还可以根据 HTTP 匹配条件将流量路由到新版本（当然，这个 Nginx-Ingress 的功能，Flagger 只是简化了操作）。可以根据 HTTP header 和 cookie 来定位用户并细分受众，对于需要关联会话的前端应用十分有用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65ly1ggcoglbmnyj217q0q0q3h.jpg&#34; alt=&#34;A/B 测试&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改 Canary 资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;flagger.app/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Canary&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;provider&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# deployment reference&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;targetRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ingress reference&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;ingressRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;networking.k8s.io/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# HPA reference (optional)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;autoscalerRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;autoscaling/v2beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;HorizontalPodAutoscaler&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;podinfo&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# the maximum time in seconds for the canary deployment&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# to make progress before it is rollback (default 600s)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;progressDeadlineSeconds&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;service&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ClusterIP port number&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;port&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# container port number or name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;targetPort&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;9898&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;analysis&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;threshold&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;iterations&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;match&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# curl -H &amp;#39;X-Canary: insider&amp;#39; http://app.example.com&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;headers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;x-canary&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;exact&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;insider&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# curl -b &amp;#39;canary=always&amp;#39; http://app.example.com&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;headers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cookie&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;exact&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;canary&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metrics&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;request-success-rate&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;thresholdRange&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;min&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;interval&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;1m&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;webhooks&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;load-test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;url&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;http://flagger-loadtester.test/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;5s&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;cmd&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hey -z 1m -q 10 -c 2 -H &amp;#39;Cookie: canary=always&amp;#39; http://app.example.com/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上面的配置可以看到，将 headers 为 &lt;code&gt;X-Canary: insider&lt;/code&gt; 或 cookie 为 &lt;code&gt;canary=always&lt;/code&gt; 的请求路由到新版本。&lt;/p&gt;
&lt;p&gt;部署一个新版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;set&lt;/span&gt; image deployment/podinfo &lt;span style=&#34;color:#40ffff&#34;&gt;podinfod&lt;/span&gt;=stefanprodan/podinfo:3.1.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以收到 Slack 通知：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1ggcorvilrrj20kb07wdgb.jpg&#34; alt=&#34;A/B 测试 Slack 通知&#34;&gt;&lt;/p&gt;
&lt;p&gt;正常访问，还是访问到老的 &lt;code&gt;v3.1.1&lt;/code&gt; 版：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl http://app.example.com
{
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;podinfo-primary-5dc6b76bd5-8sbh8&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3.1.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;#34577c&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;logo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;greetings from podinfo v3.1.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goos&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goarch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;go1.13.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_goroutine&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;11&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_cpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请求添加指定 header，访问到新的 &lt;code&gt;v3.1.3&lt;/code&gt; 版：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -H &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;X-Canary: insider&amp;#39;&lt;/span&gt; http://app.example.com
{
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3.1.3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;#34577c&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;logo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goos&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goarch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;go1.13.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_goroutine&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_cpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请求添加指定 cookie，访问到新的 &lt;code&gt;v3.1.3&lt;/code&gt; 版：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -b &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;canary=always&amp;#39;&lt;/span&gt; http://app.example.com
{
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;podinfo-58bdd78d6f-m9bsc&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3.1.3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;7b6f11780ab1ce8c7399da32ec6966215b8e43aa&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;#34577c&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;logo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://raw.githubusercontent.com/stefanprodan/podinfo/gh-pages/cuddle_clap.gif&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;greetings from podinfo v3.1.3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goos&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;goarch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;go1.13.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_goroutine&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;num_cpu&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器中访问也能得到相同的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1ggcoy65l47j20yb0dvq49.jpg&#34; alt=&#34;添加 cookie 在浏览器中访问&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;最早了解 Flagger 其实是因为其与 Istio 的关系，Flagger 默认的 meshProvider 就是 Istio。但是在深入了解后，发现其对市面上常见的 Service Mesh 和 Ingress Controller 都有较好的支持，通过与 Prometheus 以及负载测试器的配合可以进行细粒度的分析，从而提高了发布质量，同时还降低了人工操作出错的可能性。&lt;/p&gt;
&lt;p&gt;最近 &lt;a href=&#34;https://oam.dev/&#34;&gt;OAM 社区&lt;/a&gt;也放出了基于 Flagger 的部署 Trait 的示例，相信之后与 OAM 结合使用可以在持续部署和应用管理领域发挥更大的作用。&lt;/p&gt;
&lt;p&gt;想了解 OAM 可以查看我之前的文章：&lt;a href=&#34;../start-oam&#34;&gt;《以应用为中心：开放应用模型（OAM）初探》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm3j2vo79g20b90b9x6r.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 以应用为中心：开放应用模型（OAM）初探</title>
      <link>https://guoxudong.io/post/start-oam/</link>
      <pubDate>Sun, 28 Jun 2020 14:53:23 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-oam/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;不久前，Kubernetes 也迎来了他 6 岁的生日，在这 6 年中，从孵化之初的三足鼎立，到后来的一统天下，Kubernetes 成为容器编排领域的事实标准已经有段时间了。在这期间，云原生的概念开始深入人心，越来越的公司组织和开发者开始接受、了解、实践云原生。如今，已有无数的应用以容器的形式运行在各种版本 Kubernetes 中了。&lt;/p&gt;
&lt;h2 id=&#34;应用管理之惑&#34;&gt;应用管理之惑&lt;/h2&gt;
&lt;p&gt;然而我们慢慢发现，随着应用和服务数量、使用场景以及承载业务的增加，Kubernetes 资源越来越难以管理。比如，有时候可能多个运维人员重复为一个 Deployment 配置了多个 Service 或 Ingress，而在一个 namespace 中动辄就有上百个 Service，在这些 Service 中找到那些重复、无效、甚至错误的 Service 可不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;上面描述的只是运维人员内部可能存在的冲突，更多的冲突来自开发与运维人员之间，由于各自关注的角度不同，出现了对 Deployment 配置权的争夺，他们各自关心的字段不尽相同，但同时还要面对同一份 &lt;code&gt;deployment.yaml&lt;/code&gt;，这就是冲突的根源。我们的做法是使用 kustomize 将一份 &lt;code&gt;deployment.yaml&lt;/code&gt; 分成不同的 &lt;a href=&#34;https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#overlay&#34;&gt;overlays&lt;/a&gt;，将开发和运维关注的字段分开管理，而这只是缓兵之计，依旧没有一个统一的配置文件来描述整个应用，比如这个应用由几个 Deployment、Service、 Ingress 组成，一个新手如果想要查看一个资源相关的其他资源，只能通过 label 和“相似”的名称去找或者猜。而这样做显然是很危险的，这也是为什么我不敢轻易清理生产环境中无用的 Service 和 ConfigMap 的原因，你永远也想不到有什么地方可能引用了他们。&lt;/p&gt;
&lt;p&gt;相对标准 Kubernetes 资源，Operator 的管理难度就更大了，各式各样的 Operator 存在于我的 Kubernetes 集群中，&lt;code&gt;kubectl get crd&lt;/code&gt; 命令输出的结果更是长的可怕。&lt;/p&gt;
&lt;p&gt;而开放应用模型（OAM）可能是助我脱离苦海的一味良药。&lt;/p&gt;
&lt;h2 id=&#34;开放应用模型oam&#34;&gt;开放应用模型（OAM）&lt;/h2&gt;
&lt;p&gt;OAM 是阿里云与 Azure 在 2019 年末联合推出的标准化云原生应用管理模型。相比于传统 PaaS 封闭、不能同“以 Operator 为基础的云原生生态”衔接的现状，基于 OAM 和 Kubernetes 构建的现代云原生应用管理平台，本质上是一个 &lt;strong&gt;“以应用为中心”&lt;/strong&gt; 的 Kubernetes ，保证了这个应用平台在能够无缝接入整个云原生生态。同时，OAM 可以进一步屏蔽掉容器基础设施的复杂性和差异性，为平台的使用者带来低心智负担的、标准化的、一致的应用管理与交付体验。&lt;/p&gt;
&lt;p&gt;所谓 “应用模型”，其实是一个专门用来对云原生应用本身和它所需运维能力进行定义与描述的标准开源规范。所以对于 Kubernetes 来说，OAM 即是一个标准的“应用定义”项目（类比已经不再活跃的 Kubernetes Application CRD 项目），同时也是一个专注于封装、组织和管理 Kubernetes 中各种 “运维能力”、以及连接 “运维能力” 与 “应用” 的平台层项目。而通过 “定义应用” 和 “组织管理应用的运维能力” 这两大核心功能，我们可以构建一个更容易管理、维护和发展的云原生平台。&lt;/p&gt;
&lt;p&gt;以下是 OAM 的一些基本概念：&lt;/p&gt;
&lt;h3 id=&#34;component&#34;&gt;Component&lt;/h3&gt;
&lt;p&gt;在 OAM 中，&lt;strong&gt;Component（组件）&lt;/strong&gt; 就是一个完全面向业务研发人员设计的、用于定义应用程序而不必考虑其运维详细信息的载体。一个应用程序包含一个或多个 Component 。例如，一个网站应用可以由一个 Java web 组件和一个数据库组件组成。&lt;/p&gt;
&lt;p&gt;OAM 中的 Component 包含两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作负载描述 —— 如何运行此 Component，以及它的运行内容，实际上就是一个完整的 K8s CR；&lt;/li&gt;
&lt;li&gt;可重写参数列表 —— 研发通过这个字段表示该 Component 的哪些字段后续可以被运维或者系统覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trait&#34;&gt;Trait&lt;/h3&gt;
&lt;p&gt;在 OAM 中，我们通过 &lt;strong&gt;Trait（运维特征）&lt;/strong&gt; 来描述和构建具备可发现性和可管理性的平台层能力。&lt;/p&gt;
&lt;p&gt;Trait 是与 Component 绑定的，一个 Component 可以绑定多个 Trait，从而把运维能力也加入到应用描述中，方便底层基础设施统一管理。&lt;/p&gt;
&lt;h3 id=&#34;application-configuration&#34;&gt;Application Configuration&lt;/h3&gt;
&lt;p&gt;最终，通过引用 Component 名称并对它绑定 Trait ，运维人员就可以使用 &lt;strong&gt;ApplicationConfiguration（应用配置）&lt;/strong&gt; 来实例化应用程序。ApplicationConfiguration 的主要功能，就是让应用运维人员（或系统）了解和使用业务研发人员传达的信息，然后自由的为 Component 组合绑定不同的运维能力以相应实现其最终的运维目的。&lt;/p&gt;
&lt;p&gt;下面这张图很好的描述了 OAM 架构的使用场景，开发与运维的&lt;strong&gt;关注点分离&lt;/strong&gt;，而最终都由一份 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 来描述整个应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1gg82h3v1o1j20jg0bg77i.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;上手实践&#34;&gt;上手实践&lt;/h2&gt;
&lt;p&gt;上面只是对 OAM 进行了简单的介绍，由于篇幅有限，如 Scope 这样的概念并没有进行介绍，更多内容欢迎加入 &lt;a href=&#34;https://oam.dev/&#34;&gt;OAM 社区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面就以一个简单的示例，开启我们的 OAM 之旅：&lt;/p&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;p&gt;本示例为官方示例，使用 OAM 部署一个 &lt;code&gt;nginx&lt;/code&gt; 应用，该应用包含 Deployment、Service 和 Ingress。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 集群&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://helm.sh/docs/intro/&#34;&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装控制端&#34;&gt;安装控制端&lt;/h3&gt;
&lt;h4 id=&#34;安装-crossplane-和-oam&#34;&gt;安装 Crossplane 和 OAM&lt;/h4&gt;
&lt;p&gt;注意，这里的 &lt;code&gt;crossplane-oam-sample&lt;/code&gt; 是官方维护的一个 crossplane 示例，只是用作开发和演示，并不是生产可用，关于 crossplane 的更多内容，请见&lt;a href=&#34;https://crossplane.io/&#34;&gt;项目官网&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm repo add oam https://oam-dev.github.io/crossplane-oam-sample/archives/
$ kubectl create namespace oam-system
$ helm install crossplane --namespace oam-system oam/crossplane-oam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里如果由于墙的原因无法拉取 &lt;code&gt;gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1&lt;/code&gt; 镜像，导致 &lt;code&gt;crossplane-oam-localstack&lt;/code&gt; 无法启动的话，可以使用我提供的替代镜像 &lt;code&gt;guoxudongdocker/kube-rbac-proxy:v0.4.1&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;拉取示例仓库&#34;&gt;拉取示例仓库&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oam-dev/catalog.git
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入示例&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; catalog/traits/ingresstrait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-crd-并启动-controller&#34;&gt;部署 CRD 并启动 controller&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 部署 CRD&lt;/span&gt;
$ make install
~/go/bin/controller-gen &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;crd:trivialVersions=true&amp;#34;&lt;/span&gt; rbac:roleName=manager-role webhook &lt;span style=&#34;color:#40ffff&#34;&gt;paths&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./...&amp;#34;&lt;/span&gt; output:crd:artifacts:config=config/crd/bases
kustomize build config/crd | kubectl apply -f -
customresourcedefinition.apiextensions.k8s.io/ingresstraits.core.oam.dev created
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 启动 IngressTrait controller&lt;/span&gt;
$ go run main.go
I0629 11:15:22.035708     &lt;span style=&#34;color:#3677a9&#34;&gt;802&lt;/span&gt; request.go:621] Throttling request took 1.000526734s, request: GET:https://192.168.4.210:6443/apis/apiregistration.k8s.io/v1?timeout=32s
2020-06-29T11:15:22.088+0800    INFO    controller-runtime.metrics      metrics server is starting to listen    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;}
2020-06-29T11:15:22.089+0800    INFO    setup   starting manager
2020-06-29T11:15:22.089+0800    INFO    controller-runtime.manager      starting metrics server {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/metrics&amp;#34;&lt;/span&gt;}
2020-06-29T11:15:22.089+0800    INFO    controller-runtime.controller   Starting EventSource    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kind source: /, Kind=&amp;#34;&lt;/span&gt;}
2020-06-29T11:15:22.193+0800    INFO    controller-runtime.controller   Starting Controller     {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;}
2020-06-29T11:15:22.193+0800    INFO    controller-runtime.controller   Starting workers        {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;worker count&amp;#34;&lt;/span&gt;: 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于这里只是简单演示，没有将 IngressTrait controller 打包成镜像，而是在本地运行 controller，所以需要 go 环境。&lt;/p&gt;
&lt;h3 id=&#34;部署应用&#34;&gt;部署应用&lt;/h3&gt;
&lt;h4 id=&#34;配置-rbac&#34;&gt;配置 RBAC&lt;/h4&gt;
&lt;p&gt;使用命令：&lt;code&gt;kubectl apply -f rbac.yaml&lt;/code&gt;，配置 RBAC。这里需要注意的是官方 IngressTrait 的 sample 示例中并没有 &lt;code&gt;rbac.yaml&lt;/code&gt;，需要我们自己配置，否则的话会在部署时由于权限原因无法拉起 Deployment。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rbac.authorization.k8s.io/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ClusterRole&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;deployment-clusterrole-poc&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rules&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiGroups&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- apps&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- deployments&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;verbs&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;---&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rbac.authorization.k8s.io/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ClusterRoleBinding&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;component-deployment-workload-poc&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;roleRef&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiGroup&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;rbac.authorization.k8s.io&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ClusterRole&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;deployment-clusterrole-poc&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;subjects&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ServiceAccount&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;crossplane-oam&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Remember to use the actual ServiceAccount name&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;oam-system&lt;span style=&#34;color:#666&#34;&gt;             &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Remember to use the actual ServiceAccount namespace&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-component&#34;&gt;部署 Component&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;kubectl apply -f sample_component.yaml &lt;/code&gt; 命令部署 Component，该 Component 中的 workload 为 Deployment。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;core.oam.dev/v1alpha2&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Component&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;example-deploy&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;workload&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;web&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;app&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx:&lt;span style=&#34;color:#3677a9&#34;&gt;1.17&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;web&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-applicationconfiguration&#34;&gt;部署 ApplicationConfiguration&lt;/h4&gt;
&lt;p&gt;可以看到这个 ApplicationConfiguration 中包含一个 Component，而 Component 中又绑定了 一个 IngressTrait 类型的 Trait，由于这只是一个简单示例，所有只有一个 Component 和一个 Trait，在实际的生产环境中，一个 ApplicationConfiguration 可由多个 Component 组成，一个 Component 又可绑定多个 Trait 为其提供诸如流量管控、弹性伸缩等运维特性。&lt;/p&gt;
&lt;p&gt;使用命令：&lt;code&gt;kubectl apply -f sample_application_config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;core.oam.dev/v1alpha2&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ApplicationConfiguration&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;example-appconfig&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;components&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;componentName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;example-deploy&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;traits&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;trait&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;core.oam.dev/v1alpha2&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;IngressTrait&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;example-ingress-trait&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rules&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;host&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx.oam.com&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;paths&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;backend&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;serviceName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;deploy-test&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;servicePort&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;检查结果&#34;&gt;检查结果&lt;/h4&gt;
&lt;p&gt;可以看到 Deployment、Service 和 Ingress 已经部署成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy,svc,ing
NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/web   1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           8m29s

NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/deploy-test   ClusterIP   10.43.170.228   &amp;lt;none&amp;gt;        8080/TCP   8m29s

NAME                                       HOSTS           ADDRESS                       PORTS   AGE
ingress.extensions/example-ingress-trait   nginx.oam.com   192.168.1.129,192.168.4.210   &lt;span style=&#34;color:#3677a9&#34;&gt;80&lt;/span&gt;      8m29s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -H &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Host: nginx.oam.com&amp;#34;&lt;/span&gt;  http://192.168.1.129
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body {
        width: 35em;
        margin: &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span style=&#34;color:#40ffff&#34;&gt;href&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span style=&#34;color:#40ffff&#34;&gt;href&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用的整体结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gg94rq5fyij20ef0drdgg.jpg&#34; alt=&#34;OMA&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;通过上面这个简单的示例，可以看出如果遵循 OAM 模型来划分应用，我们可以从 ApplicationConfiguration 入手，看到应用中都包含哪些组件（Component），同时又可以看到每个组件都有哪些运维特性（Trait）来支持这个组件，逐层的查看每个模块的描述和配置，最终全面了解这个应用，而不用像现在这样使用 label 和 name，漫无目的的靠运气来理清整个架构，真正的做到&lt;strong&gt;以应用为中心&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;OAM 的本质是将云原生应用定义中的研发、运维关注点分离，资源对象进行进一步抽象，化繁为简，包罗万象。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rRaHl5a5PU9Xg5psMservA?from=timeline&amp;amp;isappinstalled=0&amp;amp;scene=2&amp;amp;clicktime=1588769747&amp;amp;enterid=1588769747&#34;&gt;深度解读！阿里统一应用管理架构升级的教训与实践 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/catalog&#34;&gt;oam-dev/catalog - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: ChaosBlade：从零开始的混沌工程（三）</title>
      <link>https://guoxudong.io/post/start-chaosblade-2/</link>
      <pubDate>Mon, 15 Jun 2020 15:45:36 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-chaosblade-2/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上篇文章中，我们介绍了如何安装 &lt;strong&gt;ChaosBlade Operator&lt;/strong&gt;，并进行了简单的使用。从本章开始，所有的实践章节，都会有配套的 &lt;a href=&#34;https://katacoda.com/&#34;&gt;katacode&lt;/a&gt; 交互式教程，读者可用通过 katacode，在浏览器上操作真实的 Kubernetes 和 ChaosBlade。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;KataCoda 教程：《ChaosBlade Pod 实验场景》&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://katacoda.com/guoxudong/courses/chaosblade/pod-experiment&#34;&gt;https://katacoda.com/guoxudong/courses/chaosblade/pod-experiment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;

&lt;h2 id=&#34;实验对象pod&#34;&gt;实验对象：Pod&lt;/h2&gt;
&lt;p&gt;Pod 是 Kubernetes 应用程序的基本执行单元，即它是 Kubernetes 对象模型中创建或部署的最小和最简单的单元。Pod 表示在 集群 上运行的进程。&lt;/p&gt;
&lt;p&gt;Pod 封装了应用程序容器（或者在某些情况下封装多个容器）、存储资源、唯一网络 IP 以及控制容器应该如何运行的选项。 Pod 表示部署单元：Kubernetes 中应用程序的单个实例，它可能由单个 容器 或少量紧密耦合并共享资源的容器组成。&lt;/p&gt;
&lt;h2 id=&#34;pod-实验场景&#34;&gt;Pod 实验场景&lt;/h2&gt;
&lt;p&gt;Pod 作为 Kubernetes 最基本的执行单元，对于 Kubernetes 集群来说十分重要。那么对于混沌工程，从 Pod 入手实践就再合适不过了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本篇默认已安装 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34;&gt;guestbook&lt;/a&gt; 应用和 ChaosBlade Operator。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;删除-pod-场景&#34;&gt;删除 Pod 场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：删除 &lt;code&gt;chaosblade&lt;/code&gt; 命名空间下标签是 &lt;code&gt;role=master&lt;/code&gt; 的 pod。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行观测&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始观察需要删除的 pod：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -l &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;role=master&amp;#34;&lt;/span&gt; -n chaosblade -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delete_pod_by_labels.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delete-two-pod-by-labels&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delete&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delete pod by labels&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;labels&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;role=master&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;evict-count&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建终端，并开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f delete_pod_by_labels.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl get blade delete-two-pod-by-labels -o json&lt;/code&gt;，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看实验结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过上面的观测命令，可以看到 pod 被删除并重启，结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65ly1gft22n0pnpg20pg06qhdt.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delete_pod_by_labels.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delete-two-pod-by-labels&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;pod-网络延迟场景&#34;&gt;Pod 网络延迟场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：在 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-dzbs9&lt;/code&gt; Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delay_pod_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay-pod-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay pod network by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;local-port&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6379&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;offset&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取 Pod 名称：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..metadata.name}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;delay_pod_network_by_names.yaml&lt;/code&gt; 中的 &lt;code&gt;name&lt;/code&gt; 字段的值。&lt;/p&gt;
&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f delay_pod_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade delay-pod-network-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取实验 pod ip&lt;/span&gt;
$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..status.podIP}
10.42.69.44
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 在 pod 中安装 telnet&lt;/span&gt;
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 测试时间&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; | telnet 10.42.69.44 &lt;span style=&#34;color:#3677a9&#34;&gt;6379&lt;/span&gt;
Trying 10.42.69.44...
Connected to 10.42.69.44.
Escape character is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
Connection closed by foreign host.

real    0m3.790s
user    0m0.007s
sys     0m0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到访问实验 pod 6379 端口的延迟为 3s 左右，结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65ly1gft27x90skg20p606c1kx.gif&#34; alt=&#34;delay-pod-network&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delay_pod_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delay-pod-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;pod-网络丢包场景&#34;&gt;Pod 网络丢包场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：在 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-dzbs9&lt;/code&gt; Pod 注入丢包率 100% 的故障，只针对 IP 为 10.42.69.42 的 pod 生效，也就是除 10.42.69.42 以外的 pod 都能正常访问 &lt;code&gt;redis-master-68857cd57c-dzbs9&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取 pod 名称内容同上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;loss_pod_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss-pod-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;loss&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;loss pod network by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;timeout&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;destination-ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10.42.69.42&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f loss_pod_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade loss-pod-network-by-names -o json&lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取实验 pod ip&lt;/span&gt;
$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..status.podIP}
10.42.69.44
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod，IP为：10.42.69.42（被设置丢包率 100%）&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-6dd975d4c8-lm8jz bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping 实验Pod ip&lt;/span&gt;
$ ping 10.42.69.44
PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data.
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 无响应&lt;/span&gt;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod，该 pod 未被指定丢包&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping 实验Pod ip&lt;/span&gt;
$ ping 10.42.69.44
PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data.
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.69.44: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.128 ms
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.69.44: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.128 ms
&lt;span style=&#34;color:#3677a9&#34;&gt;64&lt;/span&gt; bytes from 10.42.69.44: &lt;span style=&#34;color:#40ffff&#34;&gt;icmp_seq&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;ttl&lt;/span&gt;=&lt;span style=&#34;color:#3677a9&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;time&lt;/span&gt;=0.092 ms
...
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 响应正常&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到观测 pod 访问实验 pod 丢包率 100%（无法访问），而其他 pod 不受影响，结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65ly1gft2c288oqg20p607i7wi.gif&#34; alt=&#34;loss-pod-network&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里在配置中将 &lt;code&gt;timeout&lt;/code&gt; 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 &lt;code&gt;exclude-port&lt;/code&gt;，该配置指定一些端口不会丢包，以免该 pod 失联。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f loss_pod_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade loss-pod-network-by-names&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&#34;pod-域名访问异常场景&#34;&gt;Pod 域名访问异常场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：Pod 内访问指定域名异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取 pod 名称内容同上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dns_pod_network_by_names.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dns-pod-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;dns&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;dns pod network by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-slave-6dd975d4c8-lm8jz&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;domain&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;www.baidu.com&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;10.0.0.1&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f dns_pod_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade dns-pod-network-by-names -o json &lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-6dd975d4c8-lm8jz bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ping www.baidu.com&lt;/span&gt;
$ ping www.baidu.com
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 无响应&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到访问指定域名 &lt;code&gt;www.baidu.com&lt;/code&gt; 异常，结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65ly1gft2hti44bg20p607i4nj.gif&#34; alt=&#34;dns-pod-network&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f dns_pod_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade dns-pod-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;pod-文件系统-io-故障场景&#34;&gt;Pod 文件系统 I/O 故障场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实验目标&lt;/strong&gt;：给 kubernetes 的 pod 注入文件系统I/O故障。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：此场景需要激活 &lt;code&gt;--webhook-enable&lt;/code&gt; 参数，如需使用此功能，请在 chaosblade-operator 参数中添加 &lt;code&gt;--webhook-enable&lt;/code&gt;，或者在安装时指定：例如 helm 安装时添加 &lt;code&gt;--set webhook.enable=true&lt;/code&gt; 指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群中部署了 &lt;code&gt;chaosblade-admission-webhook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要注入故障的 &lt;code&gt;volume&lt;/code&gt; 设置 &lt;code&gt;mountPropagation&lt;/code&gt; 为 &lt;code&gt;HostToContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pod上面添加了如下annotations:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;chaosblade/inject-volume&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;//需要注入故障的volume&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;chaosblade/inject-volume-subpath&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;conf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;//volume挂载的子目录&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;部署测试 pod&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;chaosblade webhook 会根据 pod 的 annotation，注入 fuse 的 sidecar 容器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;chaosblade/inject-volume&lt;/code&gt; 指明需要注入故障的 volume name，比如例子中的 &lt;code&gt;data&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chaosblade/inject-volume-subpath&lt;/code&gt; 指明 volume 挂载路径的子目录。上面的例子中，volume 的挂载路径是 &lt;code&gt;/data&lt;/code&gt;,子目录是 &lt;code&gt;conf&lt;/code&gt;，则在 pod 内，注入I/O异常的目录是 &lt;code&gt;/data/conf&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;指定需要注入故障的 volume 需要指定 &lt;code&gt;mountPropagation：HostToContainer&lt;/code&gt;，这个字段的含义可以参考官方文档 &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation&#34;&gt;Volumes&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 部署测试 pod&lt;/span&gt;
$ kubectl apply -f io-test-pod.yaml
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看 sidecar 是否注入成功&lt;/span&gt;
$ kubectl get pod test-7c9fc6fd88-7lx6b -n chaosblade
NAME                    READY   STATUS    RESTARTS   AGE
test-7c9fc6fd88-7lx6b   2/2     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          4m8s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;开始实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pod_io.yaml&lt;/code&gt; 内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;inject-pod-by-labels&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;IO&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Pod IO Exception by labels&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;labels&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;app=test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;method&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;path&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;percent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;errno&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;28&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f pod_io.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看实验状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade inject-pod-by-labels -o json &lt;/code&gt; 命令，查看实验状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观测结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入实验 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it test-7c9fc6fd88-7lx6b bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 在 pod 内读取指定目录中的文件，如果没有可以新建一个&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; cat /data/conf/test.yaml
cat: &lt;span style=&#34;color:#24909d&#34;&gt;read&lt;/span&gt; error: No space left on device

real    0m3.007s
user    0m0.002s
sys     0m0.002s
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 因为有重试，显示有 3s 的延迟&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 因为设置了 60% 的异常，所有还是有成功的情况&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; cat /data/conf/test.yaml
&lt;span style=&#34;color:#3677a9&#34;&gt;123&lt;/span&gt;

real    0m0.004s
user    0m0.002s
sys     0m0.000s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件读取异常，结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1gft2pqli3ug20p607i7nk.gif&#34; alt=&#34;io-pod-read&#34;&gt;&lt;/p&gt;
&lt;p&gt;在本例中，我们对 read 操作注入两种异常，异常率为百分之60:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 &lt;code&gt;read&lt;/code&gt; 操作增加 1s 的延迟。&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;read&lt;/code&gt; 操作返回错误 &lt;code&gt;28&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只是做了一种类型的实验，更多的实验类型详见&lt;a href=&#34;https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/blade-create-k8s/blade-create-k8s-pod-io&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f pod_io.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade inject-pod-by-labels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除测试 pod：&lt;code&gt;kubectl delete -f io-test-pod.yaml&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本篇我们使用 ChaosBlade Operator 对 Kubernetes Pod 资源进行混沌工程实验，可以看到 ChaosBlade 的操作简单易懂且功能强大，通过模拟不同的故障，可以检验我们系统监控报警的时效性，也可以检验我们系统在遇到故障时的情况，根据这些情况对系统进行调整，从而完善系统架构，增加可用性。&lt;/p&gt;
&lt;p&gt;这里只是对于每种场景进行了简单的实验，而每个场景不止有一种实验方式，用户可以通过调整参数进行不同的实验。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: ChaosBlade：从零开始的混沌工程（二）</title>
      <link>https://guoxudong.io/post/start-chaosblade-1/</link>
      <pubDate>Tue, 09 Jun 2020 11:14:09 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-chaosblade-1/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在上篇文章中，我们介绍了&lt;strong&gt;混沌工程&lt;/strong&gt;以及 &lt;strong&gt;ChaosBlade&lt;/strong&gt;。从本篇开始，从 ChaosBlade 的安装部署，到实验的创建销毁，在实践的角度，一步步的完成各种混沌实验，深入认识和使用混沌工程。&lt;/p&gt;
&lt;h2 id=&#34;chaosblade-operator&#34;&gt;ChaosBlade-Operator&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator&#34;&gt;ChaosBlade-Operator&lt;/a&gt; 是 ChaosBlade 的 Kubernetes 平台实验场景实现。将混沌实验通过 Kubernetes 标准的 CRD 方式定义，用户可以像定义 Deployment 或 StatefulSet 那样定义 ChaosBlade 实验，只要对 &lt;code&gt;kubectl&lt;/code&gt; 和 Kubernetes 对象有所了解，就可以轻松的创建、更新和删除实验场景；同时也可以通过 chaosblade cli 工具来操作实验场景。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;ChaosBlade-Operator 需要使用 Helm 安装，进入 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator/releases&#34;&gt;release 页面&lt;/a&gt; 下载安装包（ChaosBlade 还提供了阿里云 OSS 的下载地址，提升国内下载速度）。&lt;/p&gt;
&lt;p&gt;使用 Helm 3 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 下载安装包&lt;/span&gt;
$ wget -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 为 chaosblade 创建一个 namespace&lt;/span&gt;
$ kubectl create namespace chaosblade
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 安装 ChaosBlade-Operator&lt;/span&gt;
$ helm install chaos chaosblade-operator-0.6.0.tgz --set webhook.enable=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; --namespace=chaosblade
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看安装结果&lt;/span&gt;
$ kubectl get pod -n chaosblade | grep chaosblade
chaosblade-operator-6b6b484599-gdgq8   1/1     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          4d23h
chaosblade-tool-7wtph                  1/1     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          4d20h
chaosblade-tool-r4zdk                  1/1     Running   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          4d23h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ChaosBlade-Operator 启动后将会在每个节点部署一个 &lt;code&gt;chaosblade-tool&lt;/code&gt; Pod 和一个 &lt;code&gt;chaosblade-operator&lt;/code&gt; Pod，如果都运行正常，则安装成功。上面设置 &lt;code&gt;--set webhook.enable=true&lt;/code&gt; 是为了 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;
&lt;p&gt;下面就以 Pod 网络延迟实验为例，展示如何使用 ChaosBlade-Operator。&lt;/p&gt;
&lt;h3 id=&#34;实验准备&#34;&gt;实验准备&lt;/h3&gt;
&lt;p&gt;实验前需要先准备实验对象，这里使用 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34;&gt;guestbook&lt;/a&gt; 应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同样使用 Helm 3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# add repo&lt;/span&gt;
helm repo add apphub-incubator https://apphub.aliyuncs.com/incubator/
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 安装&lt;/span&gt;
helm install guestbook apphub-incubator/guestbook --set service.type=NodePort --namespace=chaosblade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认的 Service 类型为 &lt;code&gt;LoadBalancer&lt;/code&gt;，这里为了方便访问设置为了 &lt;code&gt;NodePort&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;开始实验&#34;&gt;开始实验&lt;/h3&gt;
&lt;p&gt;**实验目标：**对 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-dzbs9&lt;/code&gt; Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验 yaml 配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;chaosblade.io/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ChaosBlade&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay-pod-network-by-names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;experiments&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;scope&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;pod&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;target&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;network&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;action&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;delay&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;desc&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay pod network by names&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;names&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;namespace&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;local-port&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6379&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;interface&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;offset&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将其保存为 &lt;code&gt;delay_pod_network_by_names.yaml&lt;/code&gt; 并执行命令，开始实验：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f delay_pod_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看实验状态&#34;&gt;查看实验状态&lt;/h3&gt;
&lt;p&gt;执行 &lt;code&gt;kubectl get blade delay-pod-network-by-names -o json&lt;/code&gt; 命令，查看实验状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade.io/v1alpha1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ChaosBlade&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;kubectl.kubernetes.io/last-applied-configuration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;{\&amp;#34;apiVersion\&amp;#34;:\&amp;#34;chaosblade.io/v1alpha1\&amp;#34;,\&amp;#34;kind\&amp;#34;:\&amp;#34;ChaosBlade\&amp;#34;,\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{},\&amp;#34;name\&amp;#34;:\&amp;#34;delay-pod-network-by-names\&amp;#34;},\&amp;#34;spec\&amp;#34;:{\&amp;#34;experiments\&amp;#34;:[{\&amp;#34;action\&amp;#34;:\&amp;#34;delay\&amp;#34;,\&amp;#34;desc\&amp;#34;:\&amp;#34;delay pod network by names\&amp;#34;,\&amp;#34;matchers\&amp;#34;:[{\&amp;#34;name\&amp;#34;:\&amp;#34;names\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;redis-master-68857cd57c-dzbs9\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;namespace\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;chaosblade\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;local-port\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;6379\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;interface\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;eth0\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;time\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;3000\&amp;#34;]},{\&amp;#34;name\&amp;#34;:\&amp;#34;offset\&amp;#34;,\&amp;#34;value\&amp;#34;:[\&amp;#34;1000\&amp;#34;]}],\&amp;#34;scope\&amp;#34;:\&amp;#34;pod\&amp;#34;,\&amp;#34;target\&amp;#34;:\&amp;#34;network\&amp;#34;}]}}\n&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;creationTimestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;2020-06-02T05:57:50Z&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;finalizers&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;finalizer.chaosblade.io&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;generation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay-pod-network-by-names&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;resourceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;7710394&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;selfLink&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1235ff55-8256-4caa-a371-e1abf6c9e7b7&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;experiments&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay pod network by names&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;matchers&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;names&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master-68857cd57c-dzbs9&amp;#34;&lt;/span&gt;
                        ]
                    },
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chaosblade&amp;#34;&lt;/span&gt;
                        ]
                    },
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;local-port&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;6379&amp;#34;&lt;/span&gt;
                        ]
                    },
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;interface&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;eth0&amp;#34;&lt;/span&gt;
                        ]
                    },
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3000&amp;#34;&lt;/span&gt;
                        ]
                    },
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;offset&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: [
                            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1000&amp;#34;&lt;/span&gt;
                        ]
                    }
                ],
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;
            }
        ]
    },
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;expStatuses&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;delay&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;resStatuses&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;a86f8cf8b68ace98&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;redis-master&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;nodeName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;keking&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;,
                        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60&amp;#34;&lt;/span&gt;
                    }
                ],
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pod&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;,
                &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;
            }
        ],
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;phase&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Running&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到实验成功创建了。&lt;/p&gt;
&lt;h3 id=&#34;观测结果&#34;&gt;观测结果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 获取实验 pod ip&lt;/span&gt;
$ kubectl get pod -l &lt;span style=&#34;color:#40ffff&#34;&gt;app&lt;/span&gt;=redis,role=master -o &lt;span style=&#34;color:#40ffff&#34;&gt;jsonpath&lt;/span&gt;={.items..status.podIP}
10.42.69.44
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 进入观测 pod&lt;/span&gt;
$ kubectl &lt;span style=&#34;color:#24909d&#34;&gt;exec&lt;/span&gt; -it redis-slave-6dd975d4c8-2zrkb bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 在 pod 中安装 telnet&lt;/span&gt;
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 测试时间&lt;/span&gt;
$ &lt;span style=&#34;color:#24909d&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; | telnet 10.42.69.44 &lt;span style=&#34;color:#3677a9&#34;&gt;6379&lt;/span&gt;
Trying 10.42.69.44...
Connected to 10.42.69.44.
Escape character is &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
Connection closed by foreign host.

real    0m3.790s
user    0m0.007s
sys     0m0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm2deqtdwg20p606c1kx.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到结果符合预期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delay_pod_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delay-pod-network-by-names&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本篇我们讲解了如何部署 ChaosBlade-Operator 并进行了简单的实验，可以看到在云原生场景下，ChaosBlade 依旧有着简单的操作方式，多种实验场景，并对混沌实验模型进行了标准化实现。很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: ChaosBlade：从零开始的混沌工程（一）</title>
      <link>https://guoxudong.io/post/start-chaosblade-0/</link>
      <pubDate>Thu, 04 Jun 2020 17:02:58 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-chaosblade-0/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着微服务的盛行以及容器技术的普及，借助 Kubernetes 的容器编排能力，部署一套分布式系统的难度也越来越低。但随之而来的是越来越复杂的系统，以及越来越难的系统可靠性测试，有时仅仅是一个接口的故障，就可能导致整个系统的雪崩。在雪崩中，找到那个最初故障的接口也十分困难，因为到处都在报错。&lt;/p&gt;
&lt;p&gt;为了解决这些问题，除了不断减少服务的耦合，建立强大的监控系统以及设置熔断、限流等策略等方式，这时&lt;strong&gt;混沌工程&lt;/strong&gt;就出现了。&lt;/p&gt;
&lt;h2 id=&#34;什么是混沌工程&#34;&gt;什么是混沌工程&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&#34;https://principlesofchaos.org&#34;&gt;混沌工程原则（PRINCIPLES OF CHAOS ENGINEERING）&lt;/a&gt;：&lt;strong&gt;混沌工程是在分布式系统上进行实验的学科, 目的是建立对系统抵御生产环境中失控条件的能力以及信心。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大规模分布式软件系统的发展正在改变软件工程。作为一个行业，我们很快就采用了提高开发灵活性和部署速度的实践。但伴随着这些优点，一个迫切问题出现了，那就是：我们对投入生产的复杂系统有多少信心？&lt;/p&gt;
&lt;p&gt;即使分布式系统中的所有单个服务都正常运行, 但这些服务之间的交互也会导致不可预知的结果。这些不可预知的结果, 由影响生产环境的罕见且具有破坏性的事件复合而成，令这些分布式系统存在内在的混沌。&lt;/p&gt;
&lt;p&gt;需要在异常行为出现之前，在整个系统内找出这些弱点。这些弱点包括以下形式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当服务不可用时的不正确回滚设置&lt;/li&gt;
&lt;li&gt;不当的超时设置导致的重试风暴&lt;/li&gt;
&lt;li&gt;由于下游依赖的流量过载导致的服务中断&lt;/li&gt;
&lt;li&gt;单点故障时的级联失败等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这些弱点通过生产环境暴露给用户之前，必须主动的发现这些重要的弱点。并需要一种方法来管理这些系统固有的混沌, 通过增加的灵活性和速率以提升我们对生产环境部署的信心, 尽管系统的复杂性是由这些部署所导致的。&lt;/p&gt;
&lt;p&gt;采用基于经验和系统的方法解决了分布式系统在规模增长时引发的问题, 并以此建立对系统抵御这些事件的能力和信心。通过在受控实验中观察分布式系统的行为来了解它的特性，我们称之为&lt;strong&gt;混沌工程&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;chaosblade&#34;&gt;ChaosBlade&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gfh7pe8dxnj21d407mgly.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade&#34;&gt;ChaosBlade&lt;/a&gt; 中文名混沌之刃，是阿里巴巴开源的一款遵循混沌工程原理和混沌实验模型的实验注入工具，是内部项目 MonkeyKing 对外开源的项目，其建立在阿里巴巴近十年故障测试和演练实践基础上，结合了集团各业务的最佳创意和实践。旨在帮助企业提升分布式系统的容错能力，并且在企业上云或往云原生系统迁移过程中业务连续性提供保障。&lt;/p&gt;
&lt;p&gt;目前支持的场景有：&lt;code&gt;基础资源&lt;/code&gt;、&lt;code&gt;Java 应用&lt;/code&gt;、&lt;code&gt;C++ 应用&lt;/code&gt;、&lt;code&gt;Docker 容器&lt;/code&gt;以及 &lt;code&gt;Kubernetes 平台&lt;/code&gt;。该项目将场景按领域实现封装成单独的项目，不仅可以使领域内场景标准化实现，而且非常方便场景水平和垂直扩展，通过遵循混沌实验模型，实现 chaosblade cli 统一调用。&lt;/p&gt;
&lt;p&gt;该项目体验极好，仅需一个可执行文件 &lt;code&gt;blade&lt;/code&gt;，就可完成多种场景的实验（一些复杂场景如 Java 应用实验，则需要相关工具包），同时如果不想下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gfh7yajpkkg212i0mqu0y.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;快速体验&lt;/center&gt;
&lt;p&gt;该项目于 2020 年 5 月 27 日发布了最新了 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/releases/tag/v0.6.0&#34;&gt;v0.6.0&lt;/a&gt; 版本，本系列文章的全部实践也将基于这个版本以及该版本的修复版本 v0.6.x 进行。&lt;/p&gt;
&lt;h2 id=&#34;chaosblade-operator&#34;&gt;ChaosBlade-Operator&lt;/h2&gt;
&lt;p&gt;ChaosBlade-Operator 是 ChaosBlade 的 Kubernetes 平台实验场景实现，也是本系列文章主要使用的工具。其将混沌实验通过 Kubernetes 标准的 CRD 方式定义，很方便的使用 Kubernetes 资源操作的方式来创建、更新、删除实验场景，包括使用 kubectl、client-go 等方式执行，而且还可以使用上述的 chaosblade cli 工具执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gfh84jo6dgg20p606c1kx.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;Pod 网络延迟场景&lt;/center&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本篇为系列文章开篇，主要介绍混动工程以及混沌工程实验工具 ChaosBlade，后续会从实践的角度带领读者上手实践混沌工程，了解混沌工程的方法及原理。实践出真知，在后续的文章后，我们将从 ChaosBlade-Operator 的安装部署、实验配置、实验观测及实验销毁等方面，详细介绍 ChaosBlade 的功能。同时也会介绍在不同场景下混沌工程是如何帮助开发者发现系统中的问题，并达到逐渐建设高可用的韧性系统的目的。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wizardbyron/principlesofchaos_zh-cn&#34;&gt;混沌工程原则&lt;/a&gt; - Principlesofchaos.org&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade&#34;&gt;ChaosBlade&lt;/a&gt; - Github.com&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 如何参与开源项目</title>
      <link>https://guoxudong.io/post/contribution-to-the-open-source/</link>
      <pubDate>Wed, 20 May 2020 11:12:59 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/contribution-to-the-open-source/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;这篇文章的起因是朋友的一个疑问：如何参与开源项目？搜索了一下网上类似的文章，大多都是讲解如何操作 GitHub 来给开源项目贡献代码、开源协议有哪些以及开源项目的一些介绍。而开源项目作为开源思想的产物，最难的从来都不是贡献代码，而参与的方式也不只有贡献代码一种（虽然贡献代码是最直接的）。下面就根据我的经验，介绍一下如何参与到开源项目中。&lt;/p&gt;
&lt;h2 id=&#34;心理建设&#34;&gt;心理建设&lt;/h2&gt;
&lt;p&gt;在和不同的小伙伴聊过之后，发现大家都有一个同样的问题：很多同学都觉得参与开源项目是技术大牛的事情，我们这种技术水平一般的，只需学习怎么使用就行了。&lt;/p&gt;
&lt;p&gt;那么这就引出了小标题&lt;strong&gt;心理建设&lt;/strong&gt;的重要性，一个开放的项目（伪开源不算），是可以接纳任何可行有益的建议的，只要是对项目有利的贡献，都会得到认可（前提是你能说服别人）。会有一些技术大牛维护这些项目，但不代表任何参与该项目人都是技术大牛，就如之前 4 岁小女孩可以给 Linux 内核贡献提交，只要你的提交可以提升项目质量，哪怕是一个符号的修改都会得到肯定。社区是开放的，任何人都可以参与进来；社区又是严谨的，只要有错误，任何人都可以修改它，并不是“大神”们的专利。&lt;/p&gt;
&lt;h2 id=&#34;如何开始&#34;&gt;如何开始&lt;/h2&gt;
&lt;p&gt;开始前，首先要明确你想要做的内容，除了贡献代码以外，bug 的发现、新功能的建议、文档的补充、测试用例的完善，甚至是错别字的纠正，这些都是参与开源项目的方式。正如上文所说，一个开放的社区，是不会拒绝任何可以提升项目质量的行为的。&lt;/p&gt;
&lt;p&gt;而代码贡献方面，如果有志于贡献高质量的代码、修复 bug 或贡献新功能，在开始时，可以打开 ISSUE，里面有一些打着 &lt;code&gt;good first issue&lt;/code&gt; Label 的 ISSUE，这些 ISSUE 通常会使一些小功能的开发或者 bug 的修复，你可以通过完成这个 ISSUE 来踏出你贡献代码的第一步。当然，在该 ISSUE 中的交流时必不可少的，这样可以帮助你更详细的了解该 ISSUE 要解决的问题，从而在开发中少走弯路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gf0ylqtijgj20sx0bjabu.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;贡献规范&#34;&gt;贡献规范&lt;/h2&gt;
&lt;p&gt;每个开源项目都会有自己的&lt;strong&gt;贡献指南（Contributing Guidelines）&lt;/strong&gt;，在参与项目之前，请先&lt;strong&gt;阅读该指南&lt;/strong&gt;，一般该指南中都会有诸如 Slack channel 或邮件列表这样的沟通工具的链接，或者钉钉、微信这样即时交流工具的二维码（当然最简单的是在 ISSUE 中交流，并且这也是最直接也最容易得到回复的沟通方式）。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;strong&gt;不要在 fork 代码的 &lt;code&gt;master&lt;/code&gt; 分支上做任何修改，该分支用来和上游代码库保持同步！&lt;/strong&gt; 一个开发分支对应一个功能点，并且对应一个 PR，一个 PR 对应一个 ISSUE，最好不要将多个功能写在一个 PR 里，这样会增加项目维护者 review 的难度。&lt;/p&gt;
&lt;h2 id=&#34;github-操作&#34;&gt;GitHub 操作&lt;/h2&gt;
&lt;p&gt;下面就是一些在 Github 上的操作规范。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fork 项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要参与项目贡献，首先需要 fork 项目代码，在项目页面点击 &lt;code&gt;fork&lt;/code&gt; 按钮，将其 fork 到自己的仓库中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gf05j7h9uzj20ty07ywfd.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目 fork 好之后，将其拉取到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/sunny0826/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了保持与上游仓库代码一致，添加上游仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git remote add upstream https://github.com/kubernetes/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上游仓库添加好之后，之后都可以通过以下命令来使本地仓库与上游仓库保持同步：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 切换分支&lt;/span&gt;
$ git checkout master
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 更新上游代码&lt;/span&gt;
$ git fetch upstream
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 合并代码到 master 分支&lt;/span&gt;
$ git merge upstream/master
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 上传代码&lt;/span&gt;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;新建开发分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在同步上游仓库之后，就可以新建分支，添加自己的修改了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout -b xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;提交 PR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发完成后，就可以 push 代码，然后提交 PR 了。一般需要在提交 PR 时，将关联的 ISSUE 标出，并说明该 PR 解决了什么问题。&lt;/p&gt;
&lt;p&gt;而一些大的开源组织会有一些其他要求，比如 CNCF 的项目，在提交 PR 后 &lt;a href=&#34;https://github.com/k8s-ci-robot&#34;&gt;k8s-ci-robot&lt;/a&gt; 会检测你是否签署了 Linux 基金会的&lt;a href=&#34;https://identity.linuxfoundation.org/projects/cncf&#34;&gt;贡献许可协议&lt;/a&gt;（如果没有，就会要求你先签署一下该协议），同时还会做一些其他操作，比如根据内容打一些标签、做一些简单的测试，确保代码无冲突，并给你分配 reviewer（当然也可以使用 &lt;code&gt;/assign&lt;/code&gt; 命令自己指定）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Review&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在提交 PR 后，就会有人来对你提交的代码进行 review。当然，这个人并不会立即出现，因为大部分开源项目的维护者都不是全职的，并且如果该项目的维护者在国外，还需要考虑时差问题。&lt;/p&gt;
&lt;p&gt;reviewer 会对你提交的内容进行一些评论，可能是需要更改的点，或者是需要增加一些相关的单元测试，这个过程将一直持续，直到这些内容达到合并的标准，当看到 &lt;code&gt;/lgtm&lt;/code&gt; 时，恭喜你，你的代码通过 review 被合并了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除开发分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PR 被成功合并后，就可以对之前开发的分支进行清理了，因为在 review 中，会提交多个 commit，而合并一般会将这些 commit 压缩为一个 commit 然后合并到 &lt;code&gt;master&lt;/code&gt; 分支，这就导致了 commit 信息的不一致，这也是为什么在前文要求不要使用 &lt;code&gt;master&lt;/code&gt; 分支的原因，如果使用 &lt;code&gt;master&lt;/code&gt; 分支，在提交几次 PR 后，就会多出很多很多的 commit&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gf07ejzdglj20mb04fdg6.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;清理本地分支：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git branch -d xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种方式就是通过分支管理，让 &lt;code&gt;master&lt;/code&gt; 分支始终与上游仓库的 commit 信息一致，而从 &lt;code&gt;master&lt;/code&gt; 分支 checkout 出开发分支，在开发分支内容合并入上游之后，只需同步 &lt;code&gt;master&lt;/code&gt; 分支内容，然后重复上面的步骤就可以开始新的开发了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上就是这些年我参与开源项目的一些经验，是对网上一些文章的补充，其实不同开源组织的贡献方式不尽相同，在参与之前一定要先阅读&lt;strong&gt;贡献指南（Contributing Guidelines）&lt;/strong&gt;，这样会少走很多弯路。还有就是在 ISSUE 中的交流请尽量使用英语，哪怕你知道和你交流的是一名可以读懂汉语的人，这样做的原因是为了让其他不懂汉语的社区成员可以读懂你们交流，从而参与进来，而不是让人以为你们在“密谋”着什么。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 可视化 Tekton 组件 Tekton Dashboard</title>
      <link>https://guoxudong.io/post/tekton-dashboard/</link>
      <pubDate>Wed, 13 May 2020 09:55:51 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/tekton-dashboard/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Tekton 作为一款开源的云原生 CI/CD 框架，前身是 Knative 的 build-pipeline 项目。作为 CI/CD 框架，其本身并不是一个 CI/CD 产品，所以不应拿 Tekton 与 Jenkins 或者 Drone 这样的 CI/CD 产品进行比较，Tekton 本质是一个强大而灵活的 CI/CD 框架，开发者可以基于它开发自己的 CI/CD 工具或产品，一些有能力的团队可以使用 Tekton 做为底座开发出更适合自己团队使用的 CI/CD 工具。&lt;/p&gt;
&lt;p&gt;而 Tekton 的可视化组件 Tekton Dashboard 则为用户提供了可视化界面，使 Tekton 的体验更接近与 Jenkins 这样的 CI/CD 产品，同时开发者可以在使用 Tekton Dashboard 时也会对 Tekton 的一些概念进行更深入的了解。&lt;/p&gt;
&lt;p&gt;本文将会使用 Tekton Dashboard，通过 UI 界面在 K8S 集群中部署一个 Java 项目：&lt;a href=&#34;https://github.com/sunny0826/pipeline-example-maven&#34;&gt;pipeline-example-maven&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;交互式学习&#34;&gt;交互式学习&lt;/h2&gt;
&lt;p&gt;本文还提供 &lt;a href=&#34;https://katacoda.com&#34;&gt;katacoda&lt;/a&gt; 交互式学习版本，用户可以直接访问 katacoda 页面：https://katacoda.com/guoxudong/scenarios/tekton-dashboard ，使用 &lt;a href=&#34;https://katacoda.com&#34;&gt;katacoda&lt;/a&gt; 在浏览器端学习使用 Tekton Dashboard。&lt;/p&gt;
&lt;p&gt;该教程属于官方教程的汉化版，并得到了&lt;a href=&#34;https://github.com/ncskier/katacoda/issues/2&#34;&gt;许可&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqt0wmbtvj21hb0q779v.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tekton-dashboard&#34;&gt;Tekton Dashboard&lt;/h2&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;这是所有步骤中最麻烦的一步，由于官方提供的 Tekton 镜像都在 &lt;code&gt;gcr.io&lt;/code&gt; 上，在国内并不能直接拉取，所以在测试的时候着实花费了不少时间。&lt;/p&gt;
&lt;p&gt;我特意将这些镜像转储到 dockerhub 上，如果官方版无法使用，可以使用克隆版：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装 &lt;a href=&#34;https://github.com/tektoncd/pipeline/blob/master/docs/install.md&#34;&gt;Tekton Pipelines&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 官方&lt;/span&gt;
$ kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.10.1/release.yaml
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 克隆版&lt;/span&gt;
$ kubectl apply -f https://raw.githubusercontent.com/sunny0826/tekton-local/v0.10.1/tekton-pipeline.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;安装 &lt;a href=&#34;https://github.com/tektoncd/dashboard#install-dashboard&#34;&gt;Tekton Dashboard&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 官方&lt;/span&gt;
$ kubectl apply --filename https://storage.googleapis.com/tekton-releases/dashboard/previous/v0.5.3/tekton-dashboard-release.yaml
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 克隆版&lt;/span&gt;
$ kubectl apply -f https://raw.githubusercontent.com/sunny0826/tekton-local/v0.10.1/tekton-dashboard.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装成功之后需要配置 Tekton Dashboard 的访问地址，可以使用 ingress 或 Nodeport 暴露端口，这里采用 &lt;code&gt;port-forward&lt;/code&gt; 的形式将端口映射到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl port-forward svc/tekton-dashboard 8097:9097 -n tekton-pipelines
Forwarding from 127.0.0.1:8097 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;9097&lt;/span&gt;
Forwarding from [::1]:8097 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;9097&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;访问 Tekton Dashboard&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开浏览器访问访问 http://localhost:8097&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1geqnhem9i9j21mk0tu425.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;导入资源&#34;&gt;导入资源&lt;/h3&gt;
&lt;p&gt;点击 &lt;code&gt;Import Tekton resources&lt;/code&gt; 进入资源导入页面，导入资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository URL: &lt;code&gt;https://github.com/sunny0826/pipeline-example-maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Namespace: &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Repository directory: &lt;code&gt;tekton/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service Account &lt;code&gt;tekton-dashboard&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqnp36mk0j20yu0memze.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Import and Apply&lt;/code&gt; 按钮，之后 Dashboard 会创建一个 PipelineRun 来导入指定的 Tekton 资源。&lt;/p&gt;
&lt;p&gt;点击页面底部的 &lt;code&gt;View status of this run&lt;/code&gt; 链接，查看 MyApp 导入 Tekton 资源的状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqnqyx5g2j20a403et8q.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;PipelineRun 完成后，Tekton 资源已导入成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqns0gqi8j21go0ozwhl.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建-pipelineresource&#34;&gt;创建 PipelineResource&lt;/h3&gt;
&lt;p&gt;选择 &lt;code&gt;default&lt;/code&gt; 命名空间，并点击 &lt;code&gt;PipelineResource&lt;/code&gt; 按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1geqnukrb3aj20yb0enmyg.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击页面右上方的 &lt;code&gt;Create +&lt;/code&gt; 按钮，将弹出一个创建 PipelineResource 的表单。&lt;/p&gt;
&lt;p&gt;我们要在 &lt;code&gt;default&lt;/code&gt; 命名空间中为 pipeline-example-maven 的 &lt;code&gt;master&lt;/code&gt; 分支创建一个 git PipelineResource，故在弹出的表单中填写以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: &lt;code&gt;pipeline-example-maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Namespace: &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type: &lt;code&gt;Git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;URL: &lt;code&gt;https://github.com/sunny0826/pipeline-example-maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Revision: &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该表单内容应如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1geqnxalh2pj20pl0dbq3h.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Create&lt;/code&gt; 按钮，创建 PipelineResource。&lt;/p&gt;
&lt;h3 id=&#34;创建-pipelinerun&#34;&gt;创建 PipelineRun&lt;/h3&gt;
&lt;p&gt;选择 &lt;code&gt;default&lt;/code&gt; 命名空间，并点击 &lt;code&gt;PipelineRuns&lt;/code&gt; 按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1geqo2iatnhj20yb0ewjso.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击页面右上方的 &lt;code&gt;Create +&lt;/code&gt; 按钮，将弹出一个创建 PipelineRun 的表单。该表单是动态的，会根据所选的 Pipeline 提供 PipelineResource 和 Param 字段。&lt;/p&gt;
&lt;p&gt;我们需要 &lt;code&gt;default&lt;/code&gt; 命名空间中使用 &lt;code&gt;pipeline-example-maven&lt;/code&gt; 的 Pipeline 和 PipelineResource，创建一个 PipelineRun，故在弹出的表单中填写以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace: &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pipeline: &lt;code&gt;pipeline-example-maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PipelineResources source: &lt;code&gt;pipeline-example-maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其余字段保留默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该表单内容应如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1geqrdvoaquj20pi0lzt9o.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Create&lt;/code&gt; 按钮，创建 PipelineRun。&lt;/p&gt;
&lt;h3 id=&#34;查看-pipelinerun-日志&#34;&gt;查看 PipelineRun 日志&lt;/h3&gt;
&lt;p&gt;点击页面顶部创建通知中的链接或在 PipelineRun 列表中对应的 PipelineRun，查看 pipeline-example-maven PipelineRun 的日志。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1geqrhrwspcj217x0i7425.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;deploy 步骤中，有时会出现权限错误，需要给 default:default 绑定上 admin 的 clusterrole 权限：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认 &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;deploy&lt;/code&gt; 任务均已成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1geqrmy2mc9j218w0jo0uj.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;strong&gt;注意&lt;/strong&gt;：这里为了方便，使用的是单节点的 Kubernetes，构建完并没有推送到镜像仓库，镜像拉取策略为 &lt;code&gt;imagePullPolicy: Never&lt;/code&gt; ，所以启动时候也没有从远程仓库拉取镜像，而是启动的本地镜像。
&lt;/div&gt;

&lt;h3 id=&#34;查看构建结果&#34;&gt;查看构建结果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get deploy
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
example-greenhouse   1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           5h2m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Tekton Dashboard 将 Tekton 的资源进行了可视化展示，指导用户快速理解 Tekton pipeline 流程以及配置方式，快速上手 Tekton。但是由于镜像的原因，导致新手体验不佳，所幸官方还提供了 &lt;a href=&#34;https://katacoda.com&#34;&gt;katacoda&lt;/a&gt; 交互式教程，该教程我已汉化完成并获得了官方的许可，可以在浏览器端快速体验从安装 Tekton 到部署应用的整个过程。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 告别手写 Helm Chart README</title>
      <link>https://guoxudong.io/post/helm-docs/</link>
      <pubDate>Fri, 08 May 2020 11:20:01 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/helm-docs/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着云原生应用的普及，Helm 的作用也日益凸显，越来越多的云原生应用以 Helm Chart 的形式发布，可以说现在如果没有一个 Helm Chart 都不好意思说自己是云原生应用。&lt;/p&gt;
&lt;p&gt;一个好的应用必定有一套好的文档，文档的质量往往和代码的质量成正比。而 Helm Chart 中的 &lt;code&gt;README.md&lt;/code&gt; 文件就承担了文档的作用，该文件会介绍这个 Helm Chart 的基本信息、使用方式以及参数配置等，用户可以通过该文档的指引，配置符合自己需求的参数，最终完成云原生应用的部署。&lt;/p&gt;
&lt;p&gt;但这也给云原生应用的开发者提出了挑战，开发者不但需要把 &lt;code&gt;value.yaml&lt;/code&gt; 和 &lt;code&gt;Chart.yaml&lt;/code&gt; 等文件的参数以 Markdown 的形式搬运到 &lt;code&gt;README.md&lt;/code&gt; 文件中，同时还要将参数的默认值，以及介绍填入表格中。但如果参数出现了变动，往往无法及时更新文档。这就导致了用户明明根据文档配置了参数，但是部署的效果就是无法达到预期。&lt;/p&gt;
&lt;h2 id=&#34;helm-docs&#34;&gt;Helm-docs&lt;/h2&gt;
&lt;p&gt;helm-docs 可以根据 charts 内容自动生成 markdown 文件。该文件会包含有关 charts 的元数据，以及 &lt;code&gt;value.yaml&lt;/code&gt; 中的参数，同时还可以引用子模板（默认为 &lt;code&gt;README.md.gotmpl&lt;/code&gt;），进一步定制生成的内容。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/norwoodj/helm-docs&#34;&gt;helm-docs&lt;/a&gt; 使用 golang 开发，支持多平台：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MacOS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 homebrew 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install norwoodj/tap/helm-docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;下载可执行文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到 &lt;a href=&#34;https://github.com/norwoodj/helm-docs/releases&#34;&gt;release&lt;/a&gt; 页面下载对应平台的可执行文件。&lt;/p&gt;
&lt;h3 id=&#34;快速开始&#34;&gt;快速开始&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;直接使用可执行文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方法也很简单，直接进入到 Chart 所在目录，执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm-docs
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 或者&lt;/span&gt;
helm-docs --dry-run &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 不生成 README.md 文件，而是将生成的内容打印到控制台&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用 docker&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果不想安装可执行文件，也可以使用 docker，将 Chart 目录挂载到 docker 镜像中，实现相同的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -v &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;:/helm-docs&amp;#34;&lt;/span&gt; jnorwood/helm-docs:latest
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 或者&lt;/span&gt;
docker run -v &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#24909d&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;:/helm-docs&amp;#34;&lt;/span&gt; jnorwood/helm-docs:latest --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;进阶实践&#34;&gt;进阶实践&lt;/h3&gt;
&lt;p&gt;下面就以我的开源项目 &lt;a href=&#34;https://github.com/sunny0826/cms-grafana-builder&#34;&gt;cms-grafana-builder&lt;/a&gt; 为例，讲解 helm-docs 的一些进阶使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;helm-docs 可以通过 &lt;code&gt;value.yaml&lt;/code&gt; 中的注释生成参数说明，注释格式如下所示，&lt;code&gt;--&lt;/code&gt; 后的内容会自动填充到 Chart Values 的 Description 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# access_key_id -- Aliyun Access Key Id.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;access_key_id&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# access_secret -- Aliyun Access Secret.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;access_secret&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# region_id -- Aliyun Region Id.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;region_id&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;cn-shanghai&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# password -- Grafana admin password.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;password&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# image.repository -- Image source repository name.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;grafana/grafana&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# image.pullPolicy -- Image pull policy.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;自定义模板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以新建 &lt;code&gt;README.md.gotmpl&lt;/code&gt; 模板来进一步定制 &lt;code&gt;README.md&lt;/code&gt; 的输出样式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;README.md.gotmpl&lt;/code&gt; 文件的内容如下，可以在模板中插入 Markdown 来充实 &lt;code&gt;README.md&lt;/code&gt; 的内容，以及改变展示内容的顺序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.header&amp;#34;&lt;/span&gt; . }}
{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.description&amp;#34;&lt;/span&gt; . }}

{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.versionLine&amp;#34;&lt;/span&gt; . }}

{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.sourceLinkLine&amp;#34;&lt;/span&gt; . }}

&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;##&lt;/span&gt; Introduction

This chart helps you run a grafana server that include aliyun cms dashboard.


{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.requirementsSection&amp;#34;&lt;/span&gt; . }}

{{ template &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;chart.valuesSection&amp;#34;&lt;/span&gt; . }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多内容和示例，详见 &lt;a href=&#34;https://github.com/norwoodj/helm-docs&#34;&gt;https://github.com/norwoodj/helm-docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;helm-docs 可以帮助很多像我这样需要维护多个 Helm Chart 的开发者，在更新完或新建 Chart 以后，使用 &lt;code&gt;helm-docs&lt;/code&gt; 来自动生成 &lt;code&gt;README.md&lt;/code&gt; 文件，无需逐个寻找和修改，甚至将其集成到 CI 流水线中，自动生成最新的 &lt;code&gt;README.md&lt;/code&gt;，保证文档和代码的一致。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 去指挥你的舰队吧！体验使用 Fleet 批量管理 K8S 集群</title>
      <link>https://guoxudong.io/post/rancher-fleet/</link>
      <pubDate>Thu, 23 Apr 2020 14:03:53 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/rancher-fleet/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

2020年4月3日，Rancher Labs 宣布推出全新开源项目 Fleet，致力于为用户提供海量 Kubernetes 集群的集中管理体验。
&lt;/div&gt;

&lt;p&gt;最早听说到这个消息时，我还是很疑惑的，Fleet 不是 CoreOS 早已经停止维护的一个项目吗？怎么又和 Rancher Labs 扯上了关系？&lt;/p&gt;
&lt;p&gt;**“为用户提供海量 Kubernetes 集群的集中管理体验”**这句话是否言过其实：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“海量”这个量到底有多大？&lt;/li&gt;
&lt;li&gt;又有多少公司或团队有管理海量的 Kubernetes 集群的需求？&lt;/li&gt;
&lt;li&gt;又是怎么一个&lt;strong&gt;集中管理&lt;/strong&gt;法？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带着这些疑问，我仔细了解了一下 Fleet 这个开源项目。&lt;/p&gt;
&lt;h2 id=&#34;fleet&#34;&gt;Fleet&lt;/h2&gt;
&lt;p&gt;首先，这里的 Fleet 是一个新项目，起这个名字应该算是一种致敬，经过了解后我个人觉得这个名字起的还是挺贴切的，比一大波 KubeXXX 有创意多了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我一直是它的忠实粉丝，将这一项目命名为 Fleet 也包含了我的私心。”Darren Shepherd 解释道：“所以我希望重新使用 Fleet 这一名字，这是对这个非常出色的容器领域早期项目的致敬。同时，对于推动 Kubernetes 集群管理的演进，我们感到十分兴奋及万分期待。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash; 摘自 RancherLabs 官方微信公众号《Rancher开源Fleet：业界首个海量K8S集群管理项目》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顾名思义 Fleet 是“舰队”的意思，而 Kubernetes 在希腊语意为 “舵手”。从名称上看，Fleet 的目标就是管理或是指挥众多 Kubernetes 集群。而在了解这个项目时，我发现了这个项目和 Rancher Labs 另一个受欢迎项目 &lt;a href=&#34;https://k3s.io/&#34;&gt;k3s&lt;/a&gt; 有个千丝万缕的联系，甚至在我看来 Fleet 可能就是就是为了管理众多 k3s 集群而生的，是 Rancher Labs 布局边缘计算和 IoT 领域的重要组成部分。&lt;/p&gt;
&lt;p&gt;k3s 是一款轻量级的 Kubernetes 集群，主要面向边缘计算和 IOT 领域，相比原生 Kubernetes，k3s 体量更轻、部署简单且快速，同时还具有完整的 Kubernetes 体验。可以说只要是 Linux 系统（配合周边工具甚至可以运行在 Mac 和 Windows 系统），无论是树莓派、各种开发板还是 PC 机，都可以独立运行起 k3s，&lt;strong&gt;这也为运行海量 Kubernetes 集群&lt;/strong&gt;提供了可能。以汽车为例，我们可以为每一辆汽车都部署一个 k3s 集群，所有汽车相关的软件（导航、广播甚至是无人驾驶程序）都部署在 k3s 集群中，每次这些软件发布新版本，只需使用 Fleet 进行批量操作该种车型的所有 k3s 集群即可，无需将车开回 4S 店进行手动更新。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

联系美国空军是 Kubernetes 与 Istio 项目的重要用户，这种实践可能早就开始了。
&lt;/div&gt;

&lt;p&gt;解释了海量 Kubernetes 集群的疑问，下面就从 Fleet 的架构入手，讲讲如何&lt;strong&gt;集中管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65ly1ge3o40xe41j20qx0ljdm7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fleet 包含&lt;code&gt;Manager&lt;/code&gt;和&lt;code&gt;agent&lt;/code&gt;，&lt;code&gt;Manager&lt;/code&gt;所在集群作为控制平面管理所有&lt;code&gt;agent&lt;/code&gt;集群，同时 Fleet 根据 Kubernetes 部署 Pod 的模型，定义了一个 Bundles 对象，并且提供了一种内置机制，可以使用诸如&lt;code&gt;Helm&lt;/code&gt;和&lt;code&gt;Kustomize&lt;/code&gt;等行业标准工具为每个目标集群定制 Bundles，在我看来这种模式以及&lt;code&gt;bundle.yaml&lt;/code&gt;的写法都和&lt;code&gt;Kustomize&lt;/code&gt;很像(套娃行为？)&amp;hellip;一旦用户在集群之间部署了 Bundles，Fleet 就会主动监视资源是否已就绪，以及是否被更改过。总的来说就是通过部署 Bundles，就可以将部署内容批量分发到所有目标集群，从而达到&lt;strong&gt;集中管理&lt;/strong&gt;的目的。&lt;/p&gt;
&lt;h2 id=&#34;尝鲜体验&#34;&gt;尝鲜体验&lt;/h2&gt;
&lt;p&gt;说那么多其实意义不大，好不好用，只有试过才知道。这里使用的 Fleet 版本为&lt;code&gt;v0.2.0&lt;/code&gt;，是目前的最新版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载 CLI 工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先需要下载&lt;code&gt;fleet&lt;/code&gt;的 CLI 工具，这里的体验和 k3s 类似，都是直接&lt;code&gt;curl&lt;/code&gt; GitHub 上的安装脚本并执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -sfL https://raw.githubusercontent.com/rancher/fleet/master/install.sh | sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;部署控制平面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 CLI 工具将&lt;code&gt;Fleet Manager&lt;/code&gt;部署到 Kubernetes 集群上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Kubeconfig should point to Manager cluster&lt;/span&gt;
$ fleet install manager | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;生成 Cluster group token&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到这控制平面就部署好了，接下来部署&lt;code&gt;agent&lt;/code&gt;目标集群。这里生成的其实是一个 yaml 文件，内容包含 fleet 需要的 RBAC 权限和 fleet-agent 的 Deployment：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Kubeconfig should point to Manager cluster&lt;/span&gt;
$ fleet install agent-token &amp;gt; token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;目标集群注册&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将需要纳管的目标集群加入到 fleet 中，&lt;strong&gt;注意&lt;/strong&gt;：这里需要将 kubeconfig 切换到目标集群，也就是需要部署&lt;code&gt;agent&lt;/code&gt;的集，每个需要注册的集群都要部署&lt;code&gt;agent&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Kubeconfig should point to AGENT cluster&lt;/span&gt;
$ kubectl apply -f token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;部署 bundles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里就是向多个集群同时部署 bundles，使用方法也和&lt;code&gt;Kustomize&lt;/code&gt;类似（&lt;code&gt;example&lt;/code&gt; 目录是 fleet 官方仓库中的示例目录）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Kubeconfig should point to Manager cluster&lt;/span&gt;
$ fleet apply ./examples/helm-kustomize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;查看状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在就可以查看所有集群 bundles 的状态了，这里可以看到 bundles 在多个集群都部署成功了（这里是我起的两个 k3s 集群做的测试）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get fleet
NAME                                   CLUSTER-COUNT   BUNDLES-READY   BUNDLES-DESIRED   STATUS
clustergroup.fleet.cattle.io/default   &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;               &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;               &lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;                 Modified: &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; (helm-kustomize )

NAME                                    CLUSTERS-READY   CLUSTERS-DESIRED   STATUS
bundle.fleet.cattle.io/fleet-agent      &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;                &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;
bundle.fleet.cattle.io/helm-kustomize   &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;                &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;                  Modified: &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; (default-default-group/cluster-5a186072-acbd-4f54-8f22-fb1651ce902f )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，Fleet 的架构简洁且十分轻量，部署方式简单，使用&lt;code&gt;YAML&lt;/code&gt;、&lt;code&gt;Helm&lt;/code&gt;、&lt;code&gt;Kustomez&lt;/code&gt;都可以进行资源的描述和配置，甚至可以使用&lt;code&gt;Helm&lt;/code&gt;+&lt;code&gt;Kustomeze&lt;/code&gt;的模式，部署体验不错。&lt;/p&gt;
&lt;p&gt;但遗憾的是，目前 Fleet 还处于项目早期，实践也仅限于尝鲜体验，并不能用于生产环境，项目 README 中还专门提到了&lt;strong&gt;目前 Fleet 仅适用于 10 个集群以下的小规模部署&lt;/strong&gt;。目前文档不足且项目维护人员并不积极，文档勘误的 &lt;a href=&#34;https://github.com/rancher/fleet/pull/32&#34;&gt;RP&lt;/a&gt; 和相关 ISSUE 也没有得到相关的反馈。项目是做到了业界首个，但是要真正生产可用甚至做到业界第一还有很长的一段路要走。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rancher/fleet&#34;&gt;Fleet - Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/byErGqVBtm4kdv58OZFt_w&#34;&gt;Rancher开源Fleet：业界首个海量K8S集群管理项目 - RancherLabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 导致你的微服务走向失败的11个原因</title>
      <link>https://guoxudong.io/post/11-reasons-why-you-are-going-to-fail-with-microservices/</link>
      <pubDate>Thu, 09 Apr 2020 09:06:57 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/11-reasons-why-you-are-going-to-fail-with-microservices/</guid>
      <description>
        
        
        &lt;p&gt;在过去的几年里，我对多个正在进行数字化转型的产品团队进行了架构审查。发现大多数团队都会使用微服务架构来构建产品，他们使用微服务架构的意图都是正确的：更快的开发速度、更好的可扩展性、更小的独立团队、独立的部署、使用合适的技术来完成工作等等。但大多数时候，我发现团队在使用微服务时都很不顺利，他们没能利用微服务的优势。在这篇文章中，我将分享导致你的微服务走向失败的11个原因。&lt;/p&gt;
&lt;p&gt;对于刚接触微服务的人来说，我推荐阅读 Martin Fowler 的&lt;a href=&#34;https://martinfowler.com/articles/microservices.html&#34;&gt;《微服务》&lt;/a&gt;一文。文章中对微服务架构定义非常好。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统。其中每个小型服务都运行在自己的进程中，并经常采用 HTTP 资源 API 这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务，我们仅做最低限度的集中管理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因一管理层低估了微服务开发的复杂性&#34;&gt;原因一：管理层低估了微服务开发的复杂性&lt;/h2&gt;
&lt;p&gt;我曾与多个非常看好微服务客户合作过，对他们来说，微服务是解决他们所有问题的&lt;strong&gt;银弹&lt;/strong&gt;。在我看来，大多数团队及其管理层都低估了微服务开发的复杂性。&lt;/p&gt;
&lt;p&gt;要开发微服务，开发人员首先需要一个高效的本地开发环境。&lt;/p&gt;
&lt;p&gt;当你的系统中的服务开始增加时，在一台机器上运行应用程序的多个子程序就会变得很困难。特别是当你使用像 Java 这样消耗相对较多内存的语言来构建应用程序时，这种情况就更容易发生。&lt;/p&gt;
&lt;p&gt;以下是关于本地开发环境配置的相关要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地开发首先需要一台好的开发机器。然而，大多数公司都想使用所有最新的、最先进的技术，但又不想换掉可怜的 Windows 开发机。我见过开发人员使用 VDI 虚拟云桌面或配置很差的机器来构建基于微服务的系统，开发人员受限于他们的开发机器，这降低了他们的工作效率，他们无法完全按照自己的想法在本地运行程序。而另一个副作用就是，开发人员不能快速得到反馈。如果你必须等待几分钟才能运行集成测试套件，那么你宁愿不写更多的集成测试套件来增加你的痛苦。糟糕的开发机助长了糟糕的开发实践。&lt;/li&gt;
&lt;li&gt;当为开发人员配备了合适的机器，接下来的事情就是确保所有的服务都使用统一的构建工具。你应该能够在一个新的机器上构建整个应用程序，而不需要太多的配置。根据我的经验，即使是使用微服务，使用一个可以构建整个应用程序的根构建脚本也是有帮助的。&lt;/li&gt;
&lt;li&gt;而下一点很重要，就是要让开发者能够在系统上轻松运行部分应用。在配置好所有的端口和存储卷的情况下，使用多个 &lt;code&gt;docker-compose&lt;/code&gt; 文件来启动不同的服务。&lt;/li&gt;
&lt;li&gt;接下来，如果你使用了 Kubernetes 这样的容器调度工具，那么你应该使用像 &lt;code&gt;Telepresence&lt;/code&gt; 这样的工具，它可以让你在 Kubernetes 集群中轻松调试应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果一个团队不了解微服务开发的复杂性，那么随着时间的推移，团队的开发速度会明显下降。&lt;/p&gt;
&lt;h2 id=&#34;原因二没有将依赖和工具更新到最新版本的程序&#34;&gt;原因二：没有将依赖和工具更新到最新版本的程序&lt;/h2&gt;
&lt;p&gt;在架构审查时我发现有些新的平台居然已经出现了遗留问题。团队没有确保依赖包版本最新，也没有确保数据库等工具处于最新版本。所以，两年前才开始的项目到今天发现居然已经欠了几个月的技术债了。&lt;/p&gt;
&lt;p&gt;很多团队在几年前就开始使用 Spring Cloud Netflix OSS 项目构建微服务。而现在他们开始使用像 Kubernetes 这样的容器调度工具，但由于他们之前使用的是 Netflix OSS，所以他们并没有使用 Kubernetes 提供的所有功能。当 Kubernetes 内置了服务发现功能后，他们仍然在使用 Eureka 作为服务发现。另外，使用 Istio 这样的服务网格，使你可以摆脱 Netflix OSS 提供的大部分功能。这有助于降低代码复杂性，而将更多很复杂的问题交给基础设施平台来解决。&lt;/p&gt;
&lt;p&gt;还有一点要记住，就是要保持所有服务的依赖版本同步。我最近在帮助一个使用 Spring Boot 构建微服务的客户，在过去两年中，他们已经构建了 20 多个 Spring Boot 服务。在他们的环境中，他们使用的 Spring Boot 版本从 1.5 到 2.1 不等。这意味着，当有人配置他们的机器时，他们必须下载多个版本的 Spring Boot。此外，他们还缺少了 Spring Boot 自 1.5 版本以来的许多改进。&lt;/p&gt;
&lt;p&gt;我们的建议是，各团队应为这些升级问题设立专门的技术债务项目。这些技术债务项目应该作为架构委员会会议的一部分进行讨论并定期解决。在我的上一个项目中，我们每三个月进行一次一周的 sprint，来将所有的依赖项更新到最新版本。&lt;/p&gt;
&lt;p&gt;同时，团队也应该投入时间将数据库、消息队列和缓存等工具升级到最新版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者按：这里的最新版本应该是最新的稳定版本，即 &lt;code&gt;stable&lt;/code&gt; 版本，而不是 &lt;code&gt;latest&lt;/code&gt; 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因三在本地开发中使用公共服务&#34;&gt;原因三：在本地开发中使用公共服务&lt;/h2&gt;
&lt;p&gt;由于本地开发效果的不理想，大多数团队开始依赖共享环境来提供关键服务。其中第一个就是数据库，大多数年轻的开发者并没有意识到基于数据库的共享开发并不好。以下是我认为共享数据库主要的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;团队成员需要建立一个约定，以免一个开发者把另一个开发者写的数据抹掉。这种工作方式是痛苦且容易失败的，迟早会拖累整个团队。&lt;/li&gt;
&lt;li&gt;导致开发人员害怕实验性测试，因为他们的工作会影响到其他一些团队成员的工作。我们都知道，更好的学习方式是实验和快速反馈。有了公共数据库后，实验就会变得十分困难。&lt;/li&gt;
&lt;li&gt;另一个副作用是，独立地测试变化变得困难。这使你的集成测试变得很不稳定，从而进一步降低了开发速度。&lt;/li&gt;
&lt;li&gt;公共数据库要像对待宠物一样对待，因为你不希望它出现哪怕一个不一致的、不可预测的状态。你可能会有一个开发人员想在表是空的时候测试边缘情况，但其他人则需要这个表的记录。&lt;/li&gt;
&lt;li&gt;只有公共数据库才有系统工作所需的所有数据。团队成员会随着时间的推移失去了更改的可追溯性，所以没有人知道他们是如何在自己的机器上复制同样的设置的。唯一的办法就是将完整的数据库转储，并与它一起工作。&lt;/li&gt;
&lt;li&gt;当你没有连接到网络时，很难工作。这种情况一般发生在长时间的通勤或坐飞机时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据库只是公共服务的一个例子，它也可以是消息队列、像 Redis 这样的集中式缓存或者其他任何一个服务可能变化的服务。&lt;/p&gt;
&lt;p&gt;解决这个问题的最好方法是让开发人员在自己的机器上运行数据库（使用 docker 运行），并创建 SQL 脚本来设置模式和初始化主数据。这些 SQL 脚本应该像其他代码一样被保存在版本控制中，并像其他代码一样进行维护。&lt;/p&gt;
&lt;h2 id=&#34;原因四版本控制托管平台缺乏可视性&#34;&gt;原因四：版本控制托管平台缺乏可视性&lt;/h2&gt;
&lt;p&gt;我的一个客户，他们使用的是 Gitlab 版本控制平台，其中有 5 个产品，1000 多个版本库，每个产品都由多个微服务组成。而我问他们的第一个问题是：哪些服务和代码库是产品 A 的一部分。&lt;/p&gt;
&lt;p&gt;解决这个问题的最好方法是在一开始就以某种方式对你的微服务进行分组，这样你就可以随时了解你的产品生态系统。Gitlab提供了创建组的方式，然后在其中创建项目仓库。Github 没有分组功能，你可以使用主题或命名惯例来实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人更喜欢单库，因为我觉得真的很方便。而大多数开发者都认为这是一种反模式。我同意 &lt;a href=&#34;https://danluu.com/monorepo/&#34;&gt;Dan Lua 的帖子&lt;/a&gt;，他在帖子中提到了以下好处:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;简化的组织结构&lt;/li&gt;
&lt;li&gt;简化了依赖性&lt;/li&gt;
&lt;li&gt;工具化&lt;/li&gt;
&lt;li&gt;跨项目变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因五没有明确的服务定义&#34;&gt;原因五：没有明确的服务定义&lt;/h2&gt;
&lt;p&gt;大多数团队都不知道如何划分微服务。围绕微服务的划分，产生了很多混乱和迷惑。让我们举个例子，你的应用程序有一个类似于插件的机制，将与多个第三方服务进行集成。每个集成是否应该是一个微服务？我见过多个团队走的是每个集成都要创建一个微服务的道路。随着集成数量的增加，这种做法很快就变得难以管理。这些服务通常都太小了，以至于它们作为一个单独的流程来运行会增加更多的开销。&lt;/p&gt;
&lt;p&gt;我认为大服务少，总比小服务多好。在一个企业组织内创建一个部门的模型，按照 DDD 的要求，将一个域分为子域和有边界的内容。有边界的内容代表了公司内部的一个部门，比如财务和营销部门。你可能会认为这可能会导致出现大型的微服务，认为这样做是不对的。但是，根据我的经验，将单体重构到微服务总是比反过来更容易。随着你获得更多的信息，你可以进行更细粒度的微服务划分。你可以应用单一责任原则来了解你的微服务是否变得太大，做的事情太多，然后将其分解成更小的独立服务。任何服务都不应该直接与另一个服务的数据库进行连接，它们只应该通过公开的接口进行通信。你可以在 Microservices.io 网站上阅读更多关于&lt;a href=&#34;https://microservices.io/patterns/decomposition/decompose-by-subdomain.html&#34;&gt;按子域模式分解&lt;/a&gt;的内容。&lt;/p&gt;
&lt;p&gt;我也遵循了 &lt;a href=&#34;https://github.com/fpereiro/backendlore&#34;&gt;backendlore&lt;/a&gt; 文档中提到的建议。这个建议可以帮助限制服务与服务之间的通信，而这是导致基于微服务的系统中性能低下的首要原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果两块信息是相互依存的，那么它们应该属于一个服务。换句话说，一个服务的自然边界应该是其数据的自然边界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因六没有明确的代码复用策略&#34;&gt;原因六：没有明确的代码复用策略&lt;/h2&gt;
&lt;p&gt;我的一个客户，他们在所有基于 Java 的微服务中都复制了四个与一个特定的功能有关 Java 文件。所以，如果在那个基础代码上发现了一个 bug，就需要修改所有的项目。而在时间压力下，会有些项目没有被修复。这样就会浪费更多的时间，同时也增加了挫折感。&lt;/p&gt;
&lt;p&gt;并不是说开发团队都不知道怎么做是正确的，但组织架构总会让人们使用默认的容易出错的方式做事。&lt;/p&gt;
&lt;p&gt;正确的方法是使用 Bintray 或 Nexus 这样的智能管理器，并在那里发布依赖关系。然后，每个微服务都应该依赖该库。当发布新版本的库时，所有的微服务都应该被更新和重新部署。&lt;/p&gt;
&lt;p&gt;使用微服务并不意味着你要抛弃迄今为止对我们有效的最佳实践。你需要在构建工具方面投入更多精力，让微服务升级变得容易且自动化，这样就不需要人手工去做这些事情了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在没有合适的工具和自动化的情况下使用微服务是灾难性的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因七多语言方案&#34;&gt;原因七：多语言方案&lt;/h2&gt;
&lt;p&gt;我发现有的团队以最佳实践的名义使用多种编程语言、多种数据库、多种缓存。这一切在项目的初始阶段都是可行的，但当你的产品投入生产后，弊端就会展露。就像我们在使用 Java 的 Spring Boot 框架构建应用，但当我们意识到 Java 消耗的内存比较多，性能也比较差时，就决定改用 Node.js。这个理由是站不住脚的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**Node.js 的性能比 Java 更好。**如果你有基于 IO 的工作负载，Node.js 的性能通常会更好。但在任何计算密集型的工作负载上，Java 都能&lt;a href=&#34;https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/javascript.html&#34;&gt;击败&lt;/a&gt; node.js。通过调整，也可以使 Java 对 IO 工作负载有更好的性能。Spring Boot Reactor 在 IO 工作负载方面的性能就相当于 Node.js。&lt;/li&gt;
&lt;li&gt;**Node.js 的内存消耗比 Java 少。**这是部分事实，因为 Node.js 应用程序通常比 Java 消耗的内存少。Java 的 Spring Boot 应用程序并不像大多数人想象的那样糟糕。我在其中一个 Spring Boot Java Microservice 上运行了一个加载测试，内存消耗仍然不到 1GB。你可以通过 OpenJ9 JVM，限制类路径上的依赖性，以及调整默认的 JVM 参数来优化 Java 的内存利用率。另外，在 Java 中还有一些新的 Spring Boot 的替代品，如 Micronaut 和 Quarkus，其内存消耗相当于 Node.js。&lt;/li&gt;
&lt;li&gt;**Node.js 比 Java 更有生产力。**这取决于写代码的开发人员。使用静态分析工具的 Java 可以帮助在开发生命周期的早期发现问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大多数时候，这一切都取决于具体情况。如果你的开发人员不成熟，那么无论你使用什么编程语言，你都会开发出糟糕的产品。&lt;/p&gt;
&lt;p&gt;我建议一个公司公布一个团队可以使用的语言列表。我认为 2-3 种语言是个不错的数字。另外，请列举一下为什么应该使用一种语言而不是另一种语言的原因。&lt;/p&gt;
&lt;p&gt;在选择语言之前，你应该考虑多种因素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否容易找到成熟的企业级软件开发者？&lt;/li&gt;
&lt;li&gt;重新培训开发人员学习新技术是否容易？我们发现，Java 开发人员相对来说比较容易学习 Golang。&lt;/li&gt;
&lt;li&gt;初始团队之外的开发人员是否能够轻松地维护他人编写的代码？&lt;/li&gt;
&lt;li&gt;工具和依赖库方面的生态体系是否成熟？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这不仅限于编程语言，也适用于数据库。如果你的系统中已经有 MongoDB，那么你为什么要在你的系统中再引入 ArangoDB 呢？它们都主要是文档数据库。&lt;/p&gt;
&lt;h2 id=&#34;原因八人的依赖性&#34;&gt;原因八：人的依赖性&lt;/h2&gt;
&lt;p&gt;这不是微服务所特有的，但在微服务生态中却变得更加猖獗。原因是大多数团队都专注于自己的具体服务，所以他们并不了解整个系统。在与不同客户的合作中，我发现只有一小部分架构师了解整体情况。但这些架构师的问题是，他们在日常工作中并不活跃，所以他们对开发的影响也是有限的。&lt;/p&gt;
&lt;p&gt;我认为最好的办法是确保所有的团队都有一个成员来自架构组，这样他们就可以使自己的团队与整个架构团队的路线图和目标保持一致，扁平化的管理有助于整个团队的成熟。&lt;/p&gt;
&lt;h2 id=&#34;原因九缺乏文档&#34;&gt;原因九：缺乏文档&lt;/h2&gt;
&lt;p&gt;过去的几年中，我接触的大多数团队都在文档方面挣扎。很多开发人员和架构师要么不写文档，要么他们写的文档没有用。即使他们想写，也不知道应该如何记录他们的架构。&lt;/p&gt;
&lt;p&gt;我们至少应记录以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://c4model.com/&#34;&gt;C4 模型&lt;/a&gt;中的内容图和容器图&lt;/li&gt;
&lt;li&gt;以&lt;a href=&#34;(http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)&#34;&gt;架构决策记录&lt;/a&gt;的形式跟踪关键的架构决策&lt;/li&gt;
&lt;li&gt;开发人员入职指南&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我建议所有的文件都要在版本控制系统中进行维护。&lt;/p&gt;
&lt;h2 id=&#34;原因十功能盖过平台成熟度&#34;&gt;原因十：功能盖过平台成熟度&lt;/h2&gt;
&lt;p&gt;这个原因我在其他地方已经简单地提到过，但我认为这个原因值得作为一个顶层原因来提及。微服务比传统的单体应用要复杂得多，因为你正在构建一个分布式系统，里面有很多组件，而大多数开发人员还不能理解系统的不同故障模式。大多数微服务在构建时都太过乐观，如果管理层过早的专注于业务功能，而忽略了系统平台本身的成熟度，那么必将失败。在一个薄弱的平台上构建的功能是无法提供价值的。&lt;/p&gt;
&lt;p&gt;企业需要进入平台思维。平台思维并不只是指使用容器和 Kubernetes。它们是解决方案的一部分，但其本身不是完整的解决方案。你需要考虑分布式跟踪、可观察性、混沌测试、函数调用与网络调用、安全服务与服务之间的通信、可调试性等问题。这需要认真的努力和调试，建立成熟可靠的平台和工具团队。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是一个资源有限的初创企业，我的建议是重新思考你的微服务战略。请你明白你正在进入的是什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;原因十一缺乏自动化测试&#34;&gt;原因十一：缺乏自动化测试&lt;/h2&gt;
&lt;p&gt;大多数团队都知道自动化测试对产品的整体质量有多重要，但他们仍然没有做。微服务架构为测试的地点和方式提供了更多的选择。如果你不做彻底的自动化测试，那么你将会失败得很惨。&lt;/p&gt;
&lt;p&gt;关于这一点，我就不多写了，因为网上很多文章都有涉及该问题。下图是我从 Martin Fowler 网站上发表的&lt;a href=&#34;https://martinfowler.com/articles/microservice-testing/&#34;&gt;《微服务测试》&lt;/a&gt;文章中摘录的，讲的是基于微服务系统的测试金字塔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gdnnsqieu8j20bb0913yo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;原文地址：https://medium.com/xebia-engineering/11-reasons-why-you-are-going-to-fail-with-microservices-29b93876268b&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Katacoda：免费学习 Kubernetes 利器</title>
      <link>https://guoxudong.io/post/katacoda-k8s/</link>
      <pubDate>Fri, 27 Mar 2020 15:57:11 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/katacoda-k8s/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近 ServiceMesher 社区重启了&lt;a href=&#34;https://github.com/servicemesher/istio-handbook&#34;&gt;《Istio 服务网格进阶实战》&lt;/a&gt; 的编写，我也作为编委会成员参与其中。该书的实践项目都基于 Istio 1.5 版本以及 Katacoda 提供的 Kubernetes 环境完成。由于实践部分都要使用 Katacoda，介绍 Katacoda 这章需要先完成，为其他参与编写实践篇的作者提供参考。&lt;/p&gt;
&lt;h2 id=&#34;katacoda&#34;&gt;Katacoda&lt;/h2&gt;
&lt;p&gt;Katacoda 是一个面向软件工程师的交互式学习和培训平台，可在浏览器中使用真实环境学习和测试新技术，帮助开发人员学习，并掌握最佳实践。该平台于 2019 年 11 月被 O&amp;rsquo;Reilly 收购。&lt;/p&gt;
&lt;p&gt;Katacoda 可以快速的提供一套完整的临时环境，并在使用后将其回收。用户可以根据设计好的引导步骤，通过浏览器上的终端界面操作一套完整的环境，一步步的学习和实践。尤其是在学习 Kubernetes 这种复杂的应用时，单单是创建一个集群就要花去不少时间，同时消耗的资源也令一些初学者望而生畏，Katacoda 的出现很好的解决了这些问题。课程设计者可以定制应用程序所需环境，并设计循序渐进的指导路径，旨在确保用户以最佳方式学习。&lt;/p&gt;
&lt;p&gt;在 Katacoda 每个用户都可以免费的学习和创建课程，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Course：课程，可包含一系列的 scenarios。
&lt;ul&gt;
&lt;li&gt;官方教程入口：&lt;a href=&#34;https://katacoda.com/scenario-examples/scenarios/create-course&#34;&gt;https://katacoda.com/scenario-examples/scenarios/create-course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;汉化教程入口：&lt;a href=&#34;https://katacoda.com/guoxudong/courses/katacoda-example/create-course&#34;&gt;https://katacoda.com/guoxudong/courses/katacoda-example/create-course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scenarios：场景、方案。
&lt;ul&gt;
&lt;li&gt;官方教程入口：&lt;a href=&#34;https://katacoda.com/scenario-examples/scenarios/create-scenario-101&#34;&gt;https://katacoda.com/scenario-examples/scenarios/create-scenario-101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;汉化教程入口：&lt;a href=&#34;https://katacoda.com/guoxudong/courses/katacoda-example/katacoda-create-scenarios&#34;&gt;https://katacoda.com/guoxudong/courses/katacoda-example/katacoda-create-scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-katacoda-学习&#34;&gt;使用 Katacoda 学习&lt;/h2&gt;
&lt;p&gt;Katacoda 提供了非常便利的学习方式，用户只需要打开相应课程，就可以跟着课程设计者的说明，按照设计好的步骤一步步完成学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;介绍会标明课程的难度和需要的时间，帮助用户了解该课程的基本信息：
&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gd8k9b4jwoj21ha0q7wha.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入课程，左侧是该步骤说明，右侧是一个已经准备好的终端，直接可以使用：
&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gd8kdmfr3ej21h90qeq8s.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后就是跟着步骤说明，一步步的完成学习即可：
&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gd8kh1jcs1j21hb0q5do7.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建课程&#34;&gt;创建课程&lt;/h2&gt;
&lt;p&gt;既然可以学习别人设计好的课程，那么也可以自己设计课程，以供用户学习。&lt;/p&gt;
&lt;h3 id=&#34;新建仓库&#34;&gt;新建仓库&lt;/h3&gt;
&lt;p&gt;Katacoda 需要注册账号登录，这里直接使用 GitHub 账号登录即可，毕竟之后创建的方案都是存放在 GitHub 上的。&lt;/p&gt;
&lt;p&gt;这里推荐在页面新建仓库，访问 &lt;a href=&#34;https://www.katacoda.com/teach/git-hosted-scenarios&#34;&gt;https://www.katacoda.com/teach/git-hosted-scenarios&lt;/a&gt; ，点击 &lt;code&gt;Automatically Create and Configure Github Repository&lt;/code&gt; 按钮，Katacoda 会自动在您的 Github 中创建一个名为 &lt;code&gt;katacoda-scenarios&lt;/code&gt; 的仓库，并自动为您配置 Webhook，每次更新该仓库时，都会自动更新您 Katacoda 中课程的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gd73rov21ij219q0pl42u.jpg&#34; alt=&#34;katacoda 新建仓库页面&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建完成后，就可以在您的 Github 上找到名为 &lt;code&gt;katacoda-scenarios&lt;/code&gt; 的代码仓库。&lt;/p&gt;
&lt;h3 id=&#34;scenarios&#34;&gt;Scenarios&lt;/h3&gt;
&lt;p&gt;Scenarios 即为方案、场景，由一组 Markdown、bash 脚本和一个 JSON 文件组成，这些文件保存了该 Scenarios 的所有配置。&lt;/p&gt;
&lt;p&gt;Katacoda 官方提供了 CLI 工具，帮助您创建 Scenarios。&lt;/p&gt;
&lt;h4 id=&#34;安装-cli&#34;&gt;安装 CLI&lt;/h4&gt;
&lt;p&gt;通过 npm 命令安装 &lt;code&gt;npm i katacoda-cli --global&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;命令遵循语法的是 &lt;code&gt;$ katacoda COMMAND&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，可以通过运行命令 &lt;code&gt;katacoda --help&lt;/code&gt; 查看帮助信息。&lt;/p&gt;
&lt;h4 id=&#34;创建-scenarios-目录&#34;&gt;创建 Scenarios 目录&lt;/h4&gt;
&lt;p&gt;例如，要创建新的方案，可以通过运行命令 &lt;code&gt;katacoda scenarios:create&lt;/code&gt;，CLI 将会提示一些信息，帮助您创建方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Friendly URL:&lt;/strong&gt; 此处可输入 &lt;code&gt;test-scenario&lt;/code&gt;，该属性将确定 scenarios 文件夹的名称，以及用来访问他的 URL。因此，该属性不能包括空格，需要是小写字母等。例如，如果您的用户名是 test-username 并且您的方案称为 test-scenario（如建议的那样），用于在平台中指向该方案的URL将为 &lt;a href=&#34;https://katacoda.com/test-username/scenarios/test-scenario/&#34;&gt;https://katacoda.com/test-username/scenarios/test-scenario/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Title:&lt;/strong&gt; 方案的标题，将会显示在简介上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; 方案的描述，将会显示在简介上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficulty level:&lt;/strong&gt; 难度级别，将会显示在简介上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estimated time:&lt;/strong&gt; 估计完成的时间，将会显示在简介上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of steps:&lt;/strong&gt; 方案的步骤数。CLI 将会为您的所有步骤创建文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image:&lt;/strong&gt; 确定适用于您的方案的基本软件。例如，如果您需要 docker，java，go 等作为前提条件。更多相关信息，请阅读 &lt;a href=&#34;https://katacoda.com/docs/scenarios/environments&#34;&gt;https://katacoda.com/docs/scenarios/environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; 它将确定方案界面元素的配置。例如，如果您只想显示终端，或编辑器+终端等形式，更多相关信息，请阅读 &lt;a href=&#34;https://katacoda.com/docs/scenarios/layouts&#34;&gt;https://katacoda.com/docs/scenarios/layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入这些信息，CLI 将帮您创建一个文件夹，其中引入了 &lt;em&gt;&lt;strong&gt;friendly URL&lt;/strong&gt;&lt;/em&gt; 的名称，并将在该文件夹内创建方案所需的文件。&lt;/p&gt;
&lt;h4 id=&#34;编辑-scenarios&#34;&gt;编辑 Scenarios&lt;/h4&gt;
&lt;p&gt;Scenarios 目录创建好之后，可以看到目录的结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.
├── finish.md
├── index.json
├── intro.md
├── step1.md
├── step2.md
├── step3.md
├── step4.md
└── step5.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.json&lt;/code&gt; ：文件中定义了标题、描述、步骤顺序、UI 布局以及所需环境，内容与您使用 CLI 工具创建时输入的是一致的，如果想对输入的内容进行修改，也可以在这里修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intro.md&lt;/code&gt;：介绍页，用来介绍您这个 Scenarios&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finish.md&lt;/code&gt; ：结束页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step1-setpN.md&lt;/code&gt;：步骤介绍，数目与您使用 CLI 工具创建 Scenarios 时输入的数目相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上传&#34;&gt;上传&lt;/h3&gt;
&lt;p&gt;将创建的 Scenarios 移动到之前创建的 git 项目中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git add .
$ git commit -m &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;New Scenarios&amp;#34;&lt;/span&gt;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上传成功后，在 &lt;strong&gt;Your Profile&lt;/strong&gt; 页面就可以看到您上传的课程。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Katacoda 是一个面向软件工程师的交互式学习和培训平台，开发人员根据产品特色设计学习流程，方便用户的学习；学习者则无需关心环境的搭建与依赖的安装，通过开发人员设计的最佳实践来进行学习，快速又高效。&lt;strong&gt;最重要的是，它是免费的！白嫖的东西又有谁不喜欢呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时也欢迎各位朋友一起参与到&lt;a href=&#34;https://github.com/servicemesher/istio-handbook&#34;&gt;《Istio 服务网格进阶实战》&lt;/a&gt; 的编撰中，和 ServiceMesher 社区的朋友一起完成这部开源书籍。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Kt Connect：研发侧利器，本地连通 Kubernetes 集群内网</title>
      <link>https://guoxudong.io/post/alibaba-kt-connect/</link>
      <pubDate>Tue, 24 Mar 2020 09:14:06 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/alibaba-kt-connect/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着 Kubernetes 的普及，越来越多的应用被容器化，并部署到 Kubernetes 上。随之而来的问题是当容器中发生错误时，对错误的定位和调试也变得很复杂。当一个工具给你带来便利时，它也可能给你带来另一些麻烦。&lt;/p&gt;
&lt;p&gt;那么有没有工具可以在本地联通 Kubernetes 集群并进行调试呢？当然是有的，这里就介绍一款研发侧利器：&lt;code&gt;Kt Connect&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;kt-connect&#34;&gt;Kt Connect&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Kt Connect&lt;/code&gt; 是阿里巴巴开源的一款云原生协同开发测试解决方案，目前的功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接访问 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;转发集群流量到本地&lt;/li&gt;
&lt;li&gt;Service Mesh 支持&lt;/li&gt;
&lt;li&gt;基于 SSH 的轻量级 VPN 网络&lt;/li&gt;
&lt;li&gt;作为 kubectl 插件，集成到 Kubectl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（以上内容来自&lt;a href=&#34;https://alibaba.github.io/kt-connect/#/zh-cn/&#34;&gt;官方文档&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;目前使用下来最实用的功能就是&lt;strong&gt;直接连接 Kubernetes 网络&lt;/strong&gt;实现在本地使用 k8s 内网域名调用 Kubernetes 集群内的服务以及&lt;strong&gt;将 Kubernetes 集群中的流量转发到本地&lt;/strong&gt;，作用类似于一个 VPN，将本地网络与 Kubernetes 集群网络连接。
&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gd4wu5p3rmj20pb0dl75m.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Kt Connect&lt;/code&gt; 使用 Go 开发，支持 Mac、Linux 和 Windows，安装方式也很简单&lt;/p&gt;
&lt;p&gt;前往&lt;a href=&#34;https://github.com/alibaba/kt-connect/releases&#34;&gt;Github Releases&lt;/a&gt; 下载可执行文件&lt;/p&gt;
&lt;h3 id=&#34;mac&#34;&gt;Mac&lt;/h3&gt;
&lt;p&gt;安装sshuttle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install sshuttle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载并安装KT&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -OL https://rdc-incubators.oss-cn-beijing.aliyuncs.com/stable/ktctl_darwin_amd64.tar.gz
$ tar -xzvf ktctl_darwin_amd64.tar.gz
$ mv ktctl_darwin_amd64 /usr/local/bin/ktctl
$ ktctl -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;p&gt;安装sshuttle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install sshuttle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载并安装KT&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -OL https://rdc-incubators.oss-cn-beijing.aliyuncs.com/stable/ktctl_linux_amd64.tar.gz
$ tar -xzvf ktctl_linux_amd64.tar.gz
$ mv ktctl_linux_amd64 /usr/local/bin/ktctl
$ ktctl -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;p&gt;下载并解压可执行文件，并确保ktctl在PATH路径下&lt;/p&gt;
&lt;h2 id=&#34;本地连接集群&#34;&gt;本地连接集群&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

以MacOS为例
&lt;/div&gt;

&lt;p&gt;使用 &lt;code&gt;ktctl connect&lt;/code&gt; 命令，启动的时候需要 admin 权限，需要输入密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ktctl --namespace=default connect

1:51PM INF Connect Start At &lt;span style=&#34;color:#3677a9&#34;&gt;69444&lt;/span&gt;
1:51PM INF Client address 192.168.7.121
1:51PM INF deploy shadow deployment kt-connect-daemon-rcacy in namespace default

1:51PM INF pod label: &lt;span style=&#34;color:#40ffff&#34;&gt;kt&lt;/span&gt;=kt-connect-daemon-rcacy
1:51PM INF pod: kt-connect-daemon-rcacy-fd4c587f-zmn4z is running,but not ready
1:51PM INF pod: kt-connect-daemon-rcacy-fd4c587f-zmn4z is running,but not ready
1:51PM INF Shadow pod: kt-connect-daemon-rcacy-fd4c587f-zmn4z is ready.
Forwarding from 127.0.0.1:2222 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
Forwarding from [::1]:2222 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
1:51PM INF port-forward start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;69445&lt;/span&gt;
[&lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; sudo] Password: 1:51PM INF vpn(sshuttle) start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;69449&lt;/span&gt;
1:51PM INF KT proxy start successful
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 这里需要输入密码&lt;/span&gt;
Handling connection &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;2222&lt;/span&gt;
Warning: Permanently added &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;[127.0.0.1]:2222&amp;#39;&lt;/span&gt; (ECDSA) to the list of known hosts.
bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)
client: Connected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里可以看到在 &lt;code&gt;namespace:default&lt;/code&gt; 中部署了一个 &lt;code&gt;kt-connect-daemon-*&lt;/code&gt; 的 &lt;code&gt;Deployment&lt;/code&gt;，如果这个 &lt;code&gt;Deployment&lt;/code&gt; 启动正常，就可以直接在本地访问 Kubernetes 集群内的服务了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy | grep kt

kt-connect-daemon-rcacy   1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           5m35s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问集群服务，可以使用 &lt;code&gt;curl&lt;/code&gt; 或者直接在浏览器访问。（这里使用之前文章&lt;a href=&#34;../feiyan-grafana&#34;&gt;《使用 Grafana 展示肺炎疫情动态》&lt;/a&gt;中部署的服务）&lt;/p&gt;
&lt;h3 id=&#34;使用-curl&#34;&gt;使用 &lt;code&gt;curl&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl kk-feiyan
UP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;直接使用浏览器&#34;&gt;直接使用浏览器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65ly1gd4zc1ddfij20fq03zglp.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;转发集群流量到本地&#34;&gt;转发集群流量到本地&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;ktctl exchange&lt;/code&gt; 命令，这个命令的前提条件是 Kubernetes 集群中必须有已经已经存在的 &lt;code&gt;Deployment&lt;/code&gt;，在运行该命令时，将会起一个 shadow 容器，来代替已存在的 Deployment，调用该容器的流量，都会被转发到本地的指定端口。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

要注意的是：该命令会将其代替的 Deployment 的 replicas 设置为0，可能会导致业务的暂停，请勿在生产环境中使用！
&lt;/div&gt;

&lt;p&gt;本地启动一个服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1gd4zsl7r14j20eq03r76o.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ktctl exchange kk-feiyan --expose &lt;span style=&#34;color:#3677a9&#34;&gt;8088&lt;/span&gt;
2:13PM INF &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;KT Connect&amp;#39;&lt;/span&gt; is runing, you can access &lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; app from cluster and localhost
2:13PM INF Client address 192.168.7.121
2:13PM INF deploy shadow deployment kk-feiyan-kt-yssnq in namespace default

2:13PM INF pod label: &lt;span style=&#34;color:#40ffff&#34;&gt;kt&lt;/span&gt;=kk-feiyan-kt-yssnq
2:13PM INF pod: kk-feiyan-kt-yssnq-6464bbf74d-smvhc is running,but not ready
2:13PM INF pod: kk-feiyan-kt-yssnq-6464bbf74d-smvhc is running,but not ready
2:13PM INF Shadow pod: kk-feiyan-kt-yssnq-6464bbf74d-smvhc is ready.
2:13PM INF create exchange shadow kk-feiyan-kt-yssnq in namespace default
2:13PM INF scale deployment kk-feiyan to &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;

2:13PM INF  * kk-feiyan (&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; replicas) success
2:13PM INF remote 172.22.1.166 forward to &lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;8088&lt;/span&gt;
Forwarding from 127.0.0.1:2266 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
Forwarding from [::1]:2266 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
2:13PM INF exchange port forward to &lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;70269&lt;/span&gt;
2:13PM INF redirect request from pod 172.22.1.166 &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt; to 127.0.0.1:2266 starting

Handling connection &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;2266&lt;/span&gt;
Warning: Permanently added &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;[127.0.0.1]:2266&amp;#39;&lt;/span&gt; (ECDSA) to the list of known hosts.
bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)
2:13PM INF ssh remote port-forward start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;70270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 Deployment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy | grep kk-feiyan
kk-feiyan                 0/0     &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;           39d    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 原服务&lt;/span&gt;
kk-feiyan-kt-eclcc        1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           89s    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 转发流量服务&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样的话，集群内调用 &lt;code&gt;kk-feiyan&lt;/code&gt; 这个服务的流量都会被转发到本地&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集群内调用：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl kk-feiyan
UP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;可以看到流量被抓发到了本地&lt;/strong&gt;
&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65ly1gd4zuym6ofj20eq052n0d.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;将本地服务暴露到-kubernetes-集群&#34;&gt;将本地服务暴露到 Kubernetes 集群&lt;/h2&gt;
&lt;p&gt;有些时候，我们并不想使用 &lt;code&gt;exchange&lt;/code&gt; 来代替已经存在的 Deployment，只想在集群内新建一个服务来将流量转发到本，以完成调试。&lt;/p&gt;
&lt;p&gt;这个时候使用 &lt;code&gt;ktctl run&lt;/code&gt;，就可以满足需求，该命令会在 Kubernetes 集群中新建一个服务，并将访问该服务的流量被转发到本地的指定端口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ktctl run localservice --port &lt;span style=&#34;color:#3677a9&#34;&gt;8088&lt;/span&gt; --expose
2:33PM INF Client address 192.168.7.121
2:33PM INF deploy shadow deployment localservice in namespace default

2:33PM INF pod label: &lt;span style=&#34;color:#40ffff&#34;&gt;kt&lt;/span&gt;=localservice
2:33PM INF pod: localservice-77d565c488-64hpp is running,but not ready
2:33PM INF pod: localservice-77d565c488-64hpp is running,but not ready
2:33PM INF Shadow pod: localservice-77d565c488-64hpp is ready.
2:33PM INF create shadow pod localservice-77d565c488-64hpp ip 172.22.1.74
2:33PM INF expose deployment localservice to localservice:8088
2:33PM INF remote 172.22.1.74 forward to &lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;8088&lt;/span&gt;
Forwarding from 127.0.0.1:2274 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
Forwarding from [::1]:2274 -&amp;gt; &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt;
2:33PM INF exchange port forward to &lt;span style=&#34;color:#24909d&#34;&gt;local&lt;/span&gt; start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;70899&lt;/span&gt;
2:33PM INF redirect request from pod 172.22.1.74 &lt;span style=&#34;color:#3677a9&#34;&gt;22&lt;/span&gt; to 127.0.0.1:2274 starting

Handling connection &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;2274&lt;/span&gt;
Warning: Permanently added &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;[127.0.0.1]:2274&amp;#39;&lt;/span&gt; (ECDSA) to the list of known hosts.
bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)
2:33PM INF ssh remote port-forward start at pid: &lt;span style=&#34;color:#3677a9&#34;&gt;70903&lt;/span&gt;
2:33PM INF forward remote 172.22.1.74:8088 -&amp;gt; 127.0.0.1:8088
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到该服务已经被拉起了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy localservice
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
localservice   1/1     &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;           86s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问该服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl localservice:8088
UP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到流量被转发到了本地
&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65ly1gd50e6lkquj20ff05z782.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本地访问 k8s 内网，将 k8s 流量转发到本地，靠着这两大功能 &lt;code&gt;Kt Connect&lt;/code&gt; 可以称之为研发侧的利器，我们可以轻松的在本地调用集群服务，或者让集群调用本地的服务，这就让开发/测试 k8s 集群中发起调用的服务，在本地断点 debug 成为了现实，非常好用。同时还有其他一些没有介绍的功能，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Mesh 支持，可以支持用户可以基于Service Mesh的能力做更多自定义的流量规则定义&lt;/li&gt;
&lt;li&gt;Dashboard 功能，管理所以使用 kt 连入集群的用户等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得一提的是，&lt;code&gt;ktctl run&lt;/code&gt; 功能是我提出该场景并希望能实现，该 &lt;a href=&#34;https://github.com/alibaba/kt-connect/issues/89&#34;&gt;issue&lt;/a&gt; 提出仅一天就通过并完成了开发。给高效的开发人员点赞。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 修改 Nginx Ingress 日志打印格式</title>
      <link>https://guoxudong.io/post/nginx-ingress-log-aliyun/</link>
      <pubDate>Mon, 02 Mar 2020 15:29:16 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/nginx-ingress-log-aliyun/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近接到一个需求，需要展示 ingress 上面的访问日志，由于我们的业务系统都部署在 Kubernetes 上面，通过 ingress 进行访问，所以这里的访问日志，其实就是我们全部业务系统的访问日志。&lt;/p&gt;
&lt;p&gt;日志采集方面，阿里云天生就提供了 nginx-ingress 日志和采集和展示，本身提供很多不错的基于 ingress 日志数据的图表与分析。如果你使用的是阿里云 ACK 容器服务，那么极端推荐使用，配置方法见官方文档：https://help.aliyun.com/document_detail/86532.html。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfmo5d410j21970nzwjg.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;让人头秃的是，我们这次不但要采集 ingress 日志上比较常规的 &lt;code&gt;url&lt;/code&gt; &lt;code&gt;client_ip&lt;/code&gt; &lt;code&gt;method&lt;/code&gt; &lt;code&gt;status&lt;/code&gt; 等字段，还要采集我们系统在 &lt;code&gt;Request Headers&lt;/code&gt; 里面自定义的参数，这些参数是默认的 ingress 并不展示的，所以需要我们进行调整。&lt;/p&gt;
&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;
&lt;p&gt;首先明确需要调整的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx-ingress&lt;/code&gt; 的 ConfigMap：用于打印自定义日志字段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AliyunLogConfig&lt;/code&gt;：这个是阿里云日志服务的 CRD 扩展，需要在这个里面加入新增的字段名和修改后的正则表达式&lt;/li&gt;
&lt;li&gt;在日志服务控制台，添加新增字段的指定字段查询&lt;/li&gt;
&lt;li&gt;新增展示仪表盘&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调整-ingress-日志输出&#34;&gt;调整 ingress 日志输出&lt;/h3&gt;
&lt;p&gt;我们 ingress 组件使用的是 &lt;code&gt;nginx-ingress-container&lt;/code&gt;，这里要调整日志输出格式，老规矩，直接官方文档：https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/。&lt;/p&gt;
&lt;p&gt;从文档可见，只需要调整 &lt;code&gt;ingress-nginx&lt;/code&gt; 的 ConfigMap &lt;code&gt;nginx-configuration&lt;/code&gt; data 中的 &lt;code&gt;log-format-upstream&lt;/code&gt; 字段即可。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;知识点：&lt;/p&gt;
&lt;p&gt;官方文档里面给的说明不是很详细，没有提到 &lt;code&gt;Request Headers&lt;/code&gt; 里自定义的字段应该怎么表示（也有可能是我眼瘸没看见），但经过我多次试验发现，&lt;code&gt;Request Headers&lt;/code&gt; 里的字段在 &lt;code&gt;log-format-upstream&lt;/code&gt; 中应该使用 &lt;code&gt;$http_{your field}&lt;/code&gt; 表示，比如 &lt;code&gt;$http_cookie&lt;/code&gt;；而带 &lt;code&gt;-&lt;/code&gt; 的字段则需要将 &lt;code&gt;-&lt;/code&gt; 改为 &lt;code&gt;_&lt;/code&gt;，并且使用小写，比如 &lt;code&gt;app-Id&lt;/code&gt; 就应使用 &lt;code&gt;$http_app_id&lt;/code&gt; 表示。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;修改 ConfigMap，&lt;code&gt;ingress-controller&lt;/code&gt; 将进行热更新，看到如下日志，就证明配置已完成更新，接下来就可以看到你自定义字段的值已经打印出来了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;I0302 &lt;span style=&#34;color:#3677a9&#34;&gt;08&lt;/span&gt;:&lt;span style=&#34;color:#3677a9&#34;&gt;20&lt;/span&gt;:&lt;span style=&#34;color:#3677a9&#34;&gt;58.393365&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;9&lt;/span&gt; controller.&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#3677a9&#34;&gt;200&lt;/span&gt;] Backend successfully reloaded.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;调整阿里云日志组件配置&#34;&gt;调整阿里云日志组件配置&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

执行下面的步骤请确保已经按照&lt;a href=&#34;https://help.aliyun.com/document_detail/86532.html&#34;&gt;官方文档&lt;/a&gt;正确部署阿里云日志服务在您的 K8S 集群之后，并且已达到要求的版本。
&lt;/div&gt;

&lt;p&gt;日志已经成功打印了，接下来就是调整日志采集的字段了，这里只需要调整日志服务 CRD 的扩展配置即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl edit AliyunLogConfig k8s-nginx-ingress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在修改配置之前，推荐先去 &lt;a href=&#34;https://regex101.com/&#34;&gt;https://regex101.com/&lt;/a&gt; 验证正则表达式是否正确，将调整过的正则表达式和 &lt;code&gt;ingress-controller&lt;/code&gt; 打印的日志贴入下图指定位置，就可以看出正则表达式是否正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gcfo9lxuc6j21gv0juwka.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后将添加的字段名称（这个名称将作为 key 在日志服务中展示，可以与 header 中的字段不同）和正则表达式贴入如下 CRD 中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;log.alibabacloud.com/v1alpha1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;AliyunLogConfig&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# your config name, must be unique in you k8s cluster&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;k8s-nginx-ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# logstore name to upload log&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;logstore&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx-ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# product code, only for k8s nginx ingress&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;productCode&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;k8s-nginx-ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# logtail config detail&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;logtailConfig&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;inputType&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;plugin&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# logtail config name, should be same with [metadata.name]&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;configName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;k8s-nginx-ingress&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;inputDetail&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;plugin&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;inputs&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;service_docker_stdout&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;detail&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;IncludeLabel&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;io.kubernetes.container.name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;nginx-ingress-controller&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Stderr&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Stdout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;processors&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;processor_regex&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;detail&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;KeepSource&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Keys&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- client_ip&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- x_forward_for&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- remote_user&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- method&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- url&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- version&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- status&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- body_bytes_sent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- http_referer&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- http_user_agent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- request_length&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- request_time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- proxy_upstream_name&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- upstream_addr&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- upstream_response_length&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- upstream_response_time&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- upstream_status&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- req_id&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- host&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#需要添加的字段名称&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;- ...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;NoKeyError&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;NoMatchError&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;Regex&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#修改后的正则表达式&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;SourceKey&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;content&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;日志控制台新增字段&#34;&gt;日志控制台新增字段&lt;/h3&gt;
&lt;p&gt;如果上面的操作无误的话，日志服务中就会展示您添加的字段了，如果配置有误，所有的自定义字段都会不显示，只会显示保留字段名称。&lt;/p&gt;
&lt;p&gt;添加指定字段查询，就可以快速查看添加的字段了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gcfohy9fv4j21460gxtc6.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;新增展示仪表盘&#34;&gt;新增展示仪表盘&lt;/h3&gt;
&lt;p&gt;日志既然已经取到了，那么展示就很容易了，直接在查询栏中输入分析语句，日志服务支持 SQL 聚合日志，并直接生成统计图表，点击添加到仪表盘可以就可以添加到现有仪表盘或者新建一个仪表盘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gcfos33c23j219a0nuae3.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;成果&#34;&gt;成果&lt;/h2&gt;
&lt;p&gt;之后进行一些微调，添加过滤栏，由于这里统计的是登录用户，你甚至都可以添加一个词云来看看哪些用于使用系统比较频繁。当然，想添加什么都看您的喜好，日志在你手里，想怎么分析都可以。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gcfowk10tjj21970ns79i.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;本次实现的功能并不是什么高深的功能，只不过是一个简单的访问日志记录和展示，相信每个系统其实都有一套这种功能。但是这种实现方式在我看来优点更多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无代码：全程没有写一行代码，如果有的话，也就是业务需要统一 &lt;code&gt;Request Headers&lt;/code&gt; 里面的字段。&lt;/li&gt;
&lt;li&gt;配置简单：只需要修改 nginx ConfigMap 中的一个字段，并在 CRD 中添加字段名称和正在表达式，唯一的难度可能就是正则表达式。&lt;/li&gt;
&lt;li&gt;配置快：整体的配置时间很短，加上查文档和调整图表也不过半天的时间，肯定比 &lt;code&gt;提需求-评估-开发-测试-验收&lt;/code&gt; 全流程走一遍，前端后端撕一遍要快的多的多的多。&lt;/li&gt;
&lt;li&gt;高度定制：可以根据自己的喜好，随意定制图表。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最近发现阿里云日志服务是一个宝藏产品，从安全到 k8s 业务，从成本控制到疫情动态，日志服务真的就是把所有没有前端开发资源的服务都帮了一把。
&amp;mdash; 摘自本人朋友圈&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Kubernetes 中优化流量和安全性需要注意的7点要求</title>
      <link>https://guoxudong.io/post/7-requirements-for-optimized-traffic-flow-and-security-in-kubernetes/</link>
      <pubDate>Tue, 18 Feb 2020 14:15:42 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/7-requirements-for-optimized-traffic-flow-and-security-in-kubernetes/</guid>
      <description>
        
        
        &lt;p&gt;根据 &lt;a href=&#34;https://portworx.com/wp-content/uploads/2018/12/Portworx-Container-Adoption-Survey-Report-2018.pdf&#34;&gt;Portworx 在2018年进行的一项调查&lt;/a&gt;，五分之四的企业现在正在使用容器，其中83％的企业正在生产环境中使用。而这个数字在2017年只有67％，很明显，容器不仅仅是一种时尚。&lt;/p&gt;
&lt;p&gt;但是，随着容器的流行，一些公司开始在 Kubernetes 内建立有效的流量控制和安全策略。&lt;/p&gt;
&lt;p&gt;作为容器调度和集群管理平台，Kubernetes 致力于提供出色的基础架构，因此被无数公司采用。它刚刚开源五周年，最近在福布斯发表的一篇名为&lt;a href=&#34;https://www.forbes.com/sites/janakirammsv/2019/05/25/5-exciting-facts-about-kubernetes-on-the-eve-of-its-5th-anniversary/#87a930c3e736&#34;&gt;《Kubernetes “the most popular open source project of our times”》&lt;/a&gt;的文章表示，Kubernetes 已被 Capital One，ING Group，Philips，VMware 和 Huawei 等公司使用。&lt;/p&gt;
&lt;p&gt;对于使用微服务架构（MSA）开发来应用程序的公司来说，Kubernetes 具有许多优势，特别是在应用程序部署方面。&lt;/p&gt;
&lt;p&gt;出于上面这些原因，研发团队有必要了解 Kubernetes 独有的流量和安全情况。在本文中，我们将介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 是什么。&lt;/li&gt;
&lt;li&gt;Kubernetes 面临的挑战。&lt;/li&gt;
&lt;li&gt;Kubernetes 中的七个最重要的流量和安全要求。&lt;/li&gt;
&lt;li&gt;关于开发和操作简便性的注意事项。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们开始吧。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-是什么&#34;&gt;Kubernetes 是什么&lt;/h2&gt;
&lt;p&gt;Kubernetes 是一个开源的容器编排系统。根据 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&#34;&gt;Kubernetes’ own definition&lt;/a&gt;，它是一个可移植且可扩展的程序，用于管理容器化的工作负载和服务，并提供以容器为中心的管理环境。&lt;/p&gt;
&lt;p&gt;下图描述了 Kubernetes 的基本工作方式。图中可以看到一个主节点和两个工作节点。主节点用来告诉工作程序节点需要做什么工作，而工作程序节点则执行主节点提供给它们的指令。同时可以添加其他 Kubernetes 工作节点以扩展基础架构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gc0k2knw9zj20r30czq6p.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果仔细观察，您会发现在每个部分中都出现了 “Docker” 一词。Docker 是一个容器平台，非常适合在单个物理机或虚拟机（VM）上运行容器。&lt;/p&gt;
&lt;p&gt;但是，如果您要在多个不同的应用程序中使用数百个容器，且您不希望将它们全部放在一台计算机上。这是催生 Kubernetes 的挑战之一。&lt;/p&gt;
&lt;p&gt;使用 overlay 网络（如上图中的红色条所示），主节点中的容器不必知道它需要与之通信的容器位于哪个节点，就可以直接与之通信。&lt;/p&gt;
&lt;p&gt;Kubernetes 的另一个主要功能是将信息打包到 “pod” 中，如果应用程序由多个容器组成，则可以将这些容器组成一个 pod ，并共享整个生命周期。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-面临的挑战&#34;&gt;Kubernetes 面临的挑战&lt;/h2&gt;
&lt;p&gt;像所有其他容器编排系统一样，Kubernetes 也面临的诸多挑战，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部和外部网络是隔离的。&lt;/li&gt;
&lt;li&gt;容器和容器的 IP 地址会发生变化。&lt;/li&gt;
&lt;li&gt;微服务之间没有访问控制。&lt;/li&gt;
&lt;li&gt;没有应用程序层的可见性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们更深入地探讨这些挑战。Kubernetes 的网络不是常规的网络，因为尽管使用了 overlay 网络，但内部和外部网络却是彼此不通的。&lt;/p&gt;
&lt;p&gt;另外，Kubernetes 会隔离发生故障的节点或 Pod，以防止它们关闭整个应用程序。这可能导致节点之间的IP地址频繁更改。想要发现容器或容器的IP地址的服务就必须弄清楚新的IP地址是什么。&lt;/p&gt;
&lt;p&gt;当涉及微服务之间的访问控制时，对于企业而言，重要的是要认识到 Kubernetes 节点之间的流量也能够流入外部物理设备或 VM。这可能会消耗资源并削弱安全性。&lt;/p&gt;
&lt;p&gt;最后，无法在应用程序层检查信息是一个大问题。没有这种可见性，企业可能会错过收集详细分析信息的关键机会。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-和云安全要求&#34;&gt;Kubernetes 和云安全要求&lt;/h2&gt;
&lt;p&gt;到目前为止，我们已经讨论了 Kubernetes 的基本功能以及它所带来的挑战。现在，基于 &lt;a href=&#34;https://www.a10networks.com/&#34;&gt;A10 Networks&lt;/a&gt; 15年的经验，我们将继续讨论 Kubernetes 和云安全性的要求。&lt;/p&gt;
&lt;p&gt;我们将讨论如下七点要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高级应用程序交付控制器（ADC）&lt;/li&gt;
&lt;li&gt;使负载均衡器（LB）配置与基础架构保持同步&lt;/li&gt;
&lt;li&gt;南北向流量的安全&lt;/li&gt;
&lt;li&gt;为大规模部署准备的中央控制器&lt;/li&gt;
&lt;li&gt;微服务之间的访问控制&lt;/li&gt;
&lt;li&gt;东西向流量加密&lt;/li&gt;
&lt;li&gt;应用流量分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-高级应用程序交付控制器adc&#34;&gt;1. 高级应用程序交付控制器（ADC）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gc0ldvmd2ij20r30bjad0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然企业可能已经在其基础架构的其他区域使用了高级应用程序交付控制器，但也有必要为 Kubernetes 部署一个。默认情况下，这将允许管理员操作在 Kubernetes 前的高级负载均衡器。&lt;/p&gt;
&lt;p&gt;Kubernetes 已经配备了名为 &lt;em&gt;kube-proxy&lt;/em&gt; 的网络代理。它提供了简单的用法：通过在三层中调整 iptables 规则来工作。但这是非常基本的，并与大多数企业操作习惯的有所不同。&lt;/p&gt;
&lt;p&gt;许多人会将 ADC 或负载均衡器放在他们的 Kubernetes 前。这样就可以创建一个静态的虚拟 IP，所有人都可以使用它，并动态配置所有内容。&lt;/p&gt;
&lt;p&gt;随着 Pod 和容器的启动，可以动态配置 ADC，以提供对新应用程序的访问，同时实现网络安全策略，并在某些情况下实施业务数据规则。通常，这是通过使用 “Ingress controller” 来实现的，其可以监控到新的容器和容器的启动，并且可以配置 ADC 以提供对新应用程序的访问权限，或者将更改通知给另一个 “Kubernetes controller” 节点。&lt;/p&gt;
&lt;h3 id=&#34;2-使负载均衡器lb配置与基础架构保持同步&#34;&gt;2. 使负载均衡器（LB）配置与基础架构保持同步&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gc0ll8lr83j20r30aytbc.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于在 Kubernetes 中一切都是可以不断变化的，因此位于集群前的负载均衡器是无法追踪所有事情的。除非您有类似上图紫色框所示的东西。&lt;/p&gt;
&lt;p&gt;该紫色框为 Ingress Controller，当容器启动或停止时，会在 Kubernetes 中创建一个事件。然后，Ingress Controller 会识别该事件并做出相应的响应。&lt;/p&gt;
&lt;p&gt;如上图所示，Ingress Controlle 识别到容器已启动，并将其放入负载均衡池。这样，应用程序控制器（无论是在云之上还是内部）都可以保持最新状态。&lt;/p&gt;
&lt;p&gt;这减轻了管理员的负担，并且比手动管理效率更高。&lt;/p&gt;
&lt;h3 id=&#34;3-南北向流量的安全&#34;&gt;3. 南北向流量的安全&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gc1hnwxcqlj20r30bpgon.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;南北和东西方都是用来描述流量流向的通用术语。南北流量是指流量流入和流出 Kubernetes。&lt;/p&gt;
&lt;p&gt;如前所述，企业需要在 Kubernetes 前放置一些设备来监视流量。例如，防火墙，DDoS 防护或任何其他可捕获恶意流量的设备。&lt;/p&gt;
&lt;p&gt;这些设备在流量管理方面也很有用。因此，如果流量需要流向特定的区域，这是理想的选择。Ingress Controller 在这方面也可以提供很多帮助。&lt;/p&gt;
&lt;p&gt;如果企业可以通过统一的解决方案使这种功能自动化，那么他们可以得到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更简化操作&lt;/li&gt;
&lt;li&gt;更好的应用程序性能&lt;/li&gt;
&lt;li&gt;可在不中断前端的情况下进行后端更改&lt;/li&gt;
&lt;li&gt;自动化的安全策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-为大规模部署准备的中央控制器&#34;&gt;4. 为大规模部署准备的中央控制器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gc1i8wydpyj20r30bamzf.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;企业还需要考虑到横向扩展，特别是在安全性方面。&lt;/p&gt;
&lt;p&gt;如上图所示，Ingress Controller（由紫色框表示）仍然存在，但是这次它正在处理来自多个 Kubernetes 节点的请求，并且正在观测整个 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;Ingress Controller 前方的蓝色圆圈是 &lt;a href=&#34;https://www.a10networks.com/products/harmony-controller/&#34;&gt;A10 Networks Harmony Controller&lt;/a&gt;。这种控制器可以实现高效的负载分配，并且可以将信息快速发送到适当的位置。&lt;/p&gt;
&lt;p&gt;使用这样的中央控制器，必须选择一种在现有解决方案上进行少量额外配置，就可进行扩容和缩容的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;5-微服务之间的访问控制&#34;&gt;5. 微服务之间的访问控制&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gc1ikekni3j20r30ckjuz.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;与流入和流出 Kubernetes 的南北流量相反，东西向流量在 Kubernetes 节点之间流动。在上图中，您可以看到东西向流量是如何运作的。&lt;/p&gt;
&lt;p&gt;当流量在 Kubernetes 节点之间流动时，可以通过物理网络，虚拟网络或 overlay 网络来发送该流量。如果不通过某种方式来监控那些东西向的流量，那么对流量如何从一个 pod 或容器流向另一个 pod 或容器的了解就变得非常困难。&lt;/p&gt;
&lt;p&gt;另外，它还可能带来严重的安全风险：&lt;strong&gt;获得对一个容器的访问权限的攻击者可以访问整个内部网络&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;幸运的是，企业可以通过“服务网格”（例如 A10 Secure Service Mesh）来解决这个问题。通过充当容器之间的代理以实现安全规则，这可以确保东西向的流量安全，并且还可以帮助扩展，负载均衡，服务监视等。&lt;/p&gt;
&lt;p&gt;此外，服务网格可以在 Kubernetes 内部运行，而无需将流量发送到物理设备或 VM。使用服务网格，东西向的流量状况如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gc1ikyysvtj20r30bcn0n.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过这种解决方案，像金融机构这样的企业可以轻松地将信息保留在应有的位置，而不用担心影响安全性。&lt;/p&gt;
&lt;h3 id=&#34;6-东西向流量加密&#34;&gt;6. 东西向流量加密&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gc1ivrlln4j20r309ojtt.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果没有适当的加密，未加密的信息可能会从一个物理 Kubernetes 节点流到另一个。这是一个严重的问题，特别是对于需要处理特别敏感信息的金融机构和其他企业。&lt;/p&gt;
&lt;p&gt;这就是为什么对于企业而言，在评估云安全产品时，重要的是选择一种可以在离开节点时对流量进行加密，并在进入节点时对其进行解密的方法。&lt;/p&gt;
&lt;p&gt;供应商可以通过两种方式提供这种类型的保护：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gc1ixe7n4xj20r30b0aci.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一个选择是 Sidecar 代理部署，这种方法也是最受欢迎的。&lt;/p&gt;
&lt;p&gt;通过这样的部署，管理员可以告诉 Kubernetes，每当启动特定 pod 时，应在该 pod 中启动一个或多个其他容器。&lt;/p&gt;
&lt;p&gt;通常，其他容器是某种类型的代理，可以管理从 Pod 流入和流出的流量。&lt;/p&gt;
&lt;p&gt;从上图可以看出，Sidecar 代理部署的不利之处在于，每个 pod 都需要启动一个 Sidecar，因此将占用一定数量的资源。&lt;/p&gt;
&lt;p&gt;另一方面，企业也可以选择中心辐射代理部署。在这种类型的部署中，一个代理会处理从每个 Kubernetes 节点流出的流量。这样只需要较少的资源。&lt;/p&gt;
&lt;h3 id=&#34;7-应用流量分析&#34;&gt;7. 应用流量分析&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gc1j83rredj20r30dfn2i.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后一点是，企业了解应用程序层流量的详细信息至关重要。&lt;/p&gt;
&lt;p&gt;有了可同时监控南北和东西向流量的控制器，就已经有了两个理想的点来收集流量信息。&lt;/p&gt;
&lt;p&gt;这样做既可以帮助优化应用程序，又可以提高安全性，还可以拓展多种不同的功能。从最简单到最高级的顺序排列，这些功能可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过描述性分析进行&lt;strong&gt;性能监控&lt;/strong&gt;。大多数供应商都提供此功能。&lt;/li&gt;
&lt;li&gt;通过诊断分析&lt;strong&gt;更快地进行故障排除&lt;/strong&gt;。少数供应商提供此功能。&lt;/li&gt;
&lt;li&gt;通过机器学习系统生成的预测分析获得&lt;strong&gt;建议&lt;/strong&gt;。更少的供应商提供此功能。&lt;/li&gt;
&lt;li&gt;通过真实直观的AI生成的规范分析进行&lt;strong&gt;自适应控制&lt;/strong&gt;。只有最好，最先进的供应商才能提供此功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，当企业与供应商交流时，至关重要的是确定他们的产品可以提供哪些功能。&lt;/p&gt;
&lt;p&gt;使用 A10 Networks 的类似产品，可以查看大图分析以及相关的单个数据包，日志条目或问题。具有这种粒度的产品是企业应寻求的产品。&lt;/p&gt;
&lt;h2 id=&#34;关于开发和操作简便性的注意事项&#34;&gt;关于开发和操作简便性的注意事项&lt;/h2&gt;
&lt;p&gt;最后，让我们看一下企业在 Kubernetes 中的流量和安全性方面应该追寻的东西。考虑这些因素还可以为开发和运维团队大大简化工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有统一解决方案的简单体系结构。&lt;/li&gt;
&lt;li&gt;集中管理和控制，便于进行分析和故障排除。&lt;/li&gt;
&lt;li&gt;使用常见的配置格式，例如 YAML 和 JSON。&lt;/li&gt;
&lt;li&gt;无需更改应用程序代码或配置即可实现安全性和收集分析信息。&lt;/li&gt;
&lt;li&gt;自动化应用安全策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果公司优先考虑以上这些，则企业可以在使用 Kubernetes 时享受简单、自动化和安全的流量。您的基础设施、架构和运维团队都会对此感到满意。&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;&lt;strong&gt;原文信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者：Almas Raza、John Allen&lt;/p&gt;
&lt;p&gt;发表时间：31 Jul 2019 9:51am&lt;/p&gt;
&lt;p&gt;地址：https://thenewstack.io/7-requirements-for-optimized-traffic-flow-and-security-in-kubernetes/&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Post: K3d&#43;Kubecm 本地开发运维两不误</title>
      <link>https://guoxudong.io/post/k3d-k3s-kubecm/</link>
      <pubDate>Mon, 17 Feb 2020 11:51:39 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/k3d-k3s-kubecm/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;k3s 是由 Rancher Labs 于2019年年初推出的一款轻量级 Kubernetes 发行版，满足在边缘计算环境中运行在 x86、ARM64 和 ARMv7 处理器上的小型、易于管理的 Kubernetes 集群日益增长的需求。&lt;/p&gt;
&lt;p&gt;k3s 除了在边缘计算领域的应用外，在研发侧的表现也十分出色。我们可以快速在本地拉起一个轻量级的 k8s 集群，而 k3d 则是 k3s 社区创建的一个小工具，可以在一个 docker 进程中运行整个 k3s 集群，相比直接使用 k3s 运行在本地，更好管理和部署。&lt;/p&gt;
&lt;p&gt;在日常工作中，时长要在本地集群和多个远程集群之间切换来完成运维工作，这时使用 &lt;code&gt;kubecm&lt;/code&gt; 快速将 k3s 集群的 kubeconfig 与现有集群的 kubeconfig 合并，并可快速切换集群，开发运维两不误。&lt;/p&gt;
&lt;h2 id=&#34;安装-k3d&#34;&gt;安装 k3d&lt;/h2&gt;
&lt;p&gt;k3d 提供了多种安装方式，十分方便。&lt;/p&gt;
&lt;h3 id=&#34;使用脚本安装&#34;&gt;使用脚本安装&lt;/h3&gt;
&lt;p&gt;直接使用 &lt;code&gt;wget&lt;/code&gt; 和 &lt;code&gt;curl&lt;/code&gt; 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -q -O - https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 或&lt;/span&gt;
curl -s https://raw.githubusercontent.com/rancher/k3d/master/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装指定版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -q -O - https://raw.githubusercontent.com/rancher/k3d/master/install.sh | &lt;span style=&#34;color:#40ffff&#34;&gt;TAG&lt;/span&gt;=v1.3.4 bash
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 或&lt;/span&gt;
curl -s https://raw.githubusercontent.com/rancher/k3d/master/install.sh | &lt;span style=&#34;color:#40ffff&#34;&gt;TAG&lt;/span&gt;=v1.3.4 bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-homebrew-安装&#34;&gt;使用 Homebrew 安装&lt;/h3&gt;
&lt;p&gt;MacOS 或安装了 Homebrew 的 Linux 可以使用 brew 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install k3d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;还可以直接前往 &lt;a href=&#34;https://github.com/rancher/k3d/releases&#34;&gt;release 页面&lt;/a&gt; 下载二进制可执行文件，或者直接使用 &lt;code&gt;go install github.com/rancher/k3d&lt;/code&gt; 安装。&lt;/p&gt;
&lt;h2 id=&#34;创建-k3s-集群&#34;&gt;创建 k3s 集群&lt;/h2&gt;
&lt;p&gt;创建 k3s 集群也十分简单，一行命令就可拉起，速度非常快。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; k3d create -n k3s-local
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Created cluster network with ID facae4a046b169721805f93ec21ba1acb65b9efb8cf35866529178cb0fba75a9
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Created docker volume  k3d-k3s-local-images
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Creating cluster [k3s-local]
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Creating server using docker.io/rancher/k3s:v1&lt;span style=&#34;color:#3677a9&#34;&gt;.0.1&lt;/span&gt;...
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] SUCCESS: created cluster [k3s-local]
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] You can now use the cluster with:

export KUBECONFIG=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span&gt;
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是一般情况下，如果没有梯子的话，k3s 集群虽然拉起来很快，但因为拉不到镜像，集群组件都无法正常拉起。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; export KUBECONFIG=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; kubectl get pod -n kube-system
NAME                                      READY   STATUS              RESTARTS   AGE
helm-install-traefik-&lt;span style=&#34;color:#3677a9&#34;&gt;8&lt;/span&gt;wxmr                &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;m30s
metrics-server-&lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;d684c7b5-j4sc7            &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;m30s
coredns-d798c9dd-j6lpw                    &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;m30s
local-path-provisioner-&lt;span style=&#34;color:#3677a9&#34;&gt;58&lt;/span&gt;fb86bdfd-wv7sw   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;m30s
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; kubectl describe pod coredns-d798c9dd-j6lpw -n kube-system
...
Events:
  Type     Reason                  Age                 From                           Message
  ----     ------                  ----                ----                           -------
  Normal   Scheduled               &amp;lt;unknown&amp;gt;           &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;default&lt;/span&gt;-scheduler              Successfully assigned kube-system/coredns-d798c9dd-j6lpw to k3d-k3s-local-server
  Warning  FailedCreatePodSandBox  &lt;span style=&#34;color:#3677a9&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#447fcf&#34;&gt;s&lt;/span&gt; (x7 over &lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;m30s)  kubelet, k3d-k3s-local-server  Failed create pod sandbox: rpc &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;error&lt;/span&gt;: code = Unknown desc = failed to get sandbox image &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span&gt;: failed to pull image &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span&gt;: failed to pull and unpack image &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span&gt;: failed to resolve reference &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;k8s.gcr.io/pause:3.1&amp;#34;&lt;/span&gt;: failed to do request: Head https:&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;//k8s.gcr.io/v2/pause/manifests/3.1: dial tcp 64.233.189.82:443: i/o timeout
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;离线安装&#34;&gt;离线安装&lt;/h3&gt;
&lt;p&gt;如果没有梯子的话，就只能选择使用离线安装。&lt;/p&gt;
&lt;h4 id=&#34;下载离线镜像&#34;&gt;下载离线镜像&lt;/h4&gt;
&lt;p&gt;前往 &lt;a href=&#34;https://github.com/rancher/k3s/releases&#34;&gt;release 页面&lt;/a&gt; 下载指定版本的镜像，这里我们下载最新的 &lt;a href=&#34;https://github.com/rancher/k3s/releases/tag/v1.17.2%2Bk3s1&#34;&gt;v1.17.2+k3s1&lt;/a&gt; 镜像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1gbzdedmqpdj20sh0k776o.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下载到 &lt;code&gt;~/airgap&lt;/code&gt; 目录中，并进行解压，将解压后的目录重命名为 &lt;code&gt;1.17.2&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;运行离线镜像&#34;&gt;运行离线镜像&lt;/h3&gt;
&lt;p&gt;这里再次运行 k3d，部署 k3s 集群。这里要注意的是，挂载离线镜像的话，必须使用 &lt;code&gt;-i&lt;/code&gt; flag 来指定镜像版本，这里我们使用的是 &lt;a href=&#34;https://github.com/rancher/k3s/releases/tag/v1.17.2%2Bk3s1&#34;&gt;v1.17.2+k3s1&lt;/a&gt; 版本，而镜像的 tag 则是 &lt;code&gt;v1.17.2-k3s1&lt;/code&gt;，如果不确定 tag，可以去 &lt;a href=&#34;https://hub.docker.com/r/rancher/k3s/tags&#34;&gt;DockerHub&lt;/a&gt; 上查看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; k3d create -n k3s-local -i rancher/k3s:v1&lt;span style=&#34;color:#3677a9&#34;&gt;.17.2&lt;/span&gt;-k3s1  -v &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt;(pwd)/airgap/v1&lt;span style=&#34;color:#3677a9&#34;&gt;.17.2&lt;/span&gt;/:/&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt;/lib/rancher/k3s/agent/images/
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Created cluster network with ID &lt;span style=&#34;color:#3677a9&#34;&gt;10&lt;/span&gt;b3fca995fcb491ae1fe1c901672bf6f0a0fd6f51785ba8403947d2773ebd43
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Created docker volume  k3d-k3s-local-images
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Creating cluster [k3s-local]
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] Creating server using docker.io/rancher/k3s:v1&lt;span style=&#34;color:#3677a9&#34;&gt;.17.2&lt;/span&gt;-k3s1...
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] SUCCESS: created cluster [k3s-local]
INFO[&lt;span style=&#34;color:#3677a9&#34;&gt;0000&lt;/span&gt;] You can now use the cluster with:

export KUBECONFIG=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span&gt;
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 k3s 集群组件启动状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; export KUBECONFIG=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;$(k3d get-kubeconfig --name=&amp;#39;k3s-local&amp;#39;)&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; kubectl get pod -A -w
NAMESPACE     NAME                                      READY   STATUS              RESTARTS   AGE
kube-system   local-path-provisioner-&lt;span style=&#34;color:#3677a9&#34;&gt;58&lt;/span&gt;fb86bdfd-&lt;span style=&#34;color:#3677a9&#34;&gt;7&lt;/span&gt;jzbw   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;m35s
kube-system   coredns-d798c9dd-jhmds                    &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     Running             &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;m35s
kube-system   metrics-server-&lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;d684c7b5-&lt;span style=&#34;color:#3677a9&#34;&gt;4&lt;/span&gt;x2cd            &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     Running             &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;m35s
kube-system   traefik-&lt;span style=&#34;color:#3677a9&#34;&gt;6787&lt;/span&gt;cddb4b-&lt;span style=&#34;color:#3677a9&#34;&gt;9&lt;/span&gt;v7r4                  &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;16&lt;/span&gt;s
kube-system   svclb-traefik-fzrqj                       &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;     ContainerCreating   &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;15&lt;/span&gt;s
kube-system   helm-install-traefik-h8k2j                &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;     Completed           &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;6&lt;/span&gt;m35s
kube-system   svclb-traefik-fzrqj                       &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;/&lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt;     Running             &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;          &lt;span style=&#34;color:#3677a9&#34;&gt;21&lt;/span&gt;s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-kubecm&#34;&gt;使用 kubecm&lt;/h2&gt;
&lt;p&gt;在 k3s 集群启动成功后，使用 &lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;&lt;code&gt;kubecm&lt;/code&gt;&lt;/a&gt;，将 k3s 的 kubeconfig 与现有 kubeconfig 合并。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubecm add -f &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;$(&lt;/span&gt;k3d get-kubeconfig --name=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;k3s-local&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;)&lt;/span&gt; -n k3s -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;切换集群，选择 k3s。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;$&lt;/span&gt; kubecm s
Use the arrow keys to navigate: &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;↓&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;↑&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;→&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;←&lt;/span&gt;  and / toggles search
Select Kube Context
  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;😼&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;k3s&lt;/span&gt;(*)
    prod-tg
    test
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;↓&lt;/span&gt;   banma

--------- Info ----------
Name:           k3s
Cluster:        cluster-&lt;span style=&#34;color:#3677a9&#34;&gt;485&lt;/span&gt;d6mhcfm
User:           user-&lt;span style=&#34;color:#3677a9&#34;&gt;485&lt;/span&gt;d6mhcfm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以在本地使用 k3s 集群进行开发工作，而有运维工作的时候，使用 &lt;code&gt;kubecm switch&lt;/code&gt; 快速切换集群。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gbzegsyex5j20x90n70vv.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;k3s 同时支持 &lt;strong&gt;x86_64&lt;/strong&gt;、&lt;strong&gt;ARM64&lt;/strong&gt; 和 &lt;strong&gt;ARMv7&lt;/strong&gt; 架构，它可以十分灵活地跨任何边缘基础架构工作。不提 k3s 在边缘计算领域的应用，与之前使用的 &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt; 相比，k3s 裁剪掉了许多用不到的功能，并且安装更简单，启动更快，空间占用也更小。相信 k3s 在开发侧的作用也会越来越大，使云原生应用的开发更加的便利。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 使用 Grafana 展示肺炎疫情动态</title>
      <link>https://guoxudong.io/post/feiyan-grafana/</link>
      <pubDate>Fri, 14 Feb 2020 10:12:52 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/feiyan-grafana/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;新型冠状病毒疫情汹涌而来，全国各地严防死守，而疫情的实时数据也通过不同的渠道，如微信城市服务的疫情动态订阅、支付宝的疫情实时追踪、新浪新闻的疫情实时动态等等，各种平台纷纷将疫情的实时动态进行展示，确保人们可以第一时间了解疫情的发展情况。&lt;/p&gt;
&lt;p&gt;而无论是哪一家的数据推送和展示，都是面向大众的，并不能个性化的展示我们最关心的那些数据，所以这时就需要自制一个疫情动态展示的 Dashboard 了。&lt;/p&gt;
&lt;p&gt;说到 Dashboard，第一个联想到的当然就是 &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 了，&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 是自2014年以来推出的多平台开源分析和交互式可视化软件。连接支持的数据源，它会提供 Web 图表的展示以及报警。终端用户可以通过插件进行拓展，从而使用交互式的查询及展示复杂的监控仪表盘。&lt;/p&gt;
&lt;h2 id=&#34;项目准备&#34;&gt;项目准备&lt;/h2&gt;
&lt;p&gt;明确目标，我们这里需要定制一个 Dashboard 用于展示疫情动态，由于我目前在上海，需要展示全国和上海的确诊、疑似、治愈和死亡病例数；同时还需要一个病例发展曲线，用来观察疫情发展趋势；各省区情况已经上海各区情况也是需要的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 只是一个展示数据的工具，首先需要的是数据源，目前市面上并没有可以直接用于 Grafana 的疫情数据源，这里我们需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要一个 &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt;，无论是在你的笔记本电脑上，还是在你的 K8S 集群中（这里推荐使用 docker 进行运行 Grafana，如果部署在 K8S 集群中，那更好）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;a href=&#34;https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation&#34;&gt;SimpleJson&lt;/a&gt; 插件，它可以将 json 格式的数据，用作 Grafana 的数据源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发数据源&#34;&gt;开发数据源&lt;/h2&gt;
&lt;p&gt;数据源这里使用 Python Bottle 进行开发，当然你也可以选择 flask，都是一样的，我使用 Bottle 的原因是之前开发的 Grafana 数据源是使用 Bottle 开发的，这里直接拿来就可以用，调试配置甚至用于构建 docker 镜像的 &lt;code&gt;Dockerfile&lt;/code&gt; 和用于部署 K8S 的 &lt;code&gt;deploy.yaml&lt;/code&gt; 都有现成可以用的。使用 Python 开发 &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 数据源很简单，只有符合 &lt;a href=&#34;https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation&#34;&gt;SimpleJson&lt;/a&gt; 的格式要求即可。可以根据 &lt;a href=&#34;http://oz123.github.io/about.html&#34;&gt;Oz Nahum Tiram&lt;/a&gt; 的博文 &lt;a href=&#34;http://oz123.github.io/writings/2019-06-16-Visualize-almost-anything-with-Grafana-and-Python/index.html&#34;&gt;Visualize almost anything with Grafana and Python&lt;/a&gt; 来学习如果使用 Python 作为 &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; 的数据源。&lt;/p&gt;
&lt;p&gt;在对数据源的定制中，使用两种类型的的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;timeserie&lt;/code&gt; 类型：&lt;/p&gt;
&lt;p&gt;用于展示全国（含港澳台）和上海地区的疫情实时动态，展示确诊、疑似、治愈和死亡数，并且展示较昨日增加的数量，绘制了【确诊/疑似】数和【治愈/死亡】数的对比曲线。&lt;/p&gt;
&lt;p&gt;这里只要将全国确诊数 &lt;code&gt;gntotal&lt;/code&gt; 与 当前时间戳组合返回即可，其他指标也是这种方式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ffa500&#34;&gt;@app.post&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;/query&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;query&lt;/span&gt;():
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;print&lt;/span&gt;(request.json)
    body = []
    all_data = getDataSync()
    time_stamp = &lt;span style=&#34;color:#24909d&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#24909d&#34;&gt;round&lt;/span&gt;(time.time() * &lt;span style=&#34;color:#3677a9&#34;&gt;1000&lt;/span&gt;))
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; target &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt; request.json[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;targets&amp;#39;&lt;/span&gt;]:
    name = target[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; name == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;gntotal&amp;#39;&lt;/span&gt;:
        body.append({&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;gntotal&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;datapoints&amp;#39;&lt;/span&gt;: [[all_data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;gntotal&amp;#39;&lt;/span&gt;], time_stamp]]})
    body = dumps(body)
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; HTTPResponse(body=body, headers={&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt; 类型：&lt;/p&gt;
&lt;p&gt;用于绘制中国各省确诊、疑似、治愈和死亡病例数表格，以及上海各区确诊、疑似、治愈和死亡病例数表格。&lt;/p&gt;
&lt;p&gt;取出数据中的名称以及确诊、疑似、治愈和死亡数，&lt;code&gt;append&lt;/code&gt; 到 &lt;code&gt;rows&lt;/code&gt; 中即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ffa500&#34;&gt;@app.post&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;/query&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;query&lt;/span&gt;():
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;print&lt;/span&gt;(request.json)
    body = []
    all_data = getDataSync()
    sh_data = getShDataSync()
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; request.json[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;targets&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;] == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;:
        rows = []
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt; all_data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;]:
            row = [data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;susNum&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;cureNum&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;deathNum&amp;#39;&lt;/span&gt;]]
            rows.append(row)
        sh_rows = []
        &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;in&lt;/span&gt; sh_data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;]:
            row = [data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;conNum&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;susNum&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;cureNum&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;deathNum&amp;#39;&lt;/span&gt;]]
            sh_rows.append(row)
        bodies = {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;: [{
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;columns&amp;#34;&lt;/span&gt;: [
                {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;省份&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;},
                {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;确诊&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;conNum&amp;#34;&lt;/span&gt;},
                {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;疑似&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;susNum&amp;#34;&lt;/span&gt;},
                {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;治愈&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;cureNum&amp;#34;&lt;/span&gt;},
                {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;死亡&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deathNum&amp;#34;&lt;/span&gt;}
            ],
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;rows&amp;#34;&lt;/span&gt;: rows,
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;
        }],
            &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;: [{
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;columns&amp;#34;&lt;/span&gt;: [
                    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;省份&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;},
                    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;确诊&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;},
                    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;疑似&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34; type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;susNum&amp;#34;&lt;/span&gt;},
                    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;治愈&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;cureNum&amp;#34;&lt;/span&gt;},
                    {&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;死亡&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deathNum&amp;#34;&lt;/span&gt;}
                ],
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;rows&amp;#34;&lt;/span&gt;: sh_rows,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;
            }]}

        series = request.json[&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;targets&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;]
        body = dumps(bodies[series])
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; HTTPResponse(body=body, headers={&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;选择展示-panel-类型&#34;&gt;选择展示 Panel 类型&lt;/h2&gt;
&lt;p&gt;总的来说，使用了4种 Panel 进行展示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展示病例数的展示块，使用 &lt;code&gt;Singlestat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;展示数据对比曲线，使用 &lt;code&gt;Graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;展示表格，使用 &lt;code&gt;Table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文字标题，使用 &lt;code&gt;Text&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置数据源&#34;&gt;配置数据源&lt;/h2&gt;
&lt;h3 id=&#34;病例数展示块&#34;&gt;病例数展示块：&lt;/h3&gt;
&lt;p&gt;这里只有一个值，所以要选择 &lt;code&gt;First&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1gbvs6gmbzlj20x00ku0uk.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;病例数发展趋势图&#34;&gt;病例数发展趋势图：&lt;/h3&gt;
&lt;p&gt;这里将【确诊/疑似】和【治愈/死亡】数进行对比。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gbvs8hmuvoj21gu0iu41j.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据表格&#34;&gt;数据表格：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gbvsa2pharj21b30igdi1.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;
&lt;p&gt;整体效果还可以，先已用作公司大屏展示疫情情况（这里我司用于展示屏幕较小，只不过是一个小米电视，故字体和展示块都做的大了一些）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;构建&#34;&gt;构建&lt;/h2&gt;
&lt;p&gt;将代码打包成为 docker 镜像，就可以运行在任意环境以及 K8S 集群了，镜像已上传 dockerhub 直接拉取镜像，开箱即食。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Dockerfile&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt; python:3.7.3-alpine3.9&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;maintainer&lt;/span&gt;=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;sunnydog0826@gmail.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;COPY&lt;/span&gt; . /app&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://mirrors.aliyun.com/alpine/v3.9/main/&amp;#34;&lt;/span&gt; &amp;gt; /etc/apk/repositories &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; apk update &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; apk add --no-cache gcc g++ python3-dev python-dev linux-headers libffi-dev openssl-dev make &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;    &amp;amp;&amp;amp; pip3 install -r /app/requestments.txt -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;uwsgi&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--ini&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;uwsgi.ini&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行&#34;&gt;运行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;拉取镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker pull guoxudongdocker/feiyan-datasource
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;运行镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker run -d --name datasource -p 8088:3000 guoxudongdocker/feiyan-datasource
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加数据源&lt;/p&gt;
&lt;p&gt;选择 &lt;a href=&#34;https://grafana.com/grafana/plugins/grafana-simple-json-datasource/installation&#34;&gt;SimpleJson&lt;/a&gt; 类型的数据源，点击添加，填入数据源地址：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gbvsocijjuj20jj0lagot.jpg&#34; alt=&#34;datasource&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入 Dashboard&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Upload.json file&lt;/code&gt;，选择 &lt;code&gt;wuhan2020-grafana/dashboard.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gbvspqvaz0j20uh0iracw.jpg&#34; alt=&#34;import&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 K8S 部署（可选）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl apply -f deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;截止目前（2020年2月14日），病例数还在不断的增加，但是疑似病例数趋势开始下降，可以看出，目前新型肺炎的确诊速度增加了；治愈数也在不断的增加；上海地区和其他地区比起来，虽然有大批返工人员进入，但是并没有增加特别多的病例数，各个社区严防死守的效果初显；同时上海一直保持着死亡1人的情况，而且中国首例新型肺炎治愈的也在上海。总的来说只要大家注意预防，待在家中，多消毒，多通风，一定可以战胜疫情，度过难关。&lt;/p&gt;
&lt;p&gt;导入 Dashboard 的 &lt;code&gt;json&lt;/code&gt; 文件和部署 K8S 的 &lt;code&gt;yaml&lt;/code&gt; 文件都可以在 GitHub 上找到。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/sunny0826/wuhan2020-grafana&#34;&gt;https://github.com/sunny0826/wuhan2020-grafana&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 疫情期间【在家/公司】远程办公指南</title>
      <link>https://guoxudong.io/post/work-4-home/</link>
      <pubDate>Mon, 10 Feb 2020 10:52:26 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/work-4-home/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;hr&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

“非常时期呼唤非常担当”
&lt;/div&gt;

&lt;p&gt;这是我司 CEO 张世伟在复工当天致全体员工公开信的题目。2020年，在第一个不走亲戚的春节过后，我们鼠年的工作，以远程办公的形式开始了。&lt;/p&gt;
&lt;p&gt;在进行了一周的远程办公之后，我们于2月10日正式复工，但是由于我抵沪自我隔离未满7日，只得继续在家远程办公，但是不能因为在家办公就放低对自己的要求，故结合在假期浏览的一系列介绍远程办公的文章，以及疫情防控知识，总结了这篇远程及在公司办公指南，希望对大家有所帮助。&lt;/p&gt;
&lt;h2 id=&#34;取消晨会&#34;&gt;取消晨会&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;之所以将这个放在最前面，是由于这个在平时办公中的“正常操作”，在远程办公的环境下，&lt;strong&gt;成为了一场灾难&lt;/strong&gt;。2月3日开始，企业开始复工，但由于疫情还在扩散，所以大家不约而同的选择了远程办公&amp;hellip;而往日里那些“稳如老狗”的远程办公软件，阿里巴巴的钉钉，腾讯的企业微信，华为的 WeLink 相继出现了比较大的延迟甚至崩溃现象。同时还有其他的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家里的网络条件不佳，可能出现延迟或者掉线的现象&lt;/li&gt;
&lt;li&gt;同一时间，只有能一个人说话，沟通效率很低&lt;/li&gt;
&lt;li&gt;一些不必要的发言，比如需要单独沟通的问题，占用大量大家的时间&lt;/li&gt;
&lt;li&gt;出现多人等一人的情况&lt;/li&gt;
&lt;li&gt;没洗脸，没洗头，素颜等其他问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时由于中小学线上课堂的开始，各路人民教师纷纷转型十八线主播，网络环境更是变的拥挤不堪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/wap360/ad5fbf65gy1gbr5wkd8puj20c809f74q.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;故取消线上晨会，这里就显的比较合理，同时可以采用异步的协同方式，通过 jira 和 confluence 进行工作的协同。利用 jira 实时更新自己任务的状态，项目组长与组员也可以实时通过 jira 了解项目的实时进度，这样就减少了面对面的沟通，安全又高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/wap360/ad5fbf65gy1gbr68kif3lj20me0xumzk.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;目标分级&#34;&gt;目标分级&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;远程办公比统一办公需要更加细粒度的工作分级，什么事情应该马上做，什么事情可以放一放，什么时候对接的同事有时间，这些都需要规划的更加仔细。&lt;/p&gt;
&lt;p&gt;将工作内容进行细粒度拆分，使用个人看板，时间管理工具甚至记事本拆分自己每天的工作时间安排，每周对自己工作的任务列表进行回顾，将已完成的标记，将本周新增加的任务加入进来，这样很容易让我们在周一的时候对工作的优先级有个快速梳理，并且不容易遗漏一些细节工作。&lt;/p&gt;
&lt;p&gt;推荐使用&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E6%97%B6%E9%97%B4%E2%80%9C%E5%9B%9B%E8%B1%A1%E9%99%90%E2%80%9D%E6%B3%95&#34;&gt;四象限法&lt;/a&gt;来对自己目前的工作进行分级，根据紧急情况和重要情况，对自己的工作进行分级，优先处理那些紧急且重要的事情，同样个人看板也可以帮助您记录完成的任务和待完成的任务，这样写日报/周报就可以直接拿来用，不用再绞尽脑汁回忆今天/本周都做了什么，个人看板这里推荐 &lt;a href=&#34;https://trello.com&#34;&gt;Trello&lt;/a&gt;，个人免费使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gbrai6ynydj20b407kdg6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;提升个人效率&#34;&gt;提升个人效率&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;清晰区分工作时间和休息时间&#34;&gt;清晰区分工作时间和休息时间&lt;/h3&gt;
&lt;p&gt;在家办公，工作效率很容易变差。毕竟沙发和床就在身边，很容易工作着突然就想去休息一会儿。这里就需要在家里划分出一个 &lt;strong&gt;【工作区】&lt;/strong&gt; ，并在工作区中准备上班所需的一切；同时要按时起床，穿戴整齐，吃好早点，然后进入工作区开始一天的工作，通过这种简单的 &lt;strong&gt;仪式感&lt;/strong&gt; 可以让我们快速进入工作状态，更好的提高效率，不至于出现「在家工作居然比在公司下班晚」的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/wap360/ad5fbf65gy1gbraur5ylbj20hi0fiwf8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;按日程工作&#34;&gt;按日程工作&lt;/h3&gt;
&lt;p&gt;切记，&lt;strong&gt;在家办公只是地点变了，工作时间和内容并没有变&lt;/strong&gt;。按照上文中提到的目标分级，合理的将目标分为日程，并在自己的看板中进行记录，保持钉钉/微信实时在线，防止突然出现紧急且重要的突发任务，同时也将非紧急问题都推后处理，让聚焦工作的整块时间尽量不受干扰。&lt;/p&gt;
&lt;h3 id=&#34;珍惜自己的时间也珍惜他人的时间&#34;&gt;珍惜自己的时间也珍惜他人的时间&lt;/h3&gt;
&lt;p&gt;这是每个职场人应有的自律，少开无效会议，多用异步协同代替实时协同；非紧急事件给对方更多响应缓冲时间；能在 Confluence 里搜到的内容尽量不在群里提问。（运维组提供钉钉应答机器人，基础资源相关的问题，可以先 &lt;code&gt;@&lt;/code&gt; 群内机器人进行提问）。&lt;/p&gt;
&lt;h2 id=&#34;榜样作用&#34;&gt;榜样作用&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;主要负责人自主性地高效率完成工作，尽量少传播负面的信息。负责人主动去执行公司规章和在疫情期间发挥表率作用，为其他同事提供良好的表率，小到请假流程的规范，大到对疫区同事的生活的关心和支持。榜样的作用，可以让同事们心安，更快的投入到工作当中，齐心协力，共同度过难关。&lt;/p&gt;
&lt;h2 id=&#34;安全保障&#34;&gt;安全保障&lt;/h2&gt;
&lt;hr&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

安全第一！安全第一！安全第一！重要的事情说三遍。
&lt;/div&gt;

&lt;p&gt;道路千万条，安全第一条。在这个特殊的时期，我们做的所有努力其实都是建立在自身安全的前提下，如果没有自身安全，那么一切工作就都变的没有意义了。&lt;/p&gt;
&lt;p&gt;下面介绍一些在不同场合中的安全建议：&lt;/p&gt;
&lt;h3 id=&#34;上班路上&#34;&gt;上班路上&lt;/h3&gt;
&lt;p&gt;尽量避免乘坐公共交通，建议步行、骑行或乘坐私家车上班。如必须乘坐公共交通工具时，务必全程佩戴口罩，途中尽量避免用手触摸车上物品。&lt;/p&gt;
&lt;p&gt;戴口罩的同时也要戴上手套（冬天的手套或者户外手套皆可），在地铁、汽车和公共场所不要摘下手套。同样要小心楼梯扶手、电梯按钮。尽量远离他人1米：特别是在公共场所时，应该适当与他人保持距离。如在路上时，尽可能远离其他人（至少1米）。&lt;/p&gt;
&lt;p&gt;到达园区之后，尽量走楼梯，不要乘电梯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1gbrcy6k5cxg20dc07i0y1.gif&#34; alt=&#34;走楼梯&#34;&gt;&lt;/p&gt;
&lt;center&gt;照片提供人：@王沛&lt;/center&gt;
&lt;h3 id=&#34;办公室内&#34;&gt;办公室内&lt;/h3&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

办公室内不开中央空调，请增添衣物
&lt;/div&gt;

&lt;p&gt;保持办公区环境清洁，建议每日通风3次，每次20-30分钟，通风时注意保暖。人与人之间保持1米以上距离，办公室中不要摘除口罩，并且不要打开中央空调，请增添衣物。&lt;/p&gt;
&lt;p&gt;到达公司的第一件事，先洗手，之后再清理工位，有条件的同学使用酒精或者消毒湿巾将手可以接触到的地方进行消毒，键盘、鼠标、笔记本、桌面等都是首要清洁目标。同时不要用手触摸眼睛，有条件的同学可以带上护目镜。&lt;/p&gt;
&lt;h3 id=&#34;会议室内&#34;&gt;会议室内&lt;/h3&gt;
&lt;p&gt;工作办公中减少会议（可以用远程会议方式代替），如果非要开会需要做到以下三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为参会人员配备一次性医用口罩等物品；&lt;/li&gt;
&lt;li&gt;会场座位间隔建议1米以上；&lt;/li&gt;
&lt;li&gt;会议时间较长的建议每小时通风1次。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;午饭时间&#34;&gt;午饭时间&lt;/h3&gt;
&lt;p&gt;饭前要洗手，建议自己带饭，带瓶装矿泉水，不要和别人一起进餐，&lt;strong&gt;尤其不要面对面进餐&lt;/strong&gt;，避免肉类生食。建议营养配餐，清淡适口。&lt;/p&gt;
&lt;h2 id=&#34;保持乐观的心态&#34;&gt;保持乐观的心态&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;由于我的母亲是医生的缘故，在这次疫情期间多次听说有人感觉自己出现了肺炎症状，但是检测后却十分正常，这就是 &lt;strong&gt;过度焦虑&lt;/strong&gt; 引发的身体不适。&lt;/p&gt;
&lt;p&gt;对于没有去过疫区，并且没有和疫区出来的人进行过接触的人，主要还是应该把精力放在预防和消毒上，不要疑神疑鬼，保持乐观的心态和充足的睡眠，相信我们一定能度过这次的难关！&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/4j715itQQPLivqfX0bseRw&#34;&gt;疫情下的阿里员工，约定这样上班&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/P33JO0OS4CuN7M8alLIF_Q&#34;&gt;调查完150个远程办公团队，我们发现了这几个真相&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.toutiao.com/a6791254617146524173/?timestamp=1581228897&amp;amp;app=news_article&amp;amp;group_id=6791254617146524173&amp;amp;req_id=2020020914145701001203319422A09121&#34;&gt;开工在即，在办公室中如何练成“百毒不侵”？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Kubecm：管理你的 kubeconfig</title>
      <link>https://guoxudong.io/post/kubecm/</link>
      <pubDate>Mon, 09 Dec 2019 10:07:46 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/kubecm/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;该项目脱胎于 &lt;a href=&#34;https://github.com/sunny0826/mergeKubeConfig&#34;&gt;mergeKubeConfig&lt;/a&gt; 项目，最早写该项目的目的是在一堆杂乱无章的 kubeconfig 中自由的切换。随着需要操作的 Kubernetes 集群越来越多，在不同的集群之间切换也越来越麻烦，而操作 Kubernetes 集群的本质不过是通过 &lt;code&gt;kubeconfig&lt;/code&gt; 访问 Kubernetes 集群的 API Server，以操作 Kubernetes 的各种资源，而 &lt;code&gt;kubeconfig&lt;/code&gt; 不过是一个 yaml 文件，用来保存访问集群的密钥，最早的 &lt;a href=&#34;https://github.com/sunny0826/mergeKubeConfig&#34;&gt;mergeKubeConfig&lt;/a&gt; 不过是一个操作 yaml 文件的 Python 脚本。而随着 golang 学习的深入，也就动了重写这个项目的念头，就这样 &lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 诞生了。&lt;/p&gt;
&lt;h2 id=&#34;kubecm&#34;&gt;kubecm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 由 golang 编写，支持 &lt;code&gt;Mac&lt;/code&gt; &lt;code&gt;Linux&lt;/code&gt; 和 &lt;code&gt;windows&lt;/code&gt; 平台，&lt;code&gt;delete&lt;/code&gt; &lt;code&gt;rename&lt;/code&gt; &lt;code&gt;switch&lt;/code&gt; 提供比较实用的交互式的操作，目前的功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add ：添加新的 &lt;code&gt;kubeconfig&lt;/code&gt; 到 &lt;code&gt;$HOME/.kube/config&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;completion ：命令行自动补全功能&lt;/li&gt;
&lt;li&gt;delete：删除已有的 &lt;code&gt;context&lt;/code&gt; ，提供交互式和指定删除两种方式&lt;/li&gt;
&lt;li&gt;merge：将指定目录中的 &lt;code&gt;kubeconfig&lt;/code&gt; 合并为一个 &lt;code&gt;kubeconfig&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;rename：重名指定的 &lt;code&gt;context&lt;/code&gt;，提供交互式和指定重命名两种方式&lt;/li&gt;
&lt;li&gt;switch：交互式切换 &lt;code&gt;context&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 支持 &lt;code&gt;Mac&lt;/code&gt; &lt;code&gt;Linux&lt;/code&gt; 和 &lt;code&gt;windows&lt;/code&gt; 平台，安装方式也比较简单：&lt;/p&gt;
&lt;h4 id=&#34;macos&#34;&gt;MacOS&lt;/h4&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

使用 &lt;code&gt;brew&lt;/code&gt; 或者直接下载二进制可执行文件
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install sunny0826/tap/kubecm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

下载二进制可执行文件
&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# linux x86_64&lt;/span&gt;
curl -Lo kubecm.tar.gz https://github.com/sunny0826/kubecm/releases/download/v&lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;VERSION&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;/kubecm_&lt;span style=&#34;color:#ed9d13&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;VERSION&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;_Linux_x86_64.tar.gz
tar -zxvf kubecm.tar.gz kubecm
&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; kubecm
sudo mv kubecm /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

下载二进制可执行文件，并将文件移动到 &lt;code&gt;$PATH&lt;/code&gt; 中即可
&lt;/div&gt;

&lt;h2 id=&#34;命令行自动补全&#34;&gt;命令行自动补全&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 提供了和 &lt;a href=&#34;https://github.com/kubernetes/kubectl&#34;&gt;kubectl&lt;/a&gt; 一样的 completion 命令行自动补全功能（支持 bash/zsh）
&lt;/div&gt;

&lt;p&gt;以 &lt;code&gt;zsh&lt;/code&gt; 为例，在 &lt;code&gt;$HOME/.zshrc&lt;/code&gt; 中添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;source &amp;lt;(kubecm completion zsh)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用 &lt;code&gt;source&lt;/code&gt; 命令，使其生效&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$HOME&lt;/span&gt;/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，在输入 &lt;code&gt;kubecm&lt;/code&gt; 后按 &lt;kbd&gt;tab&lt;/kbd&gt; 键，就可以看到命令行自动补全的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1g9qa0yy3bvj21co0f2hdt.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;操作-kubeconfig&#34;&gt;操作 kubeconfig&lt;/h2&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;

&lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 可以实现 &lt;code&gt;kubeconfig&lt;/code&gt; 的查看、添加、删除、合并、重命名和切换
&lt;/div&gt;

&lt;h4 id=&#34;查看&#34;&gt;查看&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 查看 $HOME/.kube/config 中所有的 context&lt;/span&gt;
kubecm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;添加&#34;&gt;添加&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 添加 example.yaml 到 $HOME/.kube/config.yaml，该方式不会覆盖源 kubeconfig，只会在当前目录中生成一个 config.yaml 文件&lt;/span&gt;
kubecm add -f example.yaml

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 功能同上，但是会将 example.yaml 中的 context 命名为 test&lt;/span&gt;
kubecm add -f example.yaml -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 添加 -c 会覆盖源 kubeconfig&lt;/span&gt;
kubecm add -f example.yaml -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;删除&#34;&gt;删除&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 交互式删除&lt;/span&gt;
kubecm delete
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 删除指定 context&lt;/span&gt;
kubecm delete my-context
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;合并&#34;&gt;合并&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 合并 test 目录中的 kubeconfig,该方式不会覆盖源 kubeconfig，只会在当前目录中生成一个 config.yaml 文件&lt;/span&gt;
kubecm merge -f &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; 

&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 添加 -c 会覆盖源 kubeconfig&lt;/span&gt;
kubecm merge -f &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;重命名&#34;&gt;重命名&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 交互式重命名&lt;/span&gt;
kubecm rename
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 将 dev 重命名为 test&lt;/span&gt;
kubecm rename -o dev -n &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 重命名 current-context 为 dev&lt;/span&gt;
kubecm rename -n dev -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;切换默认-namespace&#34;&gt;切换默认 namespace&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 交互式切换 namespace&lt;/span&gt;
kubecm namespace
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 或者&lt;/span&gt;
kubecm ns
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 切换默认 namespace 为 kube-system&lt;/span&gt;
kubecm ns kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;效果展示&#34;&gt;效果展示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;Interaction.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;视频介绍&#34;&gt;视频介绍&lt;/h2&gt;

&lt;div style=&#34;position: relative; width: 100%; height: 0; padding-bottom: 75%;&#34;&gt;
    &lt;iframe src=&#34;//player.bilibili.com/player.html?aid=88259938&amp;amp;cid=150776221&amp;amp;page=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;style=&#34;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&#34;&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; 项目的初衷为学习 golang 并熟悉 client-go 的使用，随着使用的深入，断断续续增加了不少功能，开发出了一个看上去还算正规的项目。总的来说都是根据自己的喜好来开发的业余项目，欢迎各位通过 &lt;a href=&#34;https://github.com/sunny0826/kubecm/issues/new&#34;&gt;ISSUE&lt;/a&gt; 来进行交流和讨论。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 小工具介绍：KubeWatch</title>
      <link>https://guoxudong.io/post/kubewatch/</link>
      <pubDate>Wed, 04 Dec 2019 17:09:51 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/kubewatch/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;这次要介绍一个 Kubernetes 资源观测工具，实时监控 Kubernetes 集群中各种资源的新建、更新和删除，并实时通知到各种协作软件/聊天软件，目前支持的通知渠道有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hipchat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mattermost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webhook&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我这边开发了钉钉的通知渠道，但是在上游 &lt;a href=&#34;https://github.com/bitnami-labs/kubewatch/issues/198&#34;&gt;ISSUE#198&lt;/a&gt; 中提出的贡献请求并没有得到回应，所以这边只能 fork 了代码，然后自己进行了开发，以支持钉钉通知。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;这里推荐使用 helm 进行安装，快速部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm install kubewatch stable/kubewatch &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set rbac.create=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set slack.channel=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;#YOUR_CHANNEL&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set slack.token=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;xoxb-YOUR_TOKEN&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set resourcesToWatch.pod=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set resourcesToWatch.daemonset=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想使用钉钉通知，则可以在 &lt;a href=&#34;https://github.com/sunny0826/kubewatch-chat&#34;&gt;GitHub&lt;/a&gt; 上拉取我的代码，代码中包含 helm chart 包，可直接进行安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/sunny0826/kubewatch-chat.git
&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; kubewatch-chat
helm install kubewatch kubewatch &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set dingtalk.sign=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;XXX&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set dingtalk.token=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;XXXX-XXXX-XXXX&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;钉钉配置&#34;&gt;钉钉配置&lt;/h2&gt;
&lt;p&gt;在钉钉中创建 &lt;code&gt;智能群助手&lt;/code&gt; ，之后&lt;/p&gt;
&lt;h3 id=&#34;获取-token&#34;&gt;获取 token&lt;/h3&gt;
&lt;p&gt;复制的 webhook 中 &lt;code&gt;https://oapi.dingtalk.com/robot/send?access_token={YOUR_TOKEN}&lt;/code&gt;, &lt;code&gt;{YOUR_TOKEN}&lt;/code&gt; 就是要填入的 token。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1g9ku2hvs16j20ep05smxk.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安全设置&#34;&gt;安全设置&lt;/h2&gt;
&lt;p&gt;钉钉智能群助手在更新后新增了安全设置，提供三种验证方式 &lt;code&gt;自定义关键词&lt;/code&gt; &lt;code&gt;加签&lt;/code&gt; &lt;code&gt;IP地址（段）&lt;/code&gt;，这里推荐使用 &lt;code&gt;IP地址（段）的方式&lt;/code&gt;，直接将 Kubernetes 集群的出口 IP 填入设置即可。同时也提供了 &lt;code&gt;加签&lt;/code&gt; 的方式，拷贝秘钥，将其填入 &lt;code&gt;dingtalk.sign&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1g9ku6qjwy2j20fo077glw.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;项目配置&#34;&gt;项目配置&lt;/h2&gt;
&lt;p&gt;编辑 &lt;code&gt;kubewatch/value.yaml&lt;/code&gt; ，修改配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## Global Docker image parameters&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## Please, note that this will override the image parameters, including dependencies, configured to use the global value&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## Current available global Docker image parameters: imageRegistry and imagePullSecrets&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;##&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# global:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   imageRegistry: myRegistryName&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   imagePullSecrets:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#     - myRegistryKeySecretName&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;slack&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;channel&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;xoxb&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;hipchat&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# room: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# token: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# url: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mattermost&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# channel: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# url: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# username: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;flock&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# url: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;webhook&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# url: &amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;dingtalk&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;enabled&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sign&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# namespace to watch, leave it empty for watching all.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespaceToWatch&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Resources to watch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resourcesToWatch&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;deployment&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;replicationcontroller&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;replicaset&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;daemonset&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;services&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pod&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;job&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;persistentvolume&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;registry&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;docker.io&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#  repository: bitnami/kubewatch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;repository&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;guoxudongdocker/kubewatch-chart&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#  tag: 0.0.4-debian-9-r405&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tag&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;latest&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;pullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Always&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## Optionally specify an array of imagePullSecrets.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## Secrets must be manually created in the namespace.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;##&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# pullSecrets:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   - myRegistryKeySecretName&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## String to partially override kubewatch.fullname template (will maintain the release name)&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;##&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# nameOverride:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;## String to fully override kubewatch.fullname template&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;##&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# fullnameOverride:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;rbac&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# If true, create &amp;amp; use RBAC resources&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;serviceAccount&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Specifies whether a ServiceAccount should be created&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;create&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# The name of the ServiceAccount to use.&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# If not set and create is true, a name is generated using the fullname template&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;resources&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# limits:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   cpu: 100m&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   memory: 300Mi&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# requests:&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   cpu: 100m&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#   memory: 300Mi&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Affinity for pod assignment&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# affinity: {}&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Tolerations for pod assignment&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tolerations&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Node labels for pod assignment&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Ref: https://kubernetes.io/docs/user-guide/node-selection/&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nodeSelector&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;podAnnotations&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;podLabels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;replicaCount&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;value.yaml&lt;/code&gt; 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/sunny0826/kubewatch-chat.git
&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; kubewatch-chat
helm install my-release -f kubewatch/values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;slack-配置&#34;&gt;Slack 配置&lt;/h2&gt;
&lt;p&gt;Slack 为 kubewatch 默认的通知软件，这里就不简介 Slack 的安装和注册，直接从创建 APP 开始&lt;/p&gt;
&lt;h3 id=&#34;创建一个-app&#34;&gt;创建一个 APP&lt;/h3&gt;
&lt;p&gt;进去创建 &lt;a href=&#34;https://api.slack.com/apps&#34;&gt;APP 页面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1g9kum3x5npj21h40p6tdx.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择 &lt;code&gt;App Name&lt;/code&gt; 和 &lt;code&gt;Development Slack Workspace&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1g9kupp0av1j210c0uejvj.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加-bot-用户&#34;&gt;添加 Bot 用户&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kuszmgggj21n4156gu2.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加-app-到-workspace&#34;&gt;添加 App 到 Workspace&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1g9kuyzwzetj21qu0wmq9n.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;获取-bot-token&#34;&gt;获取 Bot-token&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kv06dva8j21s60uajxf.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;通知效果&#34;&gt;通知效果&lt;/h2&gt;
&lt;p&gt;在 Slack 中，&lt;code&gt;创建&lt;/code&gt; &lt;code&gt;更新&lt;/code&gt; &lt;code&gt;删除&lt;/code&gt; 分别以绿、黄和红色代表&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1g9kv23nvmoj213c0mewj4.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在钉钉中，我进行了汉化&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1g9kv5fppglj20dd08zdgs.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1g9kv5uuxn4j20ea08fgmk.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;对于 kubewatch 我们这里主要用作监控各种 CronJob 的定时触发状态，已经 ConfigMap 和 Secrets 的状态变化，同时也观察 HPA 触发的弹性伸缩的状态，可以实时观测到业务高峰的到来，是一个不错的小工具。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 使用 Velero 进行集群备份与迁移</title>
      <link>https://guoxudong.io/post/aliyun-velero/</link>
      <pubDate>Wed, 13 Nov 2019 09:13:22 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aliyun-velero/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在近日的一个风和日丽的下午，正在快乐的写 bug 时，突然间钉钉就被 call 爆了，原来是 k8s 测试集群的一个 namespace 突然不见了。这个 namespace 里面有 60 多个服务，瞬间全部没有了……虽然得益于我们的 CI/CD 系统，这些服务很快都重新部署并正常运行了，但是如果在生产环境，那后果就是不可想象的了。在排查这个问题发生的原因的同时，集群资源的灾备和恢复功能就提上日程了，这时 Velero 就出现了。&lt;/p&gt;
&lt;h2 id=&#34;velero&#34;&gt;Velero&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vmware-tanzu/velero&#34;&gt;Velero&lt;/a&gt; 是 VMWare 开源的 k8s 集群备份、迁移工具。可以帮助我们完成 k8s 的例行备份工作，以便在出现上面问题的时候可以快速进行恢复。同时也提供了集群迁移功能，可以将 k8s 资源迁移到其他 k8s 集群的功能。Velero 将集群资源保存在对象存储中，默认情况下可以使用 &lt;a href=&#34;https://velero.io/docs/v1.1.0/aws-config&#34;&gt;AWS&lt;/a&gt;、&lt;a href=&#34;https://velero.io/docs/v1.1.0/azure-config&#34;&gt;Azure&lt;/a&gt;、&lt;a href=&#34;https://velero.io/docs/v1.1.0/gcp-config&#34;&gt;GCP&lt;/a&gt; 的对象存储，同时也给出了插件功能用来拓展其他平台的存储，这里我们用到的就是阿里云的对象存储 OSS，阿里云也提供了 Velero 的插件，用于将备份存储到 OSS 中。下面我就介绍一下如何在阿里云容器服务 ACK 使用 Velero 完成备份和迁移。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Velero 地址：https://github.com/vmware-tanzu/velero&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ACK 插件地址：https://github.com/AliyunContainerService/velero-plugin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;下载-velero-客户端&#34;&gt;下载 Velero 客户端&lt;/h3&gt;
&lt;p&gt;Velero 由客户端和服务端组成，服务器部署在目标 k8s 集群上，而客户端则是运行在本地的命令行工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前往 &lt;a href=&#34;https://github.com/vmware-tanzu/velero/releases&#34;&gt;Velero 的 Release 页面&lt;/a&gt; 下载客户端，直接在 GitHub 上下载即可&lt;/li&gt;
&lt;li&gt;解压 release 包&lt;/li&gt;
&lt;li&gt;将 release 包中的二进制文件 &lt;code&gt;velero&lt;/code&gt; 移动到 &lt;code&gt;$PATH&lt;/code&gt; 中的某个目录下&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;velero -h&lt;/code&gt; 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建-oss-bucket&#34;&gt;创建 OSS bucket&lt;/h3&gt;
&lt;p&gt;创建一个 OSS bucket 用于存储备份文件，这里也可以用已有的 bucket，之后会在 bucket 中创建 &lt;code&gt;backups&lt;/code&gt;、&lt;code&gt;metadata&lt;/code&gt;、&lt;code&gt;restores&lt;/code&gt;三个目录，这里建议在已有的 bucket 中创建一个子目录用于存储备份文件。&lt;/p&gt;
&lt;p&gt;创建 OSS 的时候一定要选对区域，要和 ACK 集群在同一个区域，存储类型和读写权限选择&lt;strong&gt;标准存储&lt;/strong&gt;和&lt;strong&gt;私有&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/wap720/ad5fbf65gy1g8w7t8c4xbj21021d8thq.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建阿里云-ram-用户&#34;&gt;创建阿里云 RAM 用户&lt;/h3&gt;
&lt;p&gt;这里需要创建一个阿里云 RAM 的用户，用于操作 OSS 以及 ACK 资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新建权限策略&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1g8w80cjiv2j21uo18cag8.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;策略内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:DescribeSnapshots&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:CreateSnapshot&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:DeleteSnapshot&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:DescribeDisks&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:CreateDisk&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;ecs:Addtags&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;oss:PutObject&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;oss:GetObject&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;oss:DeleteObject&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;oss:GetBucket&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;oss:ListObjects&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建用户&lt;/p&gt;
&lt;p&gt;在新建用户的时候要选择 &lt;code&gt;编程访问&lt;/code&gt;，来获取 &lt;code&gt;AccessKeyID&lt;/code&gt; 和 &lt;code&gt;AccessKeySecret&lt;/code&gt;，这里请创建一个新用于用于备份，不要使用老用户的 AK 和 AS。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8w8h4ek4uj21h40ue785.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署服务端&#34;&gt;部署服务端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拉取 &lt;a href=&#34;https://github.com/AliyunContainerService/velero-plugin&#34;&gt;Velero 插件&lt;/a&gt; 到本地&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/AliyunContainerService/velero-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置修改&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;install/credentials-velero&lt;/code&gt; 文件，将新建用户中获得的 &lt;code&gt;AccessKeyID&lt;/code&gt; 和 &lt;code&gt;AccessKeySecret&lt;/code&gt; 填入，这里的 OSS EndPoint 为之前 OSS 的访问域名（&lt;strong&gt;注：这里需要选择外网访问的 EndPoint。&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8w8xd1sgzj21c20cm75z.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#40ffff&#34;&gt;ALIBABA_CLOUD_ACCESS_KEY_ID&lt;/span&gt;=&amp;lt;ALIBABA_CLOUD_ACCESS_KEY_ID&amp;gt;
&lt;span style=&#34;color:#40ffff&#34;&gt;ALIBABA_CLOUD_ACCESS_KEY_SECRET&lt;/span&gt;=&amp;lt;ALIBABA_CLOUD_ACCESS_KEY_SECRET&amp;gt;
&lt;span style=&#34;color:#40ffff&#34;&gt;ALIBABA_CLOUD_OSS_ENDPOINT&lt;/span&gt;=&amp;lt;ALIBABA_CLOUD_OSS_ENDPOINT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;install/01-velero.yaml&lt;/code&gt;，将 OSS 配置填入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero.io/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;BackupStorageLocation&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;component&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;config&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;objectStorage&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;bucket&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;ALIBABA_CLOUD_OSS_BUCKET&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;gt;  # OSS bucket 名称&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;prefix&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;OSS_PREFIX&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;gt;    # bucket 子目录&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;provider&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;alibabacloud&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;---&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero.io/v1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;VolumeSnapshotLocation&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;component&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;config&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;region&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&amp;lt;REGION&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;gt;    # 地域，如果是华东2（上海），则为 cn-shanghai&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;provider&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;alibabacloud&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8s 部署 Velero 服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 新建 namespace&lt;/span&gt;
kubectl create namespace velero
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 部署 credentials-velero 的 secret&lt;/span&gt;
kubectl create secret generic cloud-credentials --namespace velero --from-file &lt;span style=&#34;color:#40ffff&#34;&gt;cloud&lt;/span&gt;=install/credentials-velero
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 部署 CRD&lt;/span&gt;
kubectl apply -f install/00-crds.yaml
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 部署 Velero&lt;/span&gt;
kubectl apply -f install/01-velero.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试 Velero 状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ velero version
Client:
    Version: v1.1.0
    Git commit: a357f21aec6b39a8244dd23e469cc4519f1fe608
Server:
    Version: v1.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 Velero 的客户端和服务端已经部署成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务端清理&lt;/p&gt;
&lt;p&gt;在完成测试或者需要重新安装时，执行如下命令进行清理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete namespace/velero clusterrolebinding/velero
kubectl delete crds -l &lt;span style=&#34;color:#40ffff&#34;&gt;component&lt;/span&gt;=velero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;备份测试&#34;&gt;备份测试&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;velero-plugin&lt;/code&gt; 项目中已经给出 &lt;code&gt;example&lt;/code&gt; 用于测试备份。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署测试服务&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f examples/base.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;对 &lt;code&gt;nginx-example&lt;/code&gt; 所在的 namespace 进行备份&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero backup create nginx-backup --include-namespaces nginx-example --wait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;模拟 namespace 被误删&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete namespaces nginx-example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用 Velero 进行恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero restore create --from-backup nginx-backup --wait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;集群迁移&#34;&gt;集群迁移&lt;/h3&gt;
&lt;p&gt;迁移方法同备份，在备份后切换集群，在新集群恢复备份即可。&lt;/p&gt;
&lt;h3 id=&#34;高级用法&#34;&gt;高级用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定时备份&lt;/p&gt;
&lt;p&gt;对集群资源进行定时备份，则可在发生意外的情况下，进行恢复（默认情况下，备份保留 30 天）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 每日1点进行备份&lt;/span&gt;
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0 1 * * *&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 每日1点进行备份，备份保留48小时&lt;/span&gt;
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0 1 * * *&amp;#34;&lt;/span&gt; --ttl 48h
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 每6小时进行一次备份&lt;/span&gt;
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;@every 6h&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 每日对 web namespace 进行一次备份&lt;/span&gt;
velero create schedule &amp;lt;SCHEDULE NAME&amp;gt; --schedule=&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;@every 24h&amp;#34;&lt;/span&gt; --include-namespaces web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定时备份的名称为：&lt;code&gt;&amp;lt;SCHEDULE NAME&amp;gt;-&amp;lt;TIMESTAMP&amp;gt;&lt;/code&gt;，恢复命令为：&lt;code&gt;velero restore create --from-backup &amp;lt;SCHEDULE NAME&amp;gt;-&amp;lt;TIMESTAMP&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份删除&lt;/p&gt;
&lt;p&gt;直接执行命令进行删除&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero delete backups &amp;lt;BACKUP_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份资源查看&lt;/p&gt;
&lt;p&gt;备份查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero backup get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看定时备份&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero schedule get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看可恢复备份&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;velero restore get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份排除项目&lt;/p&gt;
&lt;p&gt;可为资源添加指定标签，添加标签的资源在备份的时候被排除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 添加标签&lt;/span&gt;
kubectl label -n &amp;lt;ITEM_NAMESPACE&amp;gt; &amp;lt;RESOURCE&amp;gt;/&amp;lt;NAME&amp;gt; velero.io/exclude-from-backup=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 为 default namespace 添加标签&lt;/span&gt;
kubectl label -n default namespace/default velero.io/exclude-from-backup=&lt;span style=&#34;color:#24909d&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问题汇总&#34;&gt;问题汇总&lt;/h3&gt;
&lt;h4 id=&#34;时区问题&#34;&gt;时区问题&lt;/h4&gt;
&lt;p&gt;进行定时备份时，发现备份使用的事 UTC 时间，并不是本地时间，经过排查后发现是 &lt;code&gt;velero&lt;/code&gt; 镜像的时区问题，在调整后就会正常定时备份了，这里我重新调整了时区，直接调整镜像就好，修改 &lt;code&gt;install/01-velero.yaml&lt;/code&gt; 文件，将镜像替换为 &lt;code&gt;registry-vpc.cn-shanghai.aliyuncs.com/keking/velero:latest&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;caption&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Image from: [**Pexels**](https://www.pexels.com)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;focal_point&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;preview_only&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;---&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;extensions/v1beta1&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;namespace&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;deploy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;annotations&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;prometheus.io/path&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/metrics&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;prometheus.io/port&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;8085&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;prometheus.io/scrape&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;component&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;deploy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;serviceAccountName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# sync from gcr.io/heptio-images/velero:latest&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;registry-vpc.cn-shanghai.aliyuncs.com/keking/velero:latest&lt;span style=&#34;color:#666&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 修复时区后的镜像&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- /velero&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- server&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- --default-volume-snapshot-locations=alibabacloud:default&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;env&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;VELERO_SCRATCH_DIR&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/scratch&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;ALIBABA_CLOUD_CREDENTIALS_FILE&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/credentials/cloud&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/plugins&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;plugins&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/scratch&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;scratch&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/credentials&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cloud-credentials&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;initContainers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;registry.cn-hangzhou.aliyuncs.com/acs/velero-plugin-alibabacloud:v1&lt;span style=&#34;color:#3677a9&#34;&gt;.2&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;velero-plugin-alibabacloud&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/target&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;plugins&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;emptyDir&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;plugins&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;emptyDir&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;scratch&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cloud-credentials&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;secret&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;secretName&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;cloud-credentials&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;版本问题&#34;&gt;版本问题&lt;/h4&gt;
&lt;p&gt;截止发稿时，Velero 已经发布了 v1.2.0 版本，目前 ACK 的 Velero 的插件还未升级。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;近日正好有 k8s 集群服务迁移服务的需求，使用 Velero 完成了服务的迁移，同时也每日进行集群资源备份，其能力可以满足容器服务的灾备和迁移场景，实测可用，现已运行在所有的 k8s 集群。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 使用 Grafana 展示阿里云监控指标</title>
      <link>https://guoxudong.io/post/aliyun-cms-grafana/</link>
      <pubDate>Thu, 07 Nov 2019 11:08:36 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aliyun-cms-grafana/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;对于阿里云用户来说，阿里云监控是一个很不错的产品，首先它在配额内使用是免费的！免费的！免费的！重要的事情说三遍。他的功能类似于 zabbix，但是比 zabbix 提供了更多的监控项，基本上在云上使用的资源都可以通过云监控来实时监控。而它提供的开箱即用方式，天然集成云资源，并提供多种告警方式，免去了监控与告警系统搭建与维护的繁琐，并且减少了资源的消耗，比购买 ECS 自己搭建 zabbix 要少消耗很多资源。同时阿里云监控和阿里云其他服务一样，也提供了比较完整的 OpenApi 以及各种语言的 sdk，可以基于阿里云的 OpenApi 将其与自己的系统集成。我们之前也是这么做的，但是随着监控项的增加，以及经常需要在办公场地监控投屏的专项监控页，光凭我们的运维开发工程师使用 vue 写速度明显跟不上，而且页面的美观程度也差很多。&lt;/p&gt;
&lt;h3 id=&#34;手写前端-vs-grafana&#34;&gt;手写前端 VS Grafana&lt;/h3&gt;
&lt;p&gt;手写前端虽然可定制化程度更高，但是需要消耗大量精力进行调试，对于运维人员，哪怕是运维开发也是吃不消的（前端小哥哥和小姐姐是不会来帮你的，下图就是我去年拿 vue 写的伪 Grafana 展示页面，花费了大约一周时间在调整这些前端元素）。
&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pfrw1licj22ye1gg4qp.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Grafana 则标准化程度很高，展示也更加符合大众审美，某些定制化需求可以通过自定义 DataSource 或者 AJAX 插件的 iframe 模式完成。开发后端 DataSource 肯定就没有前端调整 css 那么痛苦和耗时了，整体配置开发一个这样的页面可能只消耗一人天就能完成。而在新产品上线时，构建一个专项监控展示页面速度就更快了，几分钟内就能完成。
&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pfvp0keej22yc1g2khm.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;关于阿里云监控&#34;&gt;关于阿里云监控&lt;/h2&gt;
&lt;p&gt;云监控（CloudMonitor）是一项针对阿里云资源和互联网应用进行监控的服务。&lt;/p&gt;
&lt;p&gt;云监控为云上用户提供开箱即用的企业级开放型一站式监控解决方案。涵盖 IT 设施基础监控，外网网络质量拨测监控，基于事件、自定义指标、日志的业务监控。为您全方位提供更高效、更全面、更省钱的监控服务。通过提供跨产品、跨地域的应用分组管理模型和报警模板，帮助您快速构建支持几十种云产品、管理数万实例的高效监控报警管理体系。通过提供 Dashboard，帮助您快速构建自定义业务监控大盘。使用云监控，不但可以帮助您提升您的系统服务可用时长，还可以降低企业 IT 运维监控成本。&lt;/p&gt;
&lt;p&gt;云监控服务可用于收集获取阿里云资源的监控指标或用户自定义的监控指标，探测服务可用性，以及针对指标设置警报。使您全面了解阿里云上的资源使用情况、业务的运行状况和健康度，并及时收到异常报警做出反应，保证应用程序顺畅运行。&lt;/p&gt;
&lt;h2 id=&#34;关于-grafana&#34;&gt;关于 Grafana&lt;/h2&gt;
&lt;p&gt;Grafana 是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。由于云监控的 Grafana 还没有支持告警，所以我们这里只用了 Grafana 的可视化功能，而告警本身就是云监控自带的，所以也不需要依赖 Grafana 来实现。而我们的 Prometheus 也使用了 Grafana 进行数据可视化，所以有现成的 Grafana-Server 使用。&lt;/p&gt;
&lt;h2 id=&#34;阿里云监控对接-grafana&#34;&gt;阿里云监控对接 Grafana&lt;/h2&gt;
&lt;p&gt;首先 Grafana 服务的部署方式这里就不做介绍了，请使用较新版本的 Grafana，最好是 5.5.0+。后文中也有我开源的基于阿里云云监控的 Grafana 的 helm chart，可以使用 helm 安装，并会直接导入云监控的指标，这个会在后文中介绍。&lt;/p&gt;
&lt;h3 id=&#34;安装阿里云监控插件&#34;&gt;安装阿里云监控插件&lt;/h3&gt;
&lt;p&gt;进入插件目录进行安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; /var/lib/grafana/plugins/
git clone https://github.com/aliyun/aliyun-cms-grafana.git 
service grafana-server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是使用 docker 或者部署在 k8s 集群，这里也可以使用环境变量在 Grafana 部署的时候进行安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;env&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;GF_INSTALL_PLUGINS&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 多个插件请使用,隔开&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;value&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;grafana-simple-json-datasource,https://github.com/aliyun/aliyun-cms-grafana/archive/master.zip;aliyun-cms-grafana&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您也可以下载 aliyun-cms-grafana.zip 插件解压后，上传服务器的 Grafana 的 plugins 目录下，重启 grafana-server 即可。&lt;/p&gt;
&lt;h3 id=&#34;配置云监控-datasource&#34;&gt;配置云监控 DataSource&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Grafana 启动后，进入 &lt;code&gt;Configuration&lt;/code&gt; 页面，选择 &lt;code&gt;DataSource&lt;/code&gt; Tab 页，单击右上方的&lt;code&gt;Add data source&lt;/code&gt;，添加数据源。&lt;/li&gt;
&lt;li&gt;选中&lt;code&gt;CMS Grafana Service&lt;/code&gt;，单击&lt;code&gt;select&lt;/code&gt;。
&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1g8ph0ukr0pj21nm0jk76m.jpg&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;填写配置项，URL 根据云监控所在地域填写，并且填写阿里云账号的 accessKeyId 和 accessSecret，完成后单击&lt;code&gt;Save&amp;amp;Test&lt;/code&gt;。
&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1g8ph4bg2bij218m194n9f.jpg&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建-dashboard&#34;&gt;创建 Dashboard&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;单击 &lt;code&gt;Create&lt;/code&gt; -&amp;gt; &lt;code&gt;Dashboard&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Query&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置图标，数据源选择之前添加的 &lt;code&gt;CMS Grafana Service&lt;/code&gt;，然后文档中的配置项填入指标即可（这里要注意的是，云监控 API 给返回的只有实例 ID，并没有自定义的实例名称，这里需要手动将其填入 &lt;code&gt;Y - column describe&lt;/code&gt; 中；而且只支持输入单个 Dimension，若输入多个，默认选第一个，由于这些问题才有了后续我开发的 &lt;code&gt;cms-grafana-builder&lt;/code&gt; 的动机）。
&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1g8phck0irbj22ye13in79.jpg&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;配置参考 &lt;a href=&#34;https://help.aliyun.com/document_detail/28619.html&#34;&gt;云产品监控项&lt;/a&gt;，
&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1g8phg832uvj21a40vo793.jpg&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用-helm-chart-的方式部署-grafana&#34;&gt;使用 helm chart 的方式部署 Grafana&lt;/h2&gt;
&lt;p&gt;项目地址：https://github.com/sunny0826/cms-grafana-builder&lt;/p&gt;
&lt;h3 id=&#34;cms-grafana-builder&#34;&gt;cms-grafana-builder&lt;/h3&gt;
&lt;p&gt;由于上文中的问题，我们需要手动选择每个实例 ID 到 Dimension 中，并且还要讲该实例的名称键入 &lt;code&gt;Y - column describe&lt;/code&gt; 中，十分的繁琐，根本不可能大批量的输入。&lt;/p&gt;
&lt;p&gt;这就是我开发这个 Grafana 指标参数生成器的原因，起初只是一个 python 脚本，用来将我们要监控的指标组装成一个 Grafana 可以使用 json 文件，之后结合 Grafana 的容器化部署方法，将其做成了一个 helm chart。可以在启动的时候自动将需要的参数生成，并且每日会对所有指标进行更新，这样就不用每次新购或者释放掉资源后还需要再跑一遍脚本。&lt;/p&gt;
&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;p&gt;只需要将项目拉取下来运行 &lt;code&gt;helm install&lt;/code&gt; 命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm install my-release kk-grafana-cms &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--namespace {your_namespace} &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set &lt;span style=&#34;color:#40ffff&#34;&gt;access_key_id&lt;/span&gt;={your_access_key_id} &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set &lt;span style=&#34;color:#40ffff&#34;&gt;access_secret&lt;/span&gt;={your_access_secret} &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set &lt;span style=&#34;color:#40ffff&#34;&gt;region_id&lt;/span&gt;={your_aliyun_region_id} &lt;span style=&#34;color:#ed9d13&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&lt;/span&gt;--set &lt;span style=&#34;color:#40ffff&#34;&gt;password&lt;/span&gt;={admin_password}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多详情见 &lt;a href=&#34;https://github.com/sunny0826/cms-grafana-builder&#34;&gt;github README&lt;/a&gt;，欢迎提 issue 交流。&lt;/p&gt;
&lt;h3 id=&#34;指标选择&#34;&gt;指标选择&lt;/h3&gt;
&lt;p&gt;在部署成功后，可修改 ConfigMap：&lt;code&gt;grafana-cms-metric&lt;/code&gt;，然后修改对应的监控指标项。&lt;/p&gt;
&lt;h3 id=&#34;效果&#34;&gt;效果&lt;/h3&gt;
&lt;p&gt;ECS:
&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1g8pi9toh3dj21gv0pldyf.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;RDS:
&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1g8pi9o91ejj21h80q316p.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;EIP:
&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1g8pi9i9if3j21h70q3aif.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Redis:
&lt;img src=&#34;https://tvax1.sinaimg.cn/large/ad5fbf65gy1g8pi8ss733j21h30pz7b6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;为了满足公司需求，后续还开发 DataSource 定制部分，用于公司监控大屏的展示，这部分是另一个项目，不在这个项目里，就不细说了，之后有机会总结后再进行分享。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 阿里云产品夜谈-容器服务交流</title>
      <link>https://guoxudong.io/post/aliyun-product-meetup/</link>
      <pubDate>Mon, 30 Sep 2019 09:32:35 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aliyun-product-meetup/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1g7hb4iwdpvj213i0vs4qq.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;9月25日晚受邀来到阿里云飞天园区参加阿里云MVP产品夜谈，在会上遇到了容器服务团队的负责人易立，并就容器服务进行了交流。此次参加夜谈的除了来自全球各地的阿里云MVP，还有来自安全团队、容器团队、AIoT 团队、大数据团队、数据库团队、人工智能团队、中间件团队、搜索引擎&amp;amp;智能推荐团队的负责人&amp;amp;产品经理。各个参会的MVP可以根据自己的研究方向或者感兴趣的方向选择，直接与团队负责人面对面交流，获取阿里云产品的最新信息，并提出使用意见，促进产品的发展。由于主要从事云原生&amp;amp;容器方面的工作，我选择了容器团队，与阿里云容器服务团队负责人易立就容器服务进行交流，本文记录了部分交流内容。&lt;/p&gt;
&lt;h2 id=&#34;容器服务交流&#34;&gt;容器服务交流&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1g7hdbw7rwij21zk13ax6s.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;关于集群版本集群升级&#34;&gt;关于集群版本&amp;amp;集群升级&lt;/h3&gt;
&lt;p&gt;众所周知，Kubernetes 以非常稳定的3个月发布一个版本速度在高速迭代这，Kubernetes v1.16.0 也即将 release ，但是目前 ACK 的 Kubernetes 版本依旧为 v1.12.6-aliyun.1 已落后官方4个大版本。得到的回复是新版本 1.14 已经上线，下周就可以升级了，1.14 版本之前已经上线，只不过一直在灰度测试，下周（2019年9月29日）就全面放开升级了。截止写这篇文章的时候，我们的多个 Kubernetes 集群已成功升级到 v1.14.6-aliyun.1 ，虽然在升级的时候出现了一点小问题，但是最后还是顺利解决了。&lt;/p&gt;
&lt;p&gt;然后就是集群升级的问题，集群升级的时候会建议对所有节点打快照，确保节点安全，但是如果在节点升级当中失败，就会出现一半为新版本节点，一半为旧版本节点的问题。我们的一个节点升级失败，就出现了上述问题，最后还是将该节点容器驱散，并将该节点移出集群才解决了升级问题。希望集群升级提供整体状态保存&amp;amp;回退功能，确保如果升级失败（或者出现新旧版本不兼容问题）的时候可以安全回退到之前版本。&lt;/p&gt;
&lt;h3 id=&#34;关于容器服务前端展示&#34;&gt;关于容器服务前端展示&lt;/h3&gt;
&lt;p&gt;ACK 的 WEB 界面相对简陋，一直以来都是对 Kubernetes Dashboard 进行了简单的包装，和其他公有云相比确实不如。不过这也不是容器服务独有的问题，阿里云你产品众多，大部分都有这样的问题。与易立交流得知，容器服务团队目前主要的任务还是确保 Kubernetes 集群的安全稳定运行，他们在安全和可用性上花费的大量精力，貌似并没有拿到什么前端开发资源。我注意到像费用中心、日志服务等产品都有了新版页面，这里希望能容器服务页面也能尽快改版，提高页面操作的便捷和美观。&lt;/p&gt;
&lt;h3 id=&#34;关于授权管理&#34;&gt;关于授权管理&lt;/h3&gt;
&lt;p&gt;一直以来容器服务都有授权管理功能，后来都基于RAM重新做了授权管理功能。但是RAM权限管理策略十分复杂，配置起来也很麻烦，不同的策略结构和语法学习起来非常困难。在配置和管理起来非常困难，我们只能把所有权限收回，每项权限都要根据需求提工单来进行配置，还时长会出现配置不生效的问题。而且这个问题一提出，就引起了大家的共鸣，后了解得知，为了安全合规的要求，操作便捷和安全合规没法兼顾。这里希望授权管理上能在确保合规的同时，能提升RAM操作的便捷性。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1g7hdrlln6vj21rm0ycwov.jpg&#34; alt=&#34;image&#34;&gt;
关于容器服务的交流主要是以上几点，其他的还包括监控、存储和 CI/CD 方面进行了交流，同时也获得了不少建议。当面给阿里云提需求的机会并不多，我也是抓住机会，把日常使用 ACK 的问题汇总之后一股脑的丢了出去。有类似需求的同学可以在&lt;a href=&#34;https://connect.aliyun.com&#34;&gt;阿里云的聆听平台&lt;/a&gt;上给阿里云提交建议，以我的经验，合理的需求会很快审核通过并排期开发，换句话说就是“人人都可以是阿里云的产品经理”。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 当码农遇见公益</title>
      <link>https://guoxudong.io/post/alibaba-public-welfare/</link>
      <pubDate>Sun, 29 Sep 2019 09:52:11 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/alibaba-public-welfare/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本次参加云栖大会，除了受到阿里云开发者社区的邀请，同时也受到了阿里码上公益团队的邀请，于9月25日下午参加了&lt;strong&gt;阿里巴巴技术公益专场&lt;/strong&gt;。说来惭愧，作为一个码农关注并加入码上公益已半年有余，但是除了在平台上以自己的经验来给出各种建议外，并没有贡献什么实质的代码，这也可能是因为我专职运维开发，在devops和效能提升上有很多自己的见解，但对于前端UI和各种官网的构建并不是很在行。&lt;/p&gt;
&lt;h2 id=&#34;阿里巴巴与公益&#34;&gt;阿里巴巴与公益&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1g7gdc2nfg5j21z819i4qv.jpg&#34; alt=&#34;image&#34;&gt;
一直以来我对于公益的理解还是停留在很浅的阶段，而且很长一段时间以来，公益还是停留在有限的圈子内，像我这样的技术人与公益完全就是两个世界。而阿里巴巴推出的码上公益则改变了这一点，这个平台让我了解到，原来公益除了捐助之外还能以自己的技术能力做出更大的贡献。此次技术公益专场，阿里发布了技术公益基金，我也是第一次见到这么多的阿里合伙人，可见公益在阿里巴巴集团内部的重要。阿里巴巴不只在集团内部推进公益，而且还为我们这样的普通人提供了像码上公益、蚂蚁森林、一书等平台和产品，让越来越多的人参与到公益事业中，让更多的人平等的享有技术红利。&lt;/p&gt;
&lt;h2 id=&#34;让代码更有温度&#34;&gt;让代码更有温度&lt;/h2&gt;
&lt;p&gt;参加码上公益的初衷只不过是想为公益事业做一些力所能及的事情，尤其是使用代码这种方式，在公益事业上展示我们技术人的才华。也符合与我的价值观：&lt;strong&gt;技术让世界更美好&lt;/strong&gt;。我们技术人可以通过一种比捐助更有温度的方式：代码，来让我们的世界越来越美好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/ad5fbf65gy1g7g8ywqxu5j21z01b87wp.jpg&#34; alt=&#34;image&#34;&gt;
在公益专场中有幸结识了 Michael HERMANN 老师，作为一个德国人，他却操这一口流利的中文，十几年如一日的在中国偏远的乡村中为那里的孩子带去教育，同时也为孩子们带去了希望。在专场后的公益沟通会有幸与 Michael 老师一桌，这是一位可爱的老人，十分关注中国偏远地区孩子们的教育问题，在他的身上我看到了一个作为公益人的坚持，在他眼里国籍、文化、地域都没有差别，有的只是希望这些生活在偏远地区的孩子都享有受教育的权利，十分值得敬佩。同时还结识了许多志同道合的码农朋友，大家都希望用自己温暖的代码为公益事业做出自己的贡献。&lt;/p&gt;
&lt;h2 id=&#34;我们只有一个地球&#34;&gt;我们只有一个地球&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax2.sinaimg.cn/large/ad5fbf65gy1g7ge105htyj21z419mqvb.jpg&#34; alt=&#34;image&#34;&gt;
之后《用现代科技助力中国虎豹保护》的主题分享，让我了解到了，环境的保护也是公益中很重要的一部分。而科技的发展，让从事动物保护的人员可以做的更仔细更完善，对于AI、大数据的应用，使得对于野生动物的保护更精准。技术赋能野生动物保护，可以更好的保护野生动物，同时也让动物保护人员的工作更轻松，让这些常年在大山密林中保护野生动物的科学家不再那么辛苦，同时更好的保护野生动物。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;之后南都公益基金会理事长徐永光分享了《互联网带来的时代改变》，了解到了互联网公益并不只是刚刚兴起，而是一直在努力；而联合国世界粮食计划署驻华代表屈四喜则带来了《为了“零饥饿”目标》。感谢阿里巴巴提供了这个机会，让我这样的技术人可以参与到公益事业当中，为公益事业贡献出自己的力量。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 玩转 Drone CI</title>
      <link>https://guoxudong.io/post/drone-optimize/</link>
      <pubDate>Wed, 11 Sep 2019 13:53:09 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/drone-optimize/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用 drone CI 已有小半年，在将原有项目的 CI 系统从 jenkins 向 drone 迁移的时候，也陆陆续续遇到了一些问题。在这段时间，也完成了使用官方插件到插件定制的转变，使得 drone CI 流程更贴合我们 devops 开发流程。通过这篇文章总结一下目前我们对 drone 进行的一些定制化开发以及使用技巧，由于 drone 官方的文档不是很详细，所以也希望通过这种方法来和其他使用 drone 的用户分享和交流使用经验。&lt;/p&gt;
&lt;h2 id=&#34;并行构建&#34;&gt;并行构建&lt;/h2&gt;
&lt;p&gt;在默认情况下，drone 会按照步骤执行，但是有时会遇到前后端在同一个 repo 的情况，这时使用并行构建就可以省去很多的构建时间。&lt;/p&gt;
&lt;h3 id=&#34;构建流程&#34;&gt;构建流程&lt;/h3&gt;
&lt;p&gt;在下面的示例里会展示一个如下流程：repo 中包含一个由 Java 写的服务以及一个 vue 前端项目，maven 构建和 npm 构建同时进行，maven 构建成功后会镜像 docker 镜像构建并上传镜像仓库，docker 构建成功后会镜像 k8s 部署，部署成功后会进行 vue 项目前端发布，在 k8s 部署成功并且前端发布成功后，进行钉钉构建成功同时，否则进行钉钉构建失败通知。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;前端构建 ————————————          前端发布
                    \      /        \
                     \    /       钉钉通知
                      \  /          /
后端构建 —— 镜像构建 —— k8s部署 ——————

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;droneyml-配置&#34;&gt;.drone.yml 配置&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;pipeline&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;steps&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Maven编译&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/drone-maven&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;commands&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mvn clean install&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;clone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;构建镜像&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/drone-docker&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;settings&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;username&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from_secret&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker_user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;password&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from_secret&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;docker_pass&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;dockerfile&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Dockerfile&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;repo&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;registry-vpc.cn-shanghai.aliyuncs.com/guoxudong/test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;registry&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;registry-vpc.cn-shanghai.aliyuncs.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;tags&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;${DRONE_BUILD_NUMBER}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Maven编译&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Kubernetes 部署&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/kubectl&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;settings&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;config&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;deploy/overlays/uat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;check&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;构建镜像&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;前端构建&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/node-drone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;commands&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;npm install&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;npm run build&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;clone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;前端上传&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/node-drone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;commands&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;do something&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;前端构建&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Kubernetes 部署&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;钉钉通知&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;guoxudongdocker/drone-dingtalk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;settings&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;from_secret&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;dingding&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;markdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;message_color&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;message_pic&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sha_link&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;depends_on&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;前端上传&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Kubernetes 部署&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;]&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;when&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;status&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;failure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;多子项目构建&#34;&gt;多子项目构建&lt;/h2&gt;
&lt;p&gt;在使用 drone 中遇到的最大问题就是，我们有很多项目都是在一个 repo 中有很多子项目，而每个子项目都是 k8s 中的一个服务，这时一个 &lt;code&gt;.drone.yml&lt;/code&gt; 文件很难把所有的服务都囊括。而又不想每个子项目拉一个分支管理，当前的模式就很不合适。&lt;/p&gt;
&lt;h3 id=&#34;插件开发&#34;&gt;插件开发&lt;/h3&gt;
&lt;p&gt;针对这个问题，我们对 drone 进行了定制化开发，会在每次提交代码后，对新提交的代码和老代码进行比较，筛选出做了修改的子项目，然后对有修改的子项目尽心 CI ，其余的子项目则不进行发布。&lt;/p&gt;
&lt;p&gt;而以上的方式仅适用于测试环境的快速迭代，生产环境则采用 tag 的模式，针对不同的子项目，打不同前缀的 tag ，比如子项目为 test1 ，则打 &lt;code&gt;test1-v0.0.1&lt;/code&gt; 的 tag，就会对该子项目进行生产发布。&lt;/p&gt;
&lt;h3 id=&#34;构建效果&#34;&gt;构建效果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有修改的子项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1gkr5icm3onj21o016e4ij.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无修改的子项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gkr5j5olenj21o014inf9.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes-发布状态检查&#34;&gt;Kubernetes 发布状态检查&lt;/h2&gt;
&lt;p&gt;之前的 Kubernetes 发布只是将服务发布到 Kubernetes 集群，并不管服务是否正常启动。针对这个问题以及我们的 Kubernetes 应用管理模式，我们开发了 drone 的 Kubernetes 发布插件，该插件包括 &lt;code&gt;kubectl&lt;/code&gt; 、&lt;code&gt;kustomize&lt;/code&gt;、&lt;code&gt;kubedog&lt;/code&gt; ，来完善我们的 Kubernetes 发布 step 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.drone.yml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;steps&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;Kubernetes&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;部署&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;guoxudongdocker/kubectl&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kube&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/root/.kube&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;settings&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;check&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                 &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 该参数为是否开启子模块检查&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;config&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;deploy/overlays/uat&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 这里使用 kustomize ,详细使用方法请见 https://github.com/kubernetes-sigs/kustomize&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;timeout&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;                 &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# kubedog 的检测超时&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;{your-deployment-name}&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 如果开启子模块检查则需要填入子模块名称&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;...&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;kube&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;host&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;path&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;/tmp/cache/.kube&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# kubeconfig 挂载位置&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;trigger&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;branch&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- master&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# 触发 CI 的分支&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用该插件会如果为测试构建，则会自动设置 docker 镜像 tag 为 &lt;code&gt;DRONE_BUILD_NUMBER&lt;/code&gt; ；如果为生产构建（git tag），则叫自动设置 docker 镜像 tag 为 &lt;code&gt;DRONE_TAG&lt;/code&gt; ，然后通过 &lt;code&gt;kubectl apply -k .&lt;/code&gt; 进行部署，同时使用 &lt;code&gt;kubedog&lt;/code&gt; 进行部署状态检查，如果服务正常启动则该 step 通过，如果超时或者部署报错则该 step 失败。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;根据我们目前的开发模式，对 drone 插件进行了全方位的开发。由于 dockerhub 的镜像拉取经常超时，则将镜像推送到了我们自己的镜像仓库；对钉钉通知也进行了优化；同时也根据我们目前的开发语言进行了插件的开发，提供了基于 Java 、Python 以及 Node.js 的 drone 插件，基本可以满足我们现在的 CI 需求，但随着 drone 的深入使用，越来越多的问题将会暴露出来。后续将会不断解决遇到的问题，持续优化。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: GitHub/Gitee 静态页托管页部署SSL证书</title>
      <link>https://guoxudong.io/post/aliyun-ssl/</link>
      <pubDate>Fri, 23 Aug 2019 09:36:55 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/aliyun-ssl/</guid>
      <description>
        
        
        &lt;p&gt;本文档介绍了在 &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github&lt;/a&gt; / &lt;a href=&#34;https://gitee.com/help/articles/4136&#34;&gt;Gitee&lt;/a&gt; 的静态页托管Pages服务部署SSL证书，配置HTTPS安全访问的操作说明。&lt;/p&gt;
&lt;h3 id=&#34;pages服务&#34;&gt;Pages服务&lt;/h3&gt;
&lt;p&gt;Github/Gitee的Pages是一个免费的静态网页托管服务，您可以使用Github或码云Pages托管博客、项目官网等静态网页。常见的静态站点生成器有：Hugo、Jekyll、Hexo等，可以用来生成静态站点。默认情况下，托管的站点使用 &lt;code&gt;github.io&lt;/code&gt; / &lt;code&gt;gitee.io&lt;/code&gt; 域名来访问站点，同时也支持自定义域名，并配置强制使用HTTPS。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果要在 Gitee Pages 上配置自定义域名+HTTPS，则需要开启 Gitee Pages Pro 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;github-pages-服务部署ssl证书&#34;&gt;Github Pages 服务部署SSL证书&lt;/h3&gt;
&lt;h4 id=&#34;前提条件&#34;&gt;前提条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 仓库&lt;/li&gt;
&lt;li&gt;开启 GitHub Pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/large/ad5fbf65gy1g69e503ukoj21ig0hwad9.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;证书签发&#34;&gt;证书签发&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;购买证书后点击申请&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/large/ad5fbf65gy1g69ee2r500j22cc078t9z.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书申请&lt;/p&gt;
&lt;p&gt;如果该域名是由阿里云购买，则选择自动DNS验证，如果不是在阿里云购买的，可以选择手动验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva2.sinaimg.cn/bmiddle/ad5fbf65gy1g69egsu7fuj20ye0swwh3.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书签发&lt;/p&gt;
&lt;p&gt;证书通过申请后，会收到证书签发的邮件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/wap720/ad5fbf65gy1g69epoqw6uj21680cotaj.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;设置自定义域名&#34;&gt;设置自定义域名&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解析域名&lt;/p&gt;
&lt;p&gt;在证书签发成功后，添加DNS解析，将绑定了SSL证书的域名解析到 &lt;code&gt;YourRepo.github.io&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/ad5fbf65gy1g69evivrvqj21mi07it9g.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置域名&lt;/p&gt;
&lt;p&gt;解析之后将域名添加到 &lt;code&gt;Custom domain&lt;/code&gt; 并且点击 &lt;code&gt;Save&lt;/code&gt; ，Github会自动验证，出现&lt;code&gt;Your site is published at https://YourDomainName.com/&lt;/code&gt;则证明解析成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/large/ad5fbf65gy1g69esrcn2tj21a210wwk0.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gitee-pages-pro-服务部署ssl证书&#34;&gt;Gitee Pages Pro 服务部署SSL证书&lt;/h3&gt;
&lt;h4 id=&#34;前提条件-1&#34;&gt;前提条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gitee 仓库&lt;/li&gt;
&lt;li&gt;开启 Gitee Pages Pro&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitee 需要开启 Gitee Pages Pro 服务才支持自定义域名+HTTPS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;证书签发-1&#34;&gt;证书签发&lt;/h4&gt;
&lt;p&gt;证书签发同 Github Pages。这里介绍非阿里云购买的域名，进行证书申请。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;购买证书流程如上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申请证书&lt;/p&gt;
&lt;p&gt;证书验证方式选择&lt;code&gt;手工DNS验证&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拷贝验证信息&lt;/p&gt;
&lt;p&gt;拷贝验证信息内的&lt;code&gt;记录值&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/bmiddle/ad5fbf65gy1g69eo1wls7j20ya0r0418.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证解析&lt;/p&gt;
&lt;p&gt;进入购买域名所在网站进行DNS解析，这里以&lt;a href=&#34;https://www.name.com/zh-cn/&#34;&gt;name.com&lt;/a&gt;为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/ad5fbf65gy1g69fqad2euj221g0700tt.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;解析成功之后，返回阿里云SSL证书管理页面点击&lt;code&gt;验证&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;证书签发&lt;/p&gt;
&lt;p&gt;签发成功后会收到签发成功的邮件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;设置自定义域名-1&#34;&gt;设置自定义域名&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解析域名&lt;/p&gt;
&lt;p&gt;进入域名所在网站，添加DNS解析记录，将绑定了SSL证书的域名解析到&lt;code&gt;gitee.gitee.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws3.sinaimg.cn/large/ad5fbf65gy1g69fyy5it5j21z606mjs9.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置域名&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;域名添加到&lt;code&gt;自定义域名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/large/ad5fbf65gy1g69g11wx0qj21a60xiq7m.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置证书&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;证书下载，选择 nginx 类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/bmiddle/ad5fbf65gy1g69g3pua7xj20ne0v0jus.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitee pages 配置证书，将证书文件与私钥文件贴入并提交。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/ad5fbf65gy1g69g64n1btj21bs0yogq8.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;勾选&lt;code&gt;强制使用HTTPS&lt;/code&gt;，并保存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;验证&#34;&gt;验证&lt;/h3&gt;
&lt;p&gt;在Github/Gitee配置成功之后，您可在浏览器中输入 &lt;a href=&#34;https://www.YourDomainName.com&#34;&gt;https://www.YourDomainName.com&lt;/a&gt; 验证证书安装结果。可以正常访问静态托管站点，并且浏览器地址栏显示绿色的小锁标识说明证书安装成功。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 解决 Nginx-Ingress 重定向失败问题</title>
      <link>https://guoxudong.io/post/nginx-ingress-error/</link>
      <pubDate>Fri, 16 Aug 2019 11:15:37 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/nginx-ingress-error/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近对公司 Kubernetes 集群的 &lt;code&gt;nginx-ingress-controller&lt;/code&gt; 进行了升级，但是升级后却出现了大问题，之前所有采用 &lt;code&gt;nginx.ingress.kubernetes.io/rewrite-target: /&lt;/code&gt; 注释进行重定向的 Ingress 路由全部失效了，但是那些直接解析了域名，没有进行重定向的却没有发生这个问题。&lt;/p&gt;
&lt;h2 id=&#34;问题分析&#34;&gt;问题分析&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先检查对应服务健康状态，发现所有出问题的服务的状态均正常，同时受影响的之后 http 调用，而 RPC 调用却不受影响，这时问题就定位到了 ingress。&lt;/li&gt;
&lt;li&gt;然后检查 nginx-ingress-controller ，发现 nginx-ingress-controller 的状态也是正常的，路由也是正常的。&lt;/li&gt;
&lt;li&gt;最后发现受影响的只有添加了重定向策略的 ingress 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;问题解决&#34;&gt;问题解决&lt;/h2&gt;
&lt;p&gt;问题已经定位，接下来就是着手解决问题，这时候值得注意的就是之前进行了什么变更：升级了 nginx-ingress-controller 版本！看来问题就出现在新版本上，那么就打开官方文档：https://kubernetes.github.io/ingress-nginx/examples/rewrite/ 看一下吧。&lt;/p&gt;
&lt;h3 id=&#34;attention&#34;&gt;Attention&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting in Version 0.22.0, ingress definitions using the annotation &lt;code&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/code&gt; are not backwards compatible with previous versions. In Version 0.22.0 and beyond, any substrings within the request URI that need to be passed to the rewritten path must explicitly be defined in a &lt;a href=&#34;https://www.regular-expressions.info/refcapture.html&#34;&gt;capture group&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档上给出了非常明显的警告⚠️：从 V0.22.0 版本开始将不再兼容之前的入口定义，再查看一下我的 nginx-ingress-controller 版本，果然问题出现来这里。&lt;/p&gt;
&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.regular-expressions.info/refcapture.html&#34;&gt;Captured groups&lt;/a&gt; are saved in numbered placeholders, chronologically, in the form &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; &amp;hellip; &lt;code&gt;$n&lt;/code&gt;. These placeholders can be used as parameters in the &lt;code&gt;rewrite-target&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;p&gt;到这里问题已经解决了，在更新了 ingress 的配置之后，之前所有无法重定向的服务现在都已经可以正常访问了。修改见如下示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#24909d&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;    nginx.ingress.kubernetes.io/rewrite-target: /$2
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  name: rewrite
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;  - host: rewrite.bar.com
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;    http:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;      - backend:
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;          serviceName: http-svc
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;          servicePort: 80
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;        path: /something(/|$)(.*)
&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;&lt;/span&gt; | kubectl create -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;解决这个问题的实际时间虽然不长，但是着实让人出了一身冷汗，同时也给了我警示：变更有风险，升级需谨慎。在升级之前需要先浏览新版本的升级信息，同时需要制定完善的回滚策略，确保万无一失。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: 如何构建混合Kubernetes平台</title>
      <link>https://guoxudong.io/post/how-we-built-our-hybrid-kubernetes-platfor/</link>
      <pubDate>Tue, 06 Aug 2019 14:01:30 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/how-we-built-our-hybrid-kubernetes-platfor/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;随着3年前重构 &lt;a href=&#34;https://www.dailymotion.com/&#34;&gt;Dailymotion&lt;/a&gt; 核心API的决定，我们希望提供一种更有效的方式来托管应用程序，&lt;a href=&#34;https://medium.com/dailymotion/deploying-apps-on-multiple-kubernetes-clusters-with-helm-19ee2b06179e&#34;&gt;促进我们的开发和生产工作流程&lt;/a&gt;。 最终决定使用容器编排平台来实现这一目标，那么自然就选择了 Kubernetes。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么为什么要建立自己的Kubernetes平台？&lt;/p&gt;
&lt;h2 id=&#34;借由-google-cloud-快速推动的-api-投入生产&#34;&gt;借由 Google Cloud 快速推动的 API 投入生产&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2016年夏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三年前，在 &lt;a href=&#34;https://www.vivendi.com/&#34;&gt;Vivendi&lt;/a&gt; 收购 Dailymotion 之后，所有开发团队都专注于一个目标：提供全新的 Dailymotion 产品。&lt;/p&gt;
&lt;p&gt;根据对容器、编排解决方案和以前的经验的分析，使我们确信 Kubernetes 是正确的选择。许多开发人员已经掌握了这一概念并知道如何使用 Kubernetes ，这对我们的基础设施转型来说是一个巨大的优势。在基础架构方面，我们需要一个强大而灵活的平台来托管这些新型的云原生应用程序。而公有云为我们提供了极大的便利，于是我们决定在 Google Kubernetes Engine 上部署我们的应用程序，即使之后我们也会在自己的数据中心中进行混合部署。&lt;/p&gt;
&lt;h3 id=&#34;为何选择-gke-&#34;&gt;为何选择 GKE ？&lt;/h3&gt;
&lt;p&gt;我们做出这个选择主要是出于技术原因，但也因为我们需要快速提供基础设施来满足 Dailymotion 的业务需求。并且对托管的应用程序（如地理分布，可伸缩性和弹性）有一些要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/ad5fbf65gy1g5py1vm2k2j20hd0bbjtq.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;Dailymotion 的 GKE 集群&lt;/center&gt;
&lt;p&gt;Dailymotion 作为一个全球性的视频平台，需要通过减少延迟来改善用户体验。之前我们仅在巴黎提供 &lt;a href=&#34;https://developer.dailymotion.com/&#34;&gt;API&lt;/a&gt; ，但这样并非最佳，我们希望能够在欧洲、亚洲以及美国托管我们的应用程序。&lt;/p&gt;
&lt;p&gt;这种延迟限制意味着我们在平台的网络设计方面面临着巨大的挑战。大多数云供应商要求我们在每个地区创建一个网络，并将所有这些网络通过 VPN 与托管服务互连，但 Google Cloud 允许我们在所有 Google 地区创建一个完全路由的单一网络，该网络在运营方面提供了便利并提高了效率。&lt;/p&gt;
&lt;p&gt;此外，Google Cloud 的网络和负载均衡服务非常棒。它可以将我们的用户路由到最近的集群，并且在发生故障的情况下，流量会自动路由到另一个区域而无需任何人为干预。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/large/ad5fbf65gy1g5pytelbwnj20jg0avq4x.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;Google 负载均衡监控&lt;/center&gt;
&lt;p&gt;我们的平台同样需要使用 GPU，而 Google Cloud 允许我们以非常有效的方式直接在我们的 Kubernetes 集群中使用它们。&lt;/p&gt;
&lt;p&gt;所有这一切使我们在启动后6个月开始接入 Google Cloud 基础架构上的生产流量。&lt;/p&gt;
&lt;p&gt;但是，尽管具有整体优势，但使用共有云服务还是要花费不少成本。这就是为什么我们要评估采取的每项托管服务，以便将来将其内部化。事实上，我们在2016年底开始构建我们的本地集群，并启动了我们的混合策略。&lt;/p&gt;
&lt;h2 id=&#34;在-dailymotion-的内部构建容器编排平台&#34;&gt;在 Dailymotion 的内部构建容器编排平台&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2016年秋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看到整个技术栈已经准备好在生产环境中应用，但&lt;a href=&#34;https://tartiflette.io/&#34;&gt;API仍在开发中&lt;/a&gt;，这使得我们有时间专注搭建我们的本地集群。&lt;/p&gt;
&lt;p&gt;Dailymotion 多年来在全球拥有自己的内容分发网络，每月有超过30亿的视频播放量。显然，我们希望利用现有的优势并在我们现有的数据中心部署自己的 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;我的目前拥有6个数据中心的2500多台服务器。所有这些都使用 Saltstack 进行配置，我们开始准备所有需要的公式来创建主节点、工作节点以及 Etcd 集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/large/ad5fbf65gy1g5pzm4m985j20jg06tgm7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络部分&#34;&gt;网络部分&lt;/h3&gt;
&lt;p&gt;我们的网络是一个完全路由的网络。每个服务器使用Exabgp通过网络广播自己的IP。我们比较了几个网络插件， &lt;a href=&#34;https://www.projectcalico.org/&#34;&gt;Calico&lt;/a&gt; 使用的是三层网络，因此这是唯一满足我们需求的网络插件。&lt;/p&gt;
&lt;p&gt;由于我们想要重用基础架构中的所有现有工具，首先要解决的问题是插入一个自制网络工具（我们所有服务器都使用它），通过我们的 Kubernetes 节点通过网络广播 IP 范围。我们让 Calico 为 pod 分配 IP，但不使用它与我们的网络设备进行BGP会话。路由实际上是由Exabgp处理的，它宣布了Calico使用的子网。这使我们可以从内部网络访问任何pod，尤其是来自我们的负载均衡器。&lt;/p&gt;
&lt;h3 id=&#34;我们如何管理入口流量&#34;&gt;我们如何管理入口流量&lt;/h3&gt;
&lt;p&gt;为了将传入的请求路由到正确的服务，我们希望使用 Ingress Controllers 与 Kubernetes 的入口资源集成。&lt;/p&gt;
&lt;p&gt;3年前，nginx-ingress-controller 是最成熟的控制器 ，并且 Nginx 已经使用多年，并以其稳定性和性能而闻名。&lt;/p&gt;
&lt;p&gt;在我们的设计中，我们决定在专用的 10Gbps 刀片服务器上托管我们的控制器。每个控制器都插入其所属集群的 kube-apiserver 端点。在这些服务器上，我们还使用Exabgp来广播公共或私有IP。我们的网络拓扑允许我们使用来自这些控制器的BGP将所有流量直接路由到我们的pod，而无需使用NodePort服务类型。这样可以避免节点之间的水平流量，从而提高效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws3.sinaimg.cn/large/ad5fbf65gy1g5q05ex27bj20in0fbt9q.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;从 Internet 到 pods 的流量&lt;/center&gt;
&lt;p&gt;现在我们已经看到了我们如何构建混合平台，我们可以深入了解流量迁移本身。&lt;/p&gt;
&lt;h2 id=&#34;将流量从-google-cloud-迁移到-dailymotions-基础架构&#34;&gt;将流量从 Google Cloud 迁移到 Dailymotions 基础架构&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2018年秋&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经过近2年的构建、测试和微调，我们发现自己拥有完整的 Kubernetes 技术栈，可以接收部分流量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx2.sinaimg.cn/large/ad5fbf65gy1g5q0b3o8laj20jg06sq36.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前，我们的路由策略非常简单，但足以解决我们的问题。除了我们的公共IP（Google Cloud和Dailymotion）之外，我们还使用AWS Route 53 来定义策略并将终端用户流量引入我们选择的集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/ad5fbf65gy1g5q0ds3spjj20jg07a0tk.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;center&gt;使用Route 53的路由策略示例&lt;/center&gt;
&lt;p&gt;在 Google Cloud 上很简单，因为我们为所有群集使用唯一的IP，并且用户被路由到他最近的 GKE 群集。对于我们来说，我们不使用相同的技术，因此我们每个群集都有不同的IP。&lt;/p&gt;
&lt;p&gt;在此次迁移过程中，我们将目标国家逐步纳入我们的集群并分析其收益。&lt;/p&gt;
&lt;p&gt;由于我们的GKE集群配置了自动调节自定义指标，因此它们会根据传入流量进行扩展/缩小。&lt;/p&gt;
&lt;p&gt;在正常模式下，区域的所有流量都路由到我们的内部部署集群，而GKE集群则使用Route 53提供的运行状况检查作为故障转移。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;我们接下来的步骤是完全自动化我们的路由策略，以实现自动混合策略，不断增强我们的用户体验。在效益方面，我们大大降低了云的成本，甚至改善了API响应时间。我们相信我们的云平台足以在需要时处理更多流量。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Golang 装逼指南 Ⅱ：在 Homwebrew 上发布 Golang 项目</title>
      <link>https://guoxudong.io/post/golang-to-homebrew/</link>
      <pubDate>Thu, 25 Jul 2019 16:27:57 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/golang-to-homebrew/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;经过上篇文章，我们已经可以在 GitHub 上构建一个看上去正经的 Golang 项目了，但这并不是结束。一个真正的用 Golang 构建的可执行文件是可以在全平台运行的，前文中我们使用 &lt;code&gt;goreleaser&lt;/code&gt; 发布了一个非常漂亮的 release 页面，并在 release 页面上提供多平台的可执行文件下载。但是如果只是拿着可执行文件到处拷贝执行，总归不够优雅，所以这里就介绍如何在 Homebrew 上发布自己的 Golang 应用，如何像各种牛逼的项目那样使用 &lt;code&gt;brew&lt;/code&gt; 一键安装自己的项目。&lt;/p&gt;
&lt;h2 id=&#34;homebrew&#34;&gt;Homebrew&lt;/h2&gt;
&lt;p&gt;对于使用 macOS 的用户来说，Homebrew 一点也不陌生，它类似于 CentOS 的 &lt;code&gt;yum&lt;/code&gt; 和 Ubuntu 的 &lt;code&gt;apt-get&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; 是最初由 Max Howell 用 Ruby 写的 OS X 软件管理系统，其代码开源在 &lt;a href=&#34;https://github.com/Homebrew/brew/&#34;&gt;GitHub&lt;/a&gt; 上。&lt;/p&gt;
&lt;p&gt;Homebrew 给自己贴了个一句话简介：The missing package manager for OS X。翻译过来成中文就是：macOS 缺失的软件包的管理器。名副其实地是，Homebrew 真的很好用。安装、升级、卸载等操作，在 Homebrew 的生态下，都只需要一条命令就可以了。并且 Homebrew 会自动为你解决软件包的依赖问题。&lt;/p&gt;
&lt;h2 id=&#34;发布步骤&#34;&gt;发布步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建 Formula&lt;/li&gt;
&lt;li&gt;修改 rb 脚本&lt;/li&gt;
&lt;li&gt;本地测试&lt;/li&gt;
&lt;li&gt;创建 Tap&lt;/li&gt;
&lt;li&gt;实际安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建-formula&#34;&gt;创建 Formula&lt;/h3&gt;
&lt;p&gt;首先进入 release 页面，拷贝 macOS 的 Darwin 包地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/ad5fbf65gy1g5c7b4mi5fj21lq0se4ck.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后通过命令在本地创建 Formula&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew create https://github.com/sunny0826/kubecm/releases/download/v0.0.1/kubecm_0.0.1_Darwin_x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这个命令，&lt;code&gt;brew&lt;/code&gt; 会创建一个名为 &lt;code&gt;kubecm.rb&lt;/code&gt; 的文件在 &lt;code&gt;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/&lt;/code&gt; 目录。&lt;/p&gt;
&lt;h3 id=&#34;修改-rb-脚本&#34;&gt;修改 rb 脚本&lt;/h3&gt;
&lt;p&gt;然后在该目录可以看到 &lt;code&gt;kubecm.rb&lt;/code&gt; 这个脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Documentation: https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#                http://www.rubydoc.info/github/Homebrew/brew/master/Formula&lt;/span&gt;
&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# PLEASE REMOVE ALL GENERATED COMMENTS BEFORE SUBMITTING YOUR PULL REQUEST!&lt;/span&gt;

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;OtfccMac64&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#40ffff&#34;&gt;Formula&lt;/span&gt;
  desc &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  homepage &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  url &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://github.com/sunny0826/kubecm/releases/download/v0.0.1/kubecm_0.0.1_Darwin_x86_64.tar.gz&amp;#34;&lt;/span&gt;
  version &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0.0.1&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;f393b14f9c42c890b8a60949b13a8f9b5c3f814daa8b18901656ccc3b866f646&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# depends_on &amp;#34;cmake&amp;#34; =&amp;gt; :build&lt;/span&gt;
  depends_on &lt;span style=&#34;color:#ed9d13&#34;&gt;:x11&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# if your formula requires any X11/XQuartz components&lt;/span&gt;

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;install&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# ENV.deparallelize  # if your formula fails when building in parallel&lt;/span&gt;

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# Remove unrecognized options if warned by configure&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;./configure&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-debug&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-dependency-tracking&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--disable-silent-rules&amp;#34;&lt;/span&gt;,
                          &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;--prefix=&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;#{&lt;/span&gt;prefix&lt;span style=&#34;color:#ed9d13&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# system &amp;#34;cmake&amp;#34;, &amp;#34;.&amp;#34;, *std_cmake_args&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;make&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# if this fails, try separate make/make install steps&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#24909d&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# `test do` will create, run in and delete a temporary directory.&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# This test will fail and we won&amp;#39;t accept that! It&amp;#39;s enough to just replace&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# &amp;#34;false&amp;#34; with the main program this formula installs, but it&amp;#39;d be nice if you&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# were more thorough. Run the test with `brew test otfcc-win32`. Options passed&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# to `brew install` such as `--HEAD` also need to be provided to `brew test`.&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# The installed folder is not in the path, so use the entire path to any&lt;/span&gt;
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# executables being tested: `system &amp;#34;#{bin}/program&amp;#34;, &amp;#34;do&amp;#34;, &amp;#34;something&amp;#34;`.&lt;/span&gt;
    &lt;span style=&#34;color:#24909d&#34;&gt;system&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认提供的脚本并不适合我们，修改这个脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Ruby&#34; data-lang=&#34;Ruby&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#447fcf;text-decoration:underline&#34;&gt;Kubecm&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#40ffff&#34;&gt;Formula&lt;/span&gt;
  desc &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Merge multiple kubeconfig&amp;#34;&lt;/span&gt;
  homepage &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://github.com/sunny0826/kubecm&amp;#34;&lt;/span&gt;
  url &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;https://github.com/sunny0826/kubecm/releases/download/v0.0.1/kubecm_0.0.1_Darwin_x86_64.tar.gz&amp;#34;&lt;/span&gt;
  version &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;0.0.1&amp;#34;&lt;/span&gt;
  sha256 &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;8c2766e7720049ba0ce9e3d20b7511796a6ba224ce1386cd1d4ef8cc6e1315cd&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;# depends_on &amp;#34;cmake&amp;#34; =&amp;gt; :build&lt;/span&gt;

  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;install&lt;/span&gt;
    bin.install &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;kubecm&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分布填上 &lt;code&gt;desc&lt;/code&gt; 、 &lt;code&gt;homepage&lt;/code&gt; 、&lt;code&gt;url&lt;/code&gt; 等信息，由于这里下载的是 darwin 包，所以直接在 &lt;code&gt;install&lt;/code&gt; 中填上 &lt;code&gt;bin.install &amp;quot;kubecm&amp;quot;&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&#34;本地测试&#34;&gt;本地测试&lt;/h3&gt;
&lt;p&gt;保存脚本，然后使用 &lt;code&gt;brew install kubecm&lt;/code&gt; 进行测试，查看结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Updating Homebrew...
Fast-forwarded master to origin/master.
Fast-forwarded master to origin/master.
==&amp;gt; Auto-updated Homebrew!
Updated &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; taps (sunny0826/tap, homebrew/cask).
==&amp;gt; Updated Formulae
sunny0826/tap/kubecm

==&amp;gt; Downloading https://github.com/sunny0826/kubecm/releases/download/v0.0.1/kubecm_0.0.1_Darwin_x86_64.tar.gz
Already downloaded: /Users/guoxudong/Library/Caches/Homebrew/kubecm-86.64.tar.gz
🍺  /usr/local/Cellar/kubecm/86.64: &lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt; files, 5.4MB, built in &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; second
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到已经安装成功了！&lt;/p&gt;
&lt;h3 id=&#34;创建-tap&#34;&gt;创建 Tap&lt;/h3&gt;
&lt;p&gt;在本地测试成功之后，就可以把他发布了。这里需要在 GitHub 上创建一个名为 &lt;code&gt;homebrew-tap&lt;/code&gt; 的 repo 注意该 repo 需要以 &lt;code&gt;homebrew-&lt;/code&gt; 为前缀，像是&lt;a href=&#34;https://github.com/sunny0826/homebrew-tap&#34;&gt;这样&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后将刚才的 &lt;code&gt;kubecm.rb&lt;/code&gt; 脚本上传到这个 repo ，然后就可以通过 &lt;code&gt;brew&lt;/code&gt; 的方式安装了。&lt;/p&gt;
&lt;h3 id=&#34;实际测试&#34;&gt;实际测试&lt;/h3&gt;
&lt;p&gt;发布好之后，就可以测试发布成功没有了。&lt;/p&gt;
&lt;p&gt;首先卸载之前使用本地脚本安装的应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ brew uninstall kubecm
Uninstalling /usr/local/Cellar/kubecm/86.64... (&lt;span style=&#34;color:#3677a9&#34;&gt;5&lt;/span&gt; files, 5.4MB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew tap sunny0826/tap &amp;amp;&amp;amp; brew install kubecm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install sunny0826/tap/kubecm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来进行安装。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;到这我们就成功的在 Homebrew 上发布了自己的 Golang 应用，本篇中的方法仅适合 Golang 开发的二进制可执行文件的发布，其他语言的发布需要在 &lt;code&gt;.rb&lt;/code&gt; 脚本上有所修改，更多内容请参考&lt;a href=&#34;https://docs.brew.sh/&#34;&gt;官方文档&lt;/a&gt;。这里要再介绍一下我用 Golang 开发的另一个小工具 &lt;a href=&#34;https://github.com/sunny0826/kubecm&#34;&gt;kubecm&lt;/a&gt; ，该项目之前我是使用 python 开发的，用于合并多个 kubeconfig 文件，本次重写新增了查看所有 kubeconfig 和 删除 kubeconfig 中 context 等功能，同时也在 Homebrew 上发布，欢迎拍砖。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Post: Golang 装逼指南：在 GitHub 上构建一个看上去正规的 Golang 项目</title>
      <link>https://guoxudong.io/post/golang-project/</link>
      <pubDate>Fri, 19 Jul 2019 10:38:26 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/golang-project/</guid>
      <description>
        
        
        &lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;接触 golang 时间很长，但是真正动手开始写 golang 也就是在最近。虽然写的不多，但是见过的 golang 项目可是不计其数，从 &lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;Kubernetes&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;istio&lt;/a&gt; 到亲身参与的 &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34;&gt;kustomize&lt;/a&gt; 再到 Kubernetes 生态圈的众多小工具，比如： &lt;a href=&#34;https://github.com/instrumenta/kubeval&#34;&gt;kubeval&lt;/a&gt; 、 &lt;a href=&#34;https://github.com/flant/kubedog&#34;&gt;kubedog&lt;/a&gt; 等。从项目使用者和贡献者的角度接触了各种形形色色的 golang 项目。作为一个开发人员，在享受各种开源项目带来便利的同时，也希望自己动手开发一个 golang 项目。以我阅项目无数的经验，那么肯定要构建一个看上去正规的 GitHub 项目。&lt;/p&gt;
&lt;h2 id=&#34;goland-设置&#34;&gt;GoLand 设置&lt;/h2&gt;
&lt;p&gt;Go 开发环境的安装网上教程很多，这里就不做介绍了。这里主要介绍一下在 GoLand 上开发环境的设置，这里的设置主要在 MacOS 上进行，其他系统可能有所不同。&lt;/p&gt;
&lt;h3 id=&#34;使用goland-ide-vgo&#34;&gt;使用Goland IDE vgo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vgo&lt;/code&gt; 是基于 Go Module 规范的包管理工具，同官方的 go mod 命令工具类似。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开启 &lt;code&gt;vgo&lt;/code&gt;，&lt;code&gt;GoLand&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;GO&lt;/code&gt;-&amp;gt;&lt;code&gt;Go Modules(vgo)&lt;/code&gt;
&lt;img src=&#34;https://ws2.sinaimg.cn/large/ad5fbf65gy1g556yudwh8j20s20jhgn4.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动修改 &lt;code&gt;go.mod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 latest 为最新版本，GoLand 会去下载最新依赖代码，下载成功后会修改 &lt;code&gt;go.mod&lt;/code&gt; 并且生成 &lt;code&gt;go.sum&lt;/code&gt; 依赖分析文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;module github.com/sunny0826/hamal

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;1.12&lt;/span&gt;

&lt;span style=&#34;color:#447fcf&#34;&gt;require&lt;/span&gt; (
    github.com/mitchellh/&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt;-homedir latest
    github.com/spf13/cobra latest
    github.com/spf13/viper latest
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新成功&lt;/p&gt;
&lt;p&gt;在更新成功后，会生成 &lt;code&gt;go.sum&lt;/code&gt; 文件并修改 &lt;code&gt;go.mod&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;module github.com/sunny0826/hamal

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;1.12&lt;/span&gt;

&lt;span style=&#34;color:#447fcf&#34;&gt;require&lt;/span&gt; (
    github.com/mitchellh/&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt;-homedir v1&lt;span style=&#34;color:#3677a9&#34;&gt;.1.0&lt;/span&gt;
    github.com/spf13/cobra v0&lt;span style=&#34;color:#3677a9&#34;&gt;.0.5&lt;/span&gt;
    github.com/spf13/viper v1&lt;span style=&#34;color:#3677a9&#34;&gt;.4.0&lt;/span&gt;
)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用快捷键 &lt;code&gt;⌥(option)+↩(return)&lt;/code&gt; 或者点击鼠标右键, 选择 &lt;code&gt;Sync packages of github.com/sunny0826/hamal&lt;/code&gt; 在 import 处导入依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置代理&#34;&gt;配置代理&lt;/h3&gt;
&lt;p&gt;如果要选出 golang 最劝退一个原因，那么依赖下载难肯定得票最高！这个时候一个合适的梯子就很重要了，如果没有这个梯子，上面的这步就完全无法完成。这里主要介绍 GoLand 上的配置，Shadowsocks 的安装和配置就不做介绍了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GoLand&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;Appearance &amp;amp; Behavior&lt;/code&gt;-&amp;gt;&lt;code&gt;System Settings&lt;/code&gt;-&amp;gt;&lt;code&gt;HTTP Proxy&lt;/code&gt; 这里设置好之后，别忘了点击 &lt;code&gt;Check connection&lt;/code&gt; 测试一下梯子搭成没有。
&lt;img src=&#34;https://ws4.sinaimg.cn/large/ad5fbf65gy1g557j6it07j20s20je40p.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置-go-fmt-goimports-和-golangci-lint&#34;&gt;配置 &lt;code&gt;go fmt&lt;/code&gt;、 &lt;code&gt;goimports&lt;/code&gt; 和 &lt;code&gt;golangci-lint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这三个工具都是 GoLand 自带的，设置起来十分简单:&lt;code&gt;GoLand&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;Tools&lt;/code&gt;-&amp;gt;&lt;code&gt;File Watchers&lt;/code&gt;，点击添加即可。之后在写完代码之后就会自动触发这3个工具的自动检测，工具作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go fmt&lt;/code&gt; : 统一的代码格式化工具。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;golangci-lint&lt;/code&gt; : 静态代码质量检测工具，用于包的质量分析。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goimports&lt;/code&gt; : 自动 import 依赖包工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ws3.sinaimg.cn/large/ad5fbf65gy1g557ps83gsj20s30njtbs.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装配置-golint&#34;&gt;安装配置 &lt;code&gt;golint&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;GoLand 没有自带 &lt;code&gt;golint&lt;/code&gt; 工具，需要手动安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p &lt;span style=&#34;color:#40ffff&#34;&gt;$GOPATH&lt;/span&gt;/src/golang.org/x/
&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$GOPATH&lt;/span&gt;/src/golang.org/x/
git clone https://github.com/golang/lint.git
git clone https://github.com/golang/tools.git
&lt;span style=&#34;color:#24909d&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;$GOPATH&lt;/span&gt;/src/golang.org/x/lint/golint
go install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装成功之后将会在 &lt;code&gt;$GOPATH/bin&lt;/code&gt; 目录下看到自动生成了 &lt;code&gt;golint&lt;/code&gt; 二进制工具文件。&lt;/p&gt;
&lt;p&gt;GoLand 配置 &lt;code&gt;golint&lt;/code&gt;，修改 &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Program&lt;/code&gt;, &lt;code&gt;Arguments&lt;/code&gt; 三项配置，其中 &lt;code&gt;Arguments&lt;/code&gt; 需要加上 &lt;code&gt;-set_exit_status&lt;/code&gt; 参数，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wx4.sinaimg.cn/large/ad5fbf65gy1g557z8a5jgj20ln0i0t9z.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;travis-ci-持续集成&#34;&gt;Travis CI 持续集成&lt;/h2&gt;
&lt;p&gt;在 Github 上装逼怎么能少的了 Travis CI ，直接登录 &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;，使用 GitHub 登录，然后选择需要使用 Travis CI 的项目，在项目根目录添加 &lt;code&gt;.travis.yml&lt;/code&gt; ，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;language&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;go&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;go&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#3677a9&#34;&gt;1.12.5&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;sudo&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;required&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;install&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- echo&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;install&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;script&lt;/span&gt;:&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;  &lt;/span&gt;- echo&lt;span style=&#34;color:#666&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里只是一个示例，在每次 push 代码之后，都会触发 CI，具体语法可以参看&lt;a href=&#34;https://docs.travis-ci.com/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;装逼重点：&lt;/strong&gt; 你以为使用 Travis CI 就是为了持续集成吗？那就太天真了！使用 Travis CI 当然为了他的 Badges ，将 &lt;code&gt;RESULT&lt;/code&gt; 拷贝到你的 &lt;code&gt;README.md&lt;/code&gt; 里面就好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/ad5fbf65gy1g558xf6io4j22dk15an4t.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;go-report-card&#34;&gt;GO Report Card&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;又一装逼重点&lt;/strong&gt;：我们在 GoLand 上安装了 &lt;code&gt;golint&lt;/code&gt; 等工具进行代码质量检测，在撸码的时候就能进行代码检查，那么这个就是为了纯装逼了。&lt;a href=&#34;https://goreportcard.com/&#34;&gt;GO Report Card&lt;/a&gt; 是一个 golang 代码检测网站，你只需把 Github 地址填上去即可。获取 Badges 的方法和 Travis CI 类似，将 MarkDown 中的内容拷贝到 &lt;code&gt;RERADME.md&lt;/code&gt; 中就好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ws3.sinaimg.cn/large/ad5fbf65gy1g559flsl3xj21t410ok1a.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;goreleaser&#34;&gt;GoReleaser&lt;/h2&gt;
&lt;p&gt;持续集成有了，代码检查也有了，再下面就是怎么发布一个漂亮的 release 了。如果还在手动发布 release ，那么就又掉 low 了。使用 GoReleaser 一行命令来发布一个漂亮的 release 吧。&lt;/p&gt;
&lt;p&gt;由于使用的的 MacOS ，这里使用 &lt;code&gt;brew&lt;/code&gt; 来安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install goreleaser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在项目根目录生成 &lt;code&gt;.goreleaser.yml&lt;/code&gt; 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;goreleaser init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置好了以后要记得往 &lt;code&gt;.gitignore&lt;/code&gt; 加上 &lt;code&gt;dist&lt;/code&gt;，因为 goreleaser 会默认把编译编译好的文件输出到 &lt;code&gt;dist&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;goreleaser 配置好后，可以先编译测试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;goreleaser --skip-validate --skip-publish --snapshot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 首次使用 goreleaser 要配置 GITHUB_TOKEN ，可以在&lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;这里&lt;/a&gt;申请，申请好之后运行下面的命令配置&lt;code&gt;GITHUB_TOKEN&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#40ffff&#34;&gt;GITHUB_TOKEN&lt;/span&gt;=&amp;lt;YOUR_TOKEN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确保没有问题，那么就可以操作 git 和 goreleaser 来发布 release 了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git add .
git commit -m &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;add goreleaser&amp;#34;&lt;/span&gt;
git tag -a v0.0.3 -m &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;First release&amp;#34;&lt;/span&gt;
git push origin master
git push origin v0.0.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全部搞定后，一行命令起飞：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;goreleaser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;goreleaser&lt;/code&gt; 配合 CI 食用，效果更佳，这里就不做介绍了。
&lt;img src=&#34;https://wx2.sinaimg.cn/large/ad5fbf65gy1g55a7t8bq4j20sq0liacm.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;badges-展示神器&#34;&gt;Badges 展示神器&lt;/h2&gt;
&lt;p&gt;这里介绍一个展示 Badges 的神器：&lt;a href=&#34;https://shields.io/&#34;&gt;https://shields.io/&lt;/a&gt; 。这个网站提供各种各样的 Badges ，如果你愿意，完全可以把你的 GitHub README.md 填满，有兴趣的同学可以自取。
&lt;img src=&#34;https://wx4.sinaimg.cn/large/ad5fbf65gy1g55aendhrwj22fg19igz0.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;到这里可以在 GitHub 上装逼的 golang 配置已经介绍的差不多了，其实还有 &lt;a href=&#34;https://codecov.io/&#34;&gt;Codecov&lt;/a&gt;、&lt;a href=&#34;https://circleci.com/&#34;&gt;CircleCI&lt;/a&gt; 等工具，这里就不做介绍了。这里要介绍的是我们的第一个 golang 项目 &lt;a href=&#34;https://github.com/sunny0826/hamal&#34;&gt;Hamal&lt;/a&gt;，该项目是一个命令行工具，用来在不同的镜像仓库之间同步镜像。由于我司推行混合云，使用了阿里云与华为云，而在阿里云或华为云环境互相推镜像的时候时间都比较长，所以开发这个小工具用于在办公网络镜像同步，同时也可以用来将我在 dockerhub 上托管的镜像同步到我们的私有仓库，欢迎拍砖。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
